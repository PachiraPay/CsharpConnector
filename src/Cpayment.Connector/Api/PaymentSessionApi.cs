/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Cpayment.Connector.Client;
using Cpayment.Connector.Model;

namespace Cpayment.Connector.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentSessionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the payment result from its session id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentSessionId">The payment session id.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>GetPaymentSessionResult</returns>
        GetPaymentSessionResult V1PaymentSessionsByPaymentSessionIdPaymentResultGet (Guid? paymentSessionId, string authToken);

        /// <summary>
        /// Gets the payment result from its session id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentSessionId">The payment session id.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>ApiResponse of GetPaymentSessionResult</returns>
        ApiResponse<GetPaymentSessionResult> V1PaymentSessionsByPaymentSessionIdPaymentResultGetWithHttpInfo (Guid? paymentSessionId, string authToken);
        /// <summary>
        /// Creates a payment session.
        /// </summary>
        /// <remarks>
        /// Initializes a hosted form payment session with all the necessary data (order informations, customer informations, payment method...).  This API route can be used for classic hosted form. In that case, this operation is a alternative to the \&quot;client redirection POST\&quot; method (with HMAC).  It&#39;s also the standard way for initializing a payment session for \&quot;iframe integration\&quot;.            You will get an URL pointing to a paymentform, so the customer will be able to complete the payment form with his card details.  You will also get a PaymentSessionId. It will be useful for calling the GetPaymentResult API when the payment will complete.
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentSessionRequest">The payment session request. (optional)</param>
        /// <returns>PaymentSessionResponse</returns>
        PaymentSessionResponse V1PaymentSessionsPost (string authToken, PaymentSessionRequest paymentSessionRequest = null);

        /// <summary>
        /// Creates a payment session.
        /// </summary>
        /// <remarks>
        /// Initializes a hosted form payment session with all the necessary data (order informations, customer informations, payment method...).  This API route can be used for classic hosted form. In that case, this operation is a alternative to the \&quot;client redirection POST\&quot; method (with HMAC).  It&#39;s also the standard way for initializing a payment session for \&quot;iframe integration\&quot;.            You will get an URL pointing to a paymentform, so the customer will be able to complete the payment form with his card details.  You will also get a PaymentSessionId. It will be useful for calling the GetPaymentResult API when the payment will complete.
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentSessionRequest">The payment session request. (optional)</param>
        /// <returns>ApiResponse of PaymentSessionResponse</returns>
        ApiResponse<PaymentSessionResponse> V1PaymentSessionsPostWithHttpInfo (string authToken, PaymentSessionRequest paymentSessionRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the payment result from its session id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentSessionId">The payment session id.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of GetPaymentSessionResult</returns>
        System.Threading.Tasks.Task<GetPaymentSessionResult> V1PaymentSessionsByPaymentSessionIdPaymentResultGetAsync (Guid? paymentSessionId, string authToken);

        /// <summary>
        /// Gets the payment result from its session id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentSessionId">The payment session id.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of ApiResponse (GetPaymentSessionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPaymentSessionResult>> V1PaymentSessionsByPaymentSessionIdPaymentResultGetAsyncWithHttpInfo (Guid? paymentSessionId, string authToken);
        /// <summary>
        /// Creates a payment session.
        /// </summary>
        /// <remarks>
        /// Initializes a hosted form payment session with all the necessary data (order informations, customer informations, payment method...).  This API route can be used for classic hosted form. In that case, this operation is a alternative to the \&quot;client redirection POST\&quot; method (with HMAC).  It&#39;s also the standard way for initializing a payment session for \&quot;iframe integration\&quot;.            You will get an URL pointing to a paymentform, so the customer will be able to complete the payment form with his card details.  You will also get a PaymentSessionId. It will be useful for calling the GetPaymentResult API when the payment will complete.
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentSessionRequest">The payment session request. (optional)</param>
        /// <returns>Task of PaymentSessionResponse</returns>
        System.Threading.Tasks.Task<PaymentSessionResponse> V1PaymentSessionsPostAsync (string authToken, PaymentSessionRequest paymentSessionRequest = null);

        /// <summary>
        /// Creates a payment session.
        /// </summary>
        /// <remarks>
        /// Initializes a hosted form payment session with all the necessary data (order informations, customer informations, payment method...).  This API route can be used for classic hosted form. In that case, this operation is a alternative to the \&quot;client redirection POST\&quot; method (with HMAC).  It&#39;s also the standard way for initializing a payment session for \&quot;iframe integration\&quot;.            You will get an URL pointing to a paymentform, so the customer will be able to complete the payment form with his card details.  You will also get a PaymentSessionId. It will be useful for calling the GetPaymentResult API when the payment will complete.
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentSessionRequest">The payment session request. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentSessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentSessionResponse>> V1PaymentSessionsPostAsyncWithHttpInfo (string authToken, PaymentSessionRequest paymentSessionRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentSessionApi : IPaymentSessionApi
    {
        private Cpayment.Connector.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentSessionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentSessionApi(String basePath)
        {
            this.Configuration = new Cpayment.Connector.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cpayment.Connector.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentSessionApi"/> class
        /// </summary>
        /// <returns></returns>
        public PaymentSessionApi()
        {
            this.Configuration = Cpayment.Connector.Client.Configuration.Default;

            ExceptionFactory = Cpayment.Connector.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentSessionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentSessionApi(Cpayment.Connector.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cpayment.Connector.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cpayment.Connector.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cpayment.Connector.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cpayment.Connector.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the payment result from its session id. 
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentSessionId">The payment session id.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>GetPaymentSessionResult</returns>
        public GetPaymentSessionResult V1PaymentSessionsByPaymentSessionIdPaymentResultGet (Guid? paymentSessionId, string authToken)
        {
             ApiResponse<GetPaymentSessionResult> localVarResponse = V1PaymentSessionsByPaymentSessionIdPaymentResultGetWithHttpInfo(paymentSessionId, authToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the payment result from its session id. 
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentSessionId">The payment session id.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>ApiResponse of GetPaymentSessionResult</returns>
        public ApiResponse< GetPaymentSessionResult > V1PaymentSessionsByPaymentSessionIdPaymentResultGetWithHttpInfo (Guid? paymentSessionId, string authToken)
        {
            // verify the required parameter 'paymentSessionId' is set
            if (paymentSessionId == null)
                throw new ApiException(400, "Missing required parameter 'paymentSessionId' when calling PaymentSessionApi->V1PaymentSessionsByPaymentSessionIdPaymentResultGet");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentSessionApi->V1PaymentSessionsByPaymentSessionIdPaymentResultGet");

            var localVarPath = "./v1/payment-sessions/{paymentSessionId}/paymentResult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentSessionId != null) localVarPathParams.Add("paymentSessionId", this.Configuration.ApiClient.ParameterToString(paymentSessionId)); // path parameter
            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentSessionsByPaymentSessionIdPaymentResultGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPaymentSessionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetPaymentSessionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPaymentSessionResult)));
        }

        /// <summary>
        /// Gets the payment result from its session id. 
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentSessionId">The payment session id.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of GetPaymentSessionResult</returns>
        public async System.Threading.Tasks.Task<GetPaymentSessionResult> V1PaymentSessionsByPaymentSessionIdPaymentResultGetAsync (Guid? paymentSessionId, string authToken)
        {
             ApiResponse<GetPaymentSessionResult> localVarResponse = await V1PaymentSessionsByPaymentSessionIdPaymentResultGetAsyncWithHttpInfo(paymentSessionId, authToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the payment result from its session id. 
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentSessionId">The payment session id.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of ApiResponse (GetPaymentSessionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPaymentSessionResult>> V1PaymentSessionsByPaymentSessionIdPaymentResultGetAsyncWithHttpInfo (Guid? paymentSessionId, string authToken)
        {
            // verify the required parameter 'paymentSessionId' is set
            if (paymentSessionId == null)
                throw new ApiException(400, "Missing required parameter 'paymentSessionId' when calling PaymentSessionApi->V1PaymentSessionsByPaymentSessionIdPaymentResultGet");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentSessionApi->V1PaymentSessionsByPaymentSessionIdPaymentResultGet");

            var localVarPath = "./v1/payment-sessions/{paymentSessionId}/paymentResult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentSessionId != null) localVarPathParams.Add("paymentSessionId", this.Configuration.ApiClient.ParameterToString(paymentSessionId)); // path parameter
            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentSessionsByPaymentSessionIdPaymentResultGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPaymentSessionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetPaymentSessionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPaymentSessionResult)));
        }

        /// <summary>
        /// Creates a payment session. Initializes a hosted form payment session with all the necessary data (order informations, customer informations, payment method...).  This API route can be used for classic hosted form. In that case, this operation is a alternative to the \&quot;client redirection POST\&quot; method (with HMAC).  It&#39;s also the standard way for initializing a payment session for \&quot;iframe integration\&quot;.            You will get an URL pointing to a paymentform, so the customer will be able to complete the payment form with his card details.  You will also get a PaymentSessionId. It will be useful for calling the GetPaymentResult API when the payment will complete.
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentSessionRequest">The payment session request. (optional)</param>
        /// <returns>PaymentSessionResponse</returns>
        public PaymentSessionResponse V1PaymentSessionsPost (string authToken, PaymentSessionRequest paymentSessionRequest = null)
        {
             ApiResponse<PaymentSessionResponse> localVarResponse = V1PaymentSessionsPostWithHttpInfo(authToken, paymentSessionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a payment session. Initializes a hosted form payment session with all the necessary data (order informations, customer informations, payment method...).  This API route can be used for classic hosted form. In that case, this operation is a alternative to the \&quot;client redirection POST\&quot; method (with HMAC).  It&#39;s also the standard way for initializing a payment session for \&quot;iframe integration\&quot;.            You will get an URL pointing to a paymentform, so the customer will be able to complete the payment form with his card details.  You will also get a PaymentSessionId. It will be useful for calling the GetPaymentResult API when the payment will complete.
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentSessionRequest">The payment session request. (optional)</param>
        /// <returns>ApiResponse of PaymentSessionResponse</returns>
        public ApiResponse< PaymentSessionResponse > V1PaymentSessionsPostWithHttpInfo (string authToken, PaymentSessionRequest paymentSessionRequest = null)
        {
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentSessionApi->V1PaymentSessionsPost");

            var localVarPath = "./v1/payment-sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (paymentSessionRequest != null && paymentSessionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentSessionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentSessionRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentSessionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentSessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaymentSessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentSessionResponse)));
        }

        /// <summary>
        /// Creates a payment session. Initializes a hosted form payment session with all the necessary data (order informations, customer informations, payment method...).  This API route can be used for classic hosted form. In that case, this operation is a alternative to the \&quot;client redirection POST\&quot; method (with HMAC).  It&#39;s also the standard way for initializing a payment session for \&quot;iframe integration\&quot;.            You will get an URL pointing to a paymentform, so the customer will be able to complete the payment form with his card details.  You will also get a PaymentSessionId. It will be useful for calling the GetPaymentResult API when the payment will complete.
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentSessionRequest">The payment session request. (optional)</param>
        /// <returns>Task of PaymentSessionResponse</returns>
        public async System.Threading.Tasks.Task<PaymentSessionResponse> V1PaymentSessionsPostAsync (string authToken, PaymentSessionRequest paymentSessionRequest = null)
        {
             ApiResponse<PaymentSessionResponse> localVarResponse = await V1PaymentSessionsPostAsyncWithHttpInfo(authToken, paymentSessionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a payment session. Initializes a hosted form payment session with all the necessary data (order informations, customer informations, payment method...).  This API route can be used for classic hosted form. In that case, this operation is a alternative to the \&quot;client redirection POST\&quot; method (with HMAC).  It&#39;s also the standard way for initializing a payment session for \&quot;iframe integration\&quot;.            You will get an URL pointing to a paymentform, so the customer will be able to complete the payment form with his card details.  You will also get a PaymentSessionId. It will be useful for calling the GetPaymentResult API when the payment will complete.
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentSessionRequest">The payment session request. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentSessionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentSessionResponse>> V1PaymentSessionsPostAsyncWithHttpInfo (string authToken, PaymentSessionRequest paymentSessionRequest = null)
        {
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentSessionApi->V1PaymentSessionsPost");

            var localVarPath = "./v1/payment-sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (paymentSessionRequest != null && paymentSessionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentSessionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentSessionRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentSessionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentSessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaymentSessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentSessionResponse)));
        }

    }
}
