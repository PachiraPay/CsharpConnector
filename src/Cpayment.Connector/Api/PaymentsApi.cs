/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Cpayment.Connector.Client;
using Cpayment.Connector.Model;

namespace Cpayment.Connector.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets all payment schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>PaymentOperationsResponse</returns>
        PaymentOperationsResponse V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet (string orderRef, int? merchantId, string merchantSiteId, string authToken);

        /// <summary>
        /// Gets all payment schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>ApiResponse of PaymentOperationsResponse</returns>
        ApiResponse<PaymentOperationsResponse> V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetWithHttpInfo (string orderRef, int? merchantId, string merchantSiteId, string authToken);
        /// <summary>
        /// Gets payment schedule by tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="orderTag">The order Tag</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>PaymentOperationsResponse</returns>
        PaymentOperationsResponse V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet (string orderRef, int? merchantId, string merchantSiteId, string orderTag, string authToken);

        /// <summary>
        /// Gets payment schedule by tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="orderTag">The order Tag</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>ApiResponse of PaymentOperationsResponse</returns>
        ApiResponse<PaymentOperationsResponse> V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetWithHttpInfo (string orderRef, int? merchantId, string merchantSiteId, string orderTag, string authToken);
        /// <summary>
        /// Gets payment schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>PaymentOperationsResponse</returns>
        PaymentOperationsResponse V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet (string orderRef, int? merchantId, string merchantSiteId, string authToken);

        /// <summary>
        /// Gets payment schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>ApiResponse of PaymentOperationsResponse</returns>
        ApiResponse<PaymentOperationsResponse> V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetWithHttpInfo (string orderRef, int? merchantId, string merchantSiteId, string authToken);
        /// <summary>
        /// Cancel or refund
        /// </summary>
        /// <remarks>
        /// This operation allows the merchant to cancel (also referred to as \&quot;void\&quot;) or refund a transaction, according to its current state.    You can find below the exhaustive list of cases which may happen.      With a Cancel operation, the customer will not see movement on his bank account, contrary to Refund which gives back the charged amount.    Cancel is only performed when:    1. The transaction is not yet captured (in which case, the fund reservation on the customer payment method is cleared)    2. The operation occurs on the same day as the capture operation.        If you want to cancel or refund less than the original transaction amount, you can specify the amount in the request body.   Alternatively you can specify an amount of 0 (or not specify the amount in the request) if you want to refund the total amount.    * Partial operation: 0 &amp;lt; amount &amp;lt; transaction amount    * Full operation: amount &#x3D;&#x3D; transaction amount OR amount &#x3D;&#x3D; 0      - --      ## Cancel Or Refund cases ##     **After the authorization, and before the capture**     Because the refund operation cannot be executed on a non-captured transaction, only the cancel operation is supported    | Partial Operation                                                               | Full Operation                                                                                                                                      |  | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |  | No interaction with partners because partial cancel/void is **not supported**. &lt;br /&gt; The only impact is an update of the remaining amount to capture in payment hub. | **Cancel** operation will be executed on the entire transaction. &lt;br /&gt; The fund reservation on the customer payment method will be cleared, and capture will no longer be possible.&lt;br /&gt; Cancelling a non captured transaction is **not worldwide supported**, and depends on the payment partner (PSP), the acquiring bank, and the issuing bank. |    **After the capture**     Because the balance is made at midnight, either the cancel operation or the refund operation will be selected depending on the date.       |                                          | Partial Operation                                                                                                             | Full Operation                                            |  | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |  | On the same day as the capture operation | The **cancel** operation will be executed. &lt;br /&gt; Partial cancelling of a captured transaction is supported, but doesn&#39;t behave the same depending on the payment partner used. &lt;br /&gt; In some cases, a **refund** will be executed instead. | The **cancel** operation will be executed. &lt;br /&gt; Full cancel of a captured transaction is **fully supported**. |  | D+1 and later                            | The **refund** operation will be executed. &lt;br /&gt; Partial refund is **fully supported**. | The **refund** operation will be executed. &lt;br /&gt; Full refund is **fully supported**. |
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>PaymentOperationsResponse</returns>
        PaymentOperationsResponse V1PaymentsByOrderRefOperationsCancelOrRefundPut (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null);

        /// <summary>
        /// Cancel or refund
        /// </summary>
        /// <remarks>
        /// This operation allows the merchant to cancel (also referred to as \&quot;void\&quot;) or refund a transaction, according to its current state.    You can find below the exhaustive list of cases which may happen.      With a Cancel operation, the customer will not see movement on his bank account, contrary to Refund which gives back the charged amount.    Cancel is only performed when:    1. The transaction is not yet captured (in which case, the fund reservation on the customer payment method is cleared)    2. The operation occurs on the same day as the capture operation.        If you want to cancel or refund less than the original transaction amount, you can specify the amount in the request body.   Alternatively you can specify an amount of 0 (or not specify the amount in the request) if you want to refund the total amount.    * Partial operation: 0 &amp;lt; amount &amp;lt; transaction amount    * Full operation: amount &#x3D;&#x3D; transaction amount OR amount &#x3D;&#x3D; 0      - --      ## Cancel Or Refund cases ##     **After the authorization, and before the capture**     Because the refund operation cannot be executed on a non-captured transaction, only the cancel operation is supported    | Partial Operation                                                               | Full Operation                                                                                                                                      |  | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |  | No interaction with partners because partial cancel/void is **not supported**. &lt;br /&gt; The only impact is an update of the remaining amount to capture in payment hub. | **Cancel** operation will be executed on the entire transaction. &lt;br /&gt; The fund reservation on the customer payment method will be cleared, and capture will no longer be possible.&lt;br /&gt; Cancelling a non captured transaction is **not worldwide supported**, and depends on the payment partner (PSP), the acquiring bank, and the issuing bank. |    **After the capture**     Because the balance is made at midnight, either the cancel operation or the refund operation will be selected depending on the date.       |                                          | Partial Operation                                                                                                             | Full Operation                                            |  | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |  | On the same day as the capture operation | The **cancel** operation will be executed. &lt;br /&gt; Partial cancelling of a captured transaction is supported, but doesn&#39;t behave the same depending on the payment partner used. &lt;br /&gt; In some cases, a **refund** will be executed instead. | The **cancel** operation will be executed. &lt;br /&gt; Full cancel of a captured transaction is **fully supported**. |  | D+1 and later                            | The **refund** operation will be executed. &lt;br /&gt; Partial refund is **fully supported**. | The **refund** operation will be executed. &lt;br /&gt; Full refund is **fully supported**. |
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>ApiResponse of PaymentOperationsResponse</returns>
        ApiResponse<PaymentOperationsResponse> V1PaymentsByOrderRefOperationsCancelOrRefundPutWithHttpInfo (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null);
        /// <summary>
        /// Capture
        /// </summary>
        /// <remarks>
        /// This operation charges the bank account of the customer, following a valid authorization done before. You need to provide a succeeded authorized OrderRef, and the amount you want to charge.  This is well suited for a \&quot;charge at shipping\&quot; scenario: the merchant makes an authorization when the customer place the order, and the bank account is charged when the merchant actually does the shipping.    - If you want to capture the total amount of the authorization, you can either set the amount to 0 in the request, or simply not specify it.    ### Useful reminders:    * You can capture the authorization multiple times, as long as there is some amount remaining. For instance, with an authorization of 100€, you can capture 20€ and then capture 80€ later, within the limited time.    * Please note that the authorization is only valid for a limited amount of time, and that you cannot capture a greater amount than the authorized one.
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>PaymentOperationsResponse</returns>
        PaymentOperationsResponse V1PaymentsByOrderRefOperationsCapturePut (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null);

        /// <summary>
        /// Capture
        /// </summary>
        /// <remarks>
        /// This operation charges the bank account of the customer, following a valid authorization done before. You need to provide a succeeded authorized OrderRef, and the amount you want to charge.  This is well suited for a \&quot;charge at shipping\&quot; scenario: the merchant makes an authorization when the customer place the order, and the bank account is charged when the merchant actually does the shipping.    - If you want to capture the total amount of the authorization, you can either set the amount to 0 in the request, or simply not specify it.    ### Useful reminders:    * You can capture the authorization multiple times, as long as there is some amount remaining. For instance, with an authorization of 100€, you can capture 20€ and then capture 80€ later, within the limited time.    * Please note that the authorization is only valid for a limited amount of time, and that you cannot capture a greater amount than the authorized one.
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>ApiResponse of PaymentOperationsResponse</returns>
        ApiResponse<PaymentOperationsResponse> V1PaymentsByOrderRefOperationsCapturePutWithHttpInfo (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null);
        /// <summary>
        /// Recompute schedule
        /// </summary>
        /// <remarks>
        /// This operation forces the recomputation of the payment schedule, using the default payment schedule rules.
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>PaymentOperationsResponse</returns>
        PaymentOperationsResponse V1PaymentsByOrderRefOperationsRecomputePut (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null);

        /// <summary>
        /// Recompute schedule
        /// </summary>
        /// <remarks>
        /// This operation forces the recomputation of the payment schedule, using the default payment schedule rules.
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>ApiResponse of PaymentOperationsResponse</returns>
        ApiResponse<PaymentOperationsResponse> V1PaymentsByOrderRefOperationsRecomputePutWithHttpInfo (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets all payment schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of PaymentOperationsResponse</returns>
        System.Threading.Tasks.Task<PaymentOperationsResponse> V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsync (string orderRef, int? merchantId, string merchantSiteId, string authToken);

        /// <summary>
        /// Gets all payment schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of ApiResponse (PaymentOperationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentOperationsResponse>> V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsyncWithHttpInfo (string orderRef, int? merchantId, string merchantSiteId, string authToken);
        /// <summary>
        /// Gets payment schedule by tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="orderTag">The order Tag</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of PaymentOperationsResponse</returns>
        System.Threading.Tasks.Task<PaymentOperationsResponse> V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetAsync (string orderRef, int? merchantId, string merchantSiteId, string orderTag, string authToken);

        /// <summary>
        /// Gets payment schedule by tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="orderTag">The order Tag</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of ApiResponse (PaymentOperationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentOperationsResponse>> V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetAsyncWithHttpInfo (string orderRef, int? merchantId, string merchantSiteId, string orderTag, string authToken);
        /// <summary>
        /// Gets payment schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of PaymentOperationsResponse</returns>
        System.Threading.Tasks.Task<PaymentOperationsResponse> V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsync (string orderRef, int? merchantId, string merchantSiteId, string authToken);

        /// <summary>
        /// Gets payment schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of ApiResponse (PaymentOperationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentOperationsResponse>> V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsyncWithHttpInfo (string orderRef, int? merchantId, string merchantSiteId, string authToken);
        /// <summary>
        /// Cancel or refund
        /// </summary>
        /// <remarks>
        /// This operation allows the merchant to cancel (also referred to as \&quot;void\&quot;) or refund a transaction, according to its current state.    You can find below the exhaustive list of cases which may happen.      With a Cancel operation, the customer will not see movement on his bank account, contrary to Refund which gives back the charged amount.    Cancel is only performed when:    1. The transaction is not yet captured (in which case, the fund reservation on the customer payment method is cleared)    2. The operation occurs on the same day as the capture operation.        If you want to cancel or refund less than the original transaction amount, you can specify the amount in the request body.   Alternatively you can specify an amount of 0 (or not specify the amount in the request) if you want to refund the total amount.    * Partial operation: 0 &amp;lt; amount &amp;lt; transaction amount    * Full operation: amount &#x3D;&#x3D; transaction amount OR amount &#x3D;&#x3D; 0      - --      ## Cancel Or Refund cases ##     **After the authorization, and before the capture**     Because the refund operation cannot be executed on a non-captured transaction, only the cancel operation is supported    | Partial Operation                                                               | Full Operation                                                                                                                                      |  | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |  | No interaction with partners because partial cancel/void is **not supported**. &lt;br /&gt; The only impact is an update of the remaining amount to capture in payment hub. | **Cancel** operation will be executed on the entire transaction. &lt;br /&gt; The fund reservation on the customer payment method will be cleared, and capture will no longer be possible.&lt;br /&gt; Cancelling a non captured transaction is **not worldwide supported**, and depends on the payment partner (PSP), the acquiring bank, and the issuing bank. |    **After the capture**     Because the balance is made at midnight, either the cancel operation or the refund operation will be selected depending on the date.       |                                          | Partial Operation                                                                                                             | Full Operation                                            |  | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |  | On the same day as the capture operation | The **cancel** operation will be executed. &lt;br /&gt; Partial cancelling of a captured transaction is supported, but doesn&#39;t behave the same depending on the payment partner used. &lt;br /&gt; In some cases, a **refund** will be executed instead. | The **cancel** operation will be executed. &lt;br /&gt; Full cancel of a captured transaction is **fully supported**. |  | D+1 and later                            | The **refund** operation will be executed. &lt;br /&gt; Partial refund is **fully supported**. | The **refund** operation will be executed. &lt;br /&gt; Full refund is **fully supported**. |
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>Task of PaymentOperationsResponse</returns>
        System.Threading.Tasks.Task<PaymentOperationsResponse> V1PaymentsByOrderRefOperationsCancelOrRefundPutAsync (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null);

        /// <summary>
        /// Cancel or refund
        /// </summary>
        /// <remarks>
        /// This operation allows the merchant to cancel (also referred to as \&quot;void\&quot;) or refund a transaction, according to its current state.    You can find below the exhaustive list of cases which may happen.      With a Cancel operation, the customer will not see movement on his bank account, contrary to Refund which gives back the charged amount.    Cancel is only performed when:    1. The transaction is not yet captured (in which case, the fund reservation on the customer payment method is cleared)    2. The operation occurs on the same day as the capture operation.        If you want to cancel or refund less than the original transaction amount, you can specify the amount in the request body.   Alternatively you can specify an amount of 0 (or not specify the amount in the request) if you want to refund the total amount.    * Partial operation: 0 &amp;lt; amount &amp;lt; transaction amount    * Full operation: amount &#x3D;&#x3D; transaction amount OR amount &#x3D;&#x3D; 0      - --      ## Cancel Or Refund cases ##     **After the authorization, and before the capture**     Because the refund operation cannot be executed on a non-captured transaction, only the cancel operation is supported    | Partial Operation                                                               | Full Operation                                                                                                                                      |  | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |  | No interaction with partners because partial cancel/void is **not supported**. &lt;br /&gt; The only impact is an update of the remaining amount to capture in payment hub. | **Cancel** operation will be executed on the entire transaction. &lt;br /&gt; The fund reservation on the customer payment method will be cleared, and capture will no longer be possible.&lt;br /&gt; Cancelling a non captured transaction is **not worldwide supported**, and depends on the payment partner (PSP), the acquiring bank, and the issuing bank. |    **After the capture**     Because the balance is made at midnight, either the cancel operation or the refund operation will be selected depending on the date.       |                                          | Partial Operation                                                                                                             | Full Operation                                            |  | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |  | On the same day as the capture operation | The **cancel** operation will be executed. &lt;br /&gt; Partial cancelling of a captured transaction is supported, but doesn&#39;t behave the same depending on the payment partner used. &lt;br /&gt; In some cases, a **refund** will be executed instead. | The **cancel** operation will be executed. &lt;br /&gt; Full cancel of a captured transaction is **fully supported**. |  | D+1 and later                            | The **refund** operation will be executed. &lt;br /&gt; Partial refund is **fully supported**. | The **refund** operation will be executed. &lt;br /&gt; Full refund is **fully supported**. |
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>Task of ApiResponse (PaymentOperationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentOperationsResponse>> V1PaymentsByOrderRefOperationsCancelOrRefundPutAsyncWithHttpInfo (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null);
        /// <summary>
        /// Capture
        /// </summary>
        /// <remarks>
        /// This operation charges the bank account of the customer, following a valid authorization done before. You need to provide a succeeded authorized OrderRef, and the amount you want to charge.  This is well suited for a \&quot;charge at shipping\&quot; scenario: the merchant makes an authorization when the customer place the order, and the bank account is charged when the merchant actually does the shipping.    - If you want to capture the total amount of the authorization, you can either set the amount to 0 in the request, or simply not specify it.    ### Useful reminders:    * You can capture the authorization multiple times, as long as there is some amount remaining. For instance, with an authorization of 100€, you can capture 20€ and then capture 80€ later, within the limited time.    * Please note that the authorization is only valid for a limited amount of time, and that you cannot capture a greater amount than the authorized one.
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>Task of PaymentOperationsResponse</returns>
        System.Threading.Tasks.Task<PaymentOperationsResponse> V1PaymentsByOrderRefOperationsCapturePutAsync (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null);

        /// <summary>
        /// Capture
        /// </summary>
        /// <remarks>
        /// This operation charges the bank account of the customer, following a valid authorization done before. You need to provide a succeeded authorized OrderRef, and the amount you want to charge.  This is well suited for a \&quot;charge at shipping\&quot; scenario: the merchant makes an authorization when the customer place the order, and the bank account is charged when the merchant actually does the shipping.    - If you want to capture the total amount of the authorization, you can either set the amount to 0 in the request, or simply not specify it.    ### Useful reminders:    * You can capture the authorization multiple times, as long as there is some amount remaining. For instance, with an authorization of 100€, you can capture 20€ and then capture 80€ later, within the limited time.    * Please note that the authorization is only valid for a limited amount of time, and that you cannot capture a greater amount than the authorized one.
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>Task of ApiResponse (PaymentOperationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentOperationsResponse>> V1PaymentsByOrderRefOperationsCapturePutAsyncWithHttpInfo (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null);
        /// <summary>
        /// Recompute schedule
        /// </summary>
        /// <remarks>
        /// This operation forces the recomputation of the payment schedule, using the default payment schedule rules.
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>Task of PaymentOperationsResponse</returns>
        System.Threading.Tasks.Task<PaymentOperationsResponse> V1PaymentsByOrderRefOperationsRecomputePutAsync (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null);

        /// <summary>
        /// Recompute schedule
        /// </summary>
        /// <remarks>
        /// This operation forces the recomputation of the payment schedule, using the default payment schedule rules.
        /// </remarks>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>Task of ApiResponse (PaymentOperationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentOperationsResponse>> V1PaymentsByOrderRefOperationsRecomputePutAsyncWithHttpInfo (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentsApi : IPaymentsApi
    {
        private Cpayment.Connector.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsApi(String basePath)
        {
            this.Configuration = new Cpayment.Connector.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cpayment.Connector.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PaymentsApi()
        {
            this.Configuration = Cpayment.Connector.Client.Configuration.Default;

            ExceptionFactory = Cpayment.Connector.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentsApi(Cpayment.Connector.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cpayment.Connector.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cpayment.Connector.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cpayment.Connector.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cpayment.Connector.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets all payment schedules 
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>PaymentOperationsResponse</returns>
        public PaymentOperationsResponse V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet (string orderRef, int? merchantId, string merchantSiteId, string authToken)
        {
             ApiResponse<PaymentOperationsResponse> localVarResponse = V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetWithHttpInfo(orderRef, merchantId, merchantSiteId, authToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all payment schedules 
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>ApiResponse of PaymentOperationsResponse</returns>
        public ApiResponse< PaymentOperationsResponse > V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetWithHttpInfo (string orderRef, int? merchantId, string merchantSiteId, string authToken)
        {
            // verify the required parameter 'orderRef' is set
            if (orderRef == null)
                throw new ApiException(400, "Missing required parameter 'orderRef' when calling PaymentsApi->V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling PaymentsApi->V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet");
            // verify the required parameter 'merchantSiteId' is set
            if (merchantSiteId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSiteId' when calling PaymentsApi->V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentsApi->V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet");

            var localVarPath = "./v1/payments/all/{orderRef}/merchants/{merchantId}/sites/{merchantSiteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderRef != null) localVarPathParams.Add("orderRef", this.Configuration.ApiClient.ParameterToString(orderRef)); // path parameter
            if (merchantId != null) localVarPathParams.Add("merchantId", this.Configuration.ApiClient.ParameterToString(merchantId)); // path parameter
            if (merchantSiteId != null) localVarPathParams.Add("merchantSiteId", this.Configuration.ApiClient.ParameterToString(merchantSiteId)); // path parameter
            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentOperationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaymentOperationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentOperationsResponse)));
        }

        /// <summary>
        /// Gets all payment schedules 
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of PaymentOperationsResponse</returns>
        public async System.Threading.Tasks.Task<PaymentOperationsResponse> V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsync (string orderRef, int? merchantId, string merchantSiteId, string authToken)
        {
             ApiResponse<PaymentOperationsResponse> localVarResponse = await V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsyncWithHttpInfo(orderRef, merchantId, merchantSiteId, authToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all payment schedules 
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of ApiResponse (PaymentOperationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentOperationsResponse>> V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsyncWithHttpInfo (string orderRef, int? merchantId, string merchantSiteId, string authToken)
        {
            // verify the required parameter 'orderRef' is set
            if (orderRef == null)
                throw new ApiException(400, "Missing required parameter 'orderRef' when calling PaymentsApi->V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling PaymentsApi->V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet");
            // verify the required parameter 'merchantSiteId' is set
            if (merchantSiteId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSiteId' when calling PaymentsApi->V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentsApi->V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet");

            var localVarPath = "./v1/payments/all/{orderRef}/merchants/{merchantId}/sites/{merchantSiteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderRef != null) localVarPathParams.Add("orderRef", this.Configuration.ApiClient.ParameterToString(orderRef)); // path parameter
            if (merchantId != null) localVarPathParams.Add("merchantId", this.Configuration.ApiClient.ParameterToString(merchantId)); // path parameter
            if (merchantSiteId != null) localVarPathParams.Add("merchantSiteId", this.Configuration.ApiClient.ParameterToString(merchantSiteId)); // path parameter
            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentOperationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaymentOperationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentOperationsResponse)));
        }

        /// <summary>
        /// Gets payment schedule by tag. 
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="orderTag">The order Tag</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>PaymentOperationsResponse</returns>
        public PaymentOperationsResponse V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet (string orderRef, int? merchantId, string merchantSiteId, string orderTag, string authToken)
        {
             ApiResponse<PaymentOperationsResponse> localVarResponse = V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetWithHttpInfo(orderRef, merchantId, merchantSiteId, orderTag, authToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets payment schedule by tag. 
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="orderTag">The order Tag</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>ApiResponse of PaymentOperationsResponse</returns>
        public ApiResponse< PaymentOperationsResponse > V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetWithHttpInfo (string orderRef, int? merchantId, string merchantSiteId, string orderTag, string authToken)
        {
            // verify the required parameter 'orderRef' is set
            if (orderRef == null)
                throw new ApiException(400, "Missing required parameter 'orderRef' when calling PaymentsApi->V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling PaymentsApi->V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet");
            // verify the required parameter 'merchantSiteId' is set
            if (merchantSiteId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSiteId' when calling PaymentsApi->V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet");
            // verify the required parameter 'orderTag' is set
            if (orderTag == null)
                throw new ApiException(400, "Missing required parameter 'orderTag' when calling PaymentsApi->V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentsApi->V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet");

            var localVarPath = "./v1/payments/{orderRef}/merchants/{merchantId}/sites/{merchantSiteId}/{orderTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderRef != null) localVarPathParams.Add("orderRef", this.Configuration.ApiClient.ParameterToString(orderRef)); // path parameter
            if (merchantId != null) localVarPathParams.Add("merchantId", this.Configuration.ApiClient.ParameterToString(merchantId)); // path parameter
            if (merchantSiteId != null) localVarPathParams.Add("merchantSiteId", this.Configuration.ApiClient.ParameterToString(merchantSiteId)); // path parameter
            if (orderTag != null) localVarPathParams.Add("orderTag", this.Configuration.ApiClient.ParameterToString(orderTag)); // path parameter
            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentOperationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaymentOperationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentOperationsResponse)));
        }

        /// <summary>
        /// Gets payment schedule by tag. 
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="orderTag">The order Tag</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of PaymentOperationsResponse</returns>
        public async System.Threading.Tasks.Task<PaymentOperationsResponse> V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetAsync (string orderRef, int? merchantId, string merchantSiteId, string orderTag, string authToken)
        {
             ApiResponse<PaymentOperationsResponse> localVarResponse = await V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetAsyncWithHttpInfo(orderRef, merchantId, merchantSiteId, orderTag, authToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets payment schedule by tag. 
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="orderTag">The order Tag</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of ApiResponse (PaymentOperationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentOperationsResponse>> V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGetAsyncWithHttpInfo (string orderRef, int? merchantId, string merchantSiteId, string orderTag, string authToken)
        {
            // verify the required parameter 'orderRef' is set
            if (orderRef == null)
                throw new ApiException(400, "Missing required parameter 'orderRef' when calling PaymentsApi->V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling PaymentsApi->V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet");
            // verify the required parameter 'merchantSiteId' is set
            if (merchantSiteId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSiteId' when calling PaymentsApi->V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet");
            // verify the required parameter 'orderTag' is set
            if (orderTag == null)
                throw new ApiException(400, "Missing required parameter 'orderTag' when calling PaymentsApi->V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentsApi->V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet");

            var localVarPath = "./v1/payments/{orderRef}/merchants/{merchantId}/sites/{merchantSiteId}/{orderTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderRef != null) localVarPathParams.Add("orderRef", this.Configuration.ApiClient.ParameterToString(orderRef)); // path parameter
            if (merchantId != null) localVarPathParams.Add("merchantId", this.Configuration.ApiClient.ParameterToString(merchantId)); // path parameter
            if (merchantSiteId != null) localVarPathParams.Add("merchantSiteId", this.Configuration.ApiClient.ParameterToString(merchantSiteId)); // path parameter
            if (orderTag != null) localVarPathParams.Add("orderTag", this.Configuration.ApiClient.ParameterToString(orderTag)); // path parameter
            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentOperationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaymentOperationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentOperationsResponse)));
        }

        /// <summary>
        /// Gets payment schedule 
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>PaymentOperationsResponse</returns>
        public PaymentOperationsResponse V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet (string orderRef, int? merchantId, string merchantSiteId, string authToken)
        {
             ApiResponse<PaymentOperationsResponse> localVarResponse = V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetWithHttpInfo(orderRef, merchantId, merchantSiteId, authToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets payment schedule 
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>ApiResponse of PaymentOperationsResponse</returns>
        public ApiResponse< PaymentOperationsResponse > V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetWithHttpInfo (string orderRef, int? merchantId, string merchantSiteId, string authToken)
        {
            // verify the required parameter 'orderRef' is set
            if (orderRef == null)
                throw new ApiException(400, "Missing required parameter 'orderRef' when calling PaymentsApi->V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling PaymentsApi->V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet");
            // verify the required parameter 'merchantSiteId' is set
            if (merchantSiteId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSiteId' when calling PaymentsApi->V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentsApi->V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet");

            var localVarPath = "./v1/payments/{orderRef}/merchants/{merchantId}/sites/{merchantSiteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderRef != null) localVarPathParams.Add("orderRef", this.Configuration.ApiClient.ParameterToString(orderRef)); // path parameter
            if (merchantId != null) localVarPathParams.Add("merchantId", this.Configuration.ApiClient.ParameterToString(merchantId)); // path parameter
            if (merchantSiteId != null) localVarPathParams.Add("merchantSiteId", this.Configuration.ApiClient.ParameterToString(merchantSiteId)); // path parameter
            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentOperationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaymentOperationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentOperationsResponse)));
        }

        /// <summary>
        /// Gets payment schedule 
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of PaymentOperationsResponse</returns>
        public async System.Threading.Tasks.Task<PaymentOperationsResponse> V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsync (string orderRef, int? merchantId, string merchantSiteId, string authToken)
        {
             ApiResponse<PaymentOperationsResponse> localVarResponse = await V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsyncWithHttpInfo(orderRef, merchantId, merchantSiteId, authToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets payment schedule 
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The order reference.</param>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of ApiResponse (PaymentOperationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentOperationsResponse>> V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGetAsyncWithHttpInfo (string orderRef, int? merchantId, string merchantSiteId, string authToken)
        {
            // verify the required parameter 'orderRef' is set
            if (orderRef == null)
                throw new ApiException(400, "Missing required parameter 'orderRef' when calling PaymentsApi->V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling PaymentsApi->V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet");
            // verify the required parameter 'merchantSiteId' is set
            if (merchantSiteId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSiteId' when calling PaymentsApi->V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentsApi->V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet");

            var localVarPath = "./v1/payments/{orderRef}/merchants/{merchantId}/sites/{merchantSiteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderRef != null) localVarPathParams.Add("orderRef", this.Configuration.ApiClient.ParameterToString(orderRef)); // path parameter
            if (merchantId != null) localVarPathParams.Add("merchantId", this.Configuration.ApiClient.ParameterToString(merchantId)); // path parameter
            if (merchantSiteId != null) localVarPathParams.Add("merchantSiteId", this.Configuration.ApiClient.ParameterToString(merchantSiteId)); // path parameter
            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentOperationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaymentOperationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentOperationsResponse)));
        }

        /// <summary>
        /// Cancel or refund This operation allows the merchant to cancel (also referred to as \&quot;void\&quot;) or refund a transaction, according to its current state.    You can find below the exhaustive list of cases which may happen.      With a Cancel operation, the customer will not see movement on his bank account, contrary to Refund which gives back the charged amount.    Cancel is only performed when:    1. The transaction is not yet captured (in which case, the fund reservation on the customer payment method is cleared)    2. The operation occurs on the same day as the capture operation.        If you want to cancel or refund less than the original transaction amount, you can specify the amount in the request body.   Alternatively you can specify an amount of 0 (or not specify the amount in the request) if you want to refund the total amount.    * Partial operation: 0 &amp;lt; amount &amp;lt; transaction amount    * Full operation: amount &#x3D;&#x3D; transaction amount OR amount &#x3D;&#x3D; 0      - --      ## Cancel Or Refund cases ##     **After the authorization, and before the capture**     Because the refund operation cannot be executed on a non-captured transaction, only the cancel operation is supported    | Partial Operation                                                               | Full Operation                                                                                                                                      |  | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |  | No interaction with partners because partial cancel/void is **not supported**. &lt;br /&gt; The only impact is an update of the remaining amount to capture in payment hub. | **Cancel** operation will be executed on the entire transaction. &lt;br /&gt; The fund reservation on the customer payment method will be cleared, and capture will no longer be possible.&lt;br /&gt; Cancelling a non captured transaction is **not worldwide supported**, and depends on the payment partner (PSP), the acquiring bank, and the issuing bank. |    **After the capture**     Because the balance is made at midnight, either the cancel operation or the refund operation will be selected depending on the date.       |                                          | Partial Operation                                                                                                             | Full Operation                                            |  | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |  | On the same day as the capture operation | The **cancel** operation will be executed. &lt;br /&gt; Partial cancelling of a captured transaction is supported, but doesn&#39;t behave the same depending on the payment partner used. &lt;br /&gt; In some cases, a **refund** will be executed instead. | The **cancel** operation will be executed. &lt;br /&gt; Full cancel of a captured transaction is **fully supported**. |  | D+1 and later                            | The **refund** operation will be executed. &lt;br /&gt; Partial refund is **fully supported**. | The **refund** operation will be executed. &lt;br /&gt; Full refund is **fully supported**. |
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>PaymentOperationsResponse</returns>
        public PaymentOperationsResponse V1PaymentsByOrderRefOperationsCancelOrRefundPut (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null)
        {
             ApiResponse<PaymentOperationsResponse> localVarResponse = V1PaymentsByOrderRefOperationsCancelOrRefundPutWithHttpInfo(orderRef, authToken, paymentOperationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel or refund This operation allows the merchant to cancel (also referred to as \&quot;void\&quot;) or refund a transaction, according to its current state.    You can find below the exhaustive list of cases which may happen.      With a Cancel operation, the customer will not see movement on his bank account, contrary to Refund which gives back the charged amount.    Cancel is only performed when:    1. The transaction is not yet captured (in which case, the fund reservation on the customer payment method is cleared)    2. The operation occurs on the same day as the capture operation.        If you want to cancel or refund less than the original transaction amount, you can specify the amount in the request body.   Alternatively you can specify an amount of 0 (or not specify the amount in the request) if you want to refund the total amount.    * Partial operation: 0 &amp;lt; amount &amp;lt; transaction amount    * Full operation: amount &#x3D;&#x3D; transaction amount OR amount &#x3D;&#x3D; 0      - --      ## Cancel Or Refund cases ##     **After the authorization, and before the capture**     Because the refund operation cannot be executed on a non-captured transaction, only the cancel operation is supported    | Partial Operation                                                               | Full Operation                                                                                                                                      |  | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |  | No interaction with partners because partial cancel/void is **not supported**. &lt;br /&gt; The only impact is an update of the remaining amount to capture in payment hub. | **Cancel** operation will be executed on the entire transaction. &lt;br /&gt; The fund reservation on the customer payment method will be cleared, and capture will no longer be possible.&lt;br /&gt; Cancelling a non captured transaction is **not worldwide supported**, and depends on the payment partner (PSP), the acquiring bank, and the issuing bank. |    **After the capture**     Because the balance is made at midnight, either the cancel operation or the refund operation will be selected depending on the date.       |                                          | Partial Operation                                                                                                             | Full Operation                                            |  | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |  | On the same day as the capture operation | The **cancel** operation will be executed. &lt;br /&gt; Partial cancelling of a captured transaction is supported, but doesn&#39;t behave the same depending on the payment partner used. &lt;br /&gt; In some cases, a **refund** will be executed instead. | The **cancel** operation will be executed. &lt;br /&gt; Full cancel of a captured transaction is **fully supported**. |  | D+1 and later                            | The **refund** operation will be executed. &lt;br /&gt; Partial refund is **fully supported**. | The **refund** operation will be executed. &lt;br /&gt; Full refund is **fully supported**. |
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>ApiResponse of PaymentOperationsResponse</returns>
        public ApiResponse< PaymentOperationsResponse > V1PaymentsByOrderRefOperationsCancelOrRefundPutWithHttpInfo (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null)
        {
            // verify the required parameter 'orderRef' is set
            if (orderRef == null)
                throw new ApiException(400, "Missing required parameter 'orderRef' when calling PaymentsApi->V1PaymentsByOrderRefOperationsCancelOrRefundPut");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentsApi->V1PaymentsByOrderRefOperationsCancelOrRefundPut");

            var localVarPath = "./v1/payments/{orderRef}/operations/cancelOrRefund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderRef != null) localVarPathParams.Add("orderRef", this.Configuration.ApiClient.ParameterToString(orderRef)); // path parameter
            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (paymentOperationRequest != null && paymentOperationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentOperationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentOperationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsByOrderRefOperationsCancelOrRefundPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentOperationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaymentOperationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentOperationsResponse)));
        }

        /// <summary>
        /// Cancel or refund This operation allows the merchant to cancel (also referred to as \&quot;void\&quot;) or refund a transaction, according to its current state.    You can find below the exhaustive list of cases which may happen.      With a Cancel operation, the customer will not see movement on his bank account, contrary to Refund which gives back the charged amount.    Cancel is only performed when:    1. The transaction is not yet captured (in which case, the fund reservation on the customer payment method is cleared)    2. The operation occurs on the same day as the capture operation.        If you want to cancel or refund less than the original transaction amount, you can specify the amount in the request body.   Alternatively you can specify an amount of 0 (or not specify the amount in the request) if you want to refund the total amount.    * Partial operation: 0 &amp;lt; amount &amp;lt; transaction amount    * Full operation: amount &#x3D;&#x3D; transaction amount OR amount &#x3D;&#x3D; 0      - --      ## Cancel Or Refund cases ##     **After the authorization, and before the capture**     Because the refund operation cannot be executed on a non-captured transaction, only the cancel operation is supported    | Partial Operation                                                               | Full Operation                                                                                                                                      |  | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |  | No interaction with partners because partial cancel/void is **not supported**. &lt;br /&gt; The only impact is an update of the remaining amount to capture in payment hub. | **Cancel** operation will be executed on the entire transaction. &lt;br /&gt; The fund reservation on the customer payment method will be cleared, and capture will no longer be possible.&lt;br /&gt; Cancelling a non captured transaction is **not worldwide supported**, and depends on the payment partner (PSP), the acquiring bank, and the issuing bank. |    **After the capture**     Because the balance is made at midnight, either the cancel operation or the refund operation will be selected depending on the date.       |                                          | Partial Operation                                                                                                             | Full Operation                                            |  | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |  | On the same day as the capture operation | The **cancel** operation will be executed. &lt;br /&gt; Partial cancelling of a captured transaction is supported, but doesn&#39;t behave the same depending on the payment partner used. &lt;br /&gt; In some cases, a **refund** will be executed instead. | The **cancel** operation will be executed. &lt;br /&gt; Full cancel of a captured transaction is **fully supported**. |  | D+1 and later                            | The **refund** operation will be executed. &lt;br /&gt; Partial refund is **fully supported**. | The **refund** operation will be executed. &lt;br /&gt; Full refund is **fully supported**. |
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>Task of PaymentOperationsResponse</returns>
        public async System.Threading.Tasks.Task<PaymentOperationsResponse> V1PaymentsByOrderRefOperationsCancelOrRefundPutAsync (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null)
        {
             ApiResponse<PaymentOperationsResponse> localVarResponse = await V1PaymentsByOrderRefOperationsCancelOrRefundPutAsyncWithHttpInfo(orderRef, authToken, paymentOperationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel or refund This operation allows the merchant to cancel (also referred to as \&quot;void\&quot;) or refund a transaction, according to its current state.    You can find below the exhaustive list of cases which may happen.      With a Cancel operation, the customer will not see movement on his bank account, contrary to Refund which gives back the charged amount.    Cancel is only performed when:    1. The transaction is not yet captured (in which case, the fund reservation on the customer payment method is cleared)    2. The operation occurs on the same day as the capture operation.        If you want to cancel or refund less than the original transaction amount, you can specify the amount in the request body.   Alternatively you can specify an amount of 0 (or not specify the amount in the request) if you want to refund the total amount.    * Partial operation: 0 &amp;lt; amount &amp;lt; transaction amount    * Full operation: amount &#x3D;&#x3D; transaction amount OR amount &#x3D;&#x3D; 0      - --      ## Cancel Or Refund cases ##     **After the authorization, and before the capture**     Because the refund operation cannot be executed on a non-captured transaction, only the cancel operation is supported    | Partial Operation                                                               | Full Operation                                                                                                                                      |  | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |  | No interaction with partners because partial cancel/void is **not supported**. &lt;br /&gt; The only impact is an update of the remaining amount to capture in payment hub. | **Cancel** operation will be executed on the entire transaction. &lt;br /&gt; The fund reservation on the customer payment method will be cleared, and capture will no longer be possible.&lt;br /&gt; Cancelling a non captured transaction is **not worldwide supported**, and depends on the payment partner (PSP), the acquiring bank, and the issuing bank. |    **After the capture**     Because the balance is made at midnight, either the cancel operation or the refund operation will be selected depending on the date.       |                                          | Partial Operation                                                                                                             | Full Operation                                            |  | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |  | On the same day as the capture operation | The **cancel** operation will be executed. &lt;br /&gt; Partial cancelling of a captured transaction is supported, but doesn&#39;t behave the same depending on the payment partner used. &lt;br /&gt; In some cases, a **refund** will be executed instead. | The **cancel** operation will be executed. &lt;br /&gt; Full cancel of a captured transaction is **fully supported**. |  | D+1 and later                            | The **refund** operation will be executed. &lt;br /&gt; Partial refund is **fully supported**. | The **refund** operation will be executed. &lt;br /&gt; Full refund is **fully supported**. |
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>Task of ApiResponse (PaymentOperationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentOperationsResponse>> V1PaymentsByOrderRefOperationsCancelOrRefundPutAsyncWithHttpInfo (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null)
        {
            // verify the required parameter 'orderRef' is set
            if (orderRef == null)
                throw new ApiException(400, "Missing required parameter 'orderRef' when calling PaymentsApi->V1PaymentsByOrderRefOperationsCancelOrRefundPut");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentsApi->V1PaymentsByOrderRefOperationsCancelOrRefundPut");

            var localVarPath = "./v1/payments/{orderRef}/operations/cancelOrRefund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderRef != null) localVarPathParams.Add("orderRef", this.Configuration.ApiClient.ParameterToString(orderRef)); // path parameter
            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (paymentOperationRequest != null && paymentOperationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentOperationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentOperationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsByOrderRefOperationsCancelOrRefundPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentOperationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaymentOperationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentOperationsResponse)));
        }

        /// <summary>
        /// Capture This operation charges the bank account of the customer, following a valid authorization done before. You need to provide a succeeded authorized OrderRef, and the amount you want to charge.  This is well suited for a \&quot;charge at shipping\&quot; scenario: the merchant makes an authorization when the customer place the order, and the bank account is charged when the merchant actually does the shipping.    - If you want to capture the total amount of the authorization, you can either set the amount to 0 in the request, or simply not specify it.    ### Useful reminders:    * You can capture the authorization multiple times, as long as there is some amount remaining. For instance, with an authorization of 100€, you can capture 20€ and then capture 80€ later, within the limited time.    * Please note that the authorization is only valid for a limited amount of time, and that you cannot capture a greater amount than the authorized one.
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>PaymentOperationsResponse</returns>
        public PaymentOperationsResponse V1PaymentsByOrderRefOperationsCapturePut (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null)
        {
             ApiResponse<PaymentOperationsResponse> localVarResponse = V1PaymentsByOrderRefOperationsCapturePutWithHttpInfo(orderRef, authToken, paymentOperationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Capture This operation charges the bank account of the customer, following a valid authorization done before. You need to provide a succeeded authorized OrderRef, and the amount you want to charge.  This is well suited for a \&quot;charge at shipping\&quot; scenario: the merchant makes an authorization when the customer place the order, and the bank account is charged when the merchant actually does the shipping.    - If you want to capture the total amount of the authorization, you can either set the amount to 0 in the request, or simply not specify it.    ### Useful reminders:    * You can capture the authorization multiple times, as long as there is some amount remaining. For instance, with an authorization of 100€, you can capture 20€ and then capture 80€ later, within the limited time.    * Please note that the authorization is only valid for a limited amount of time, and that you cannot capture a greater amount than the authorized one.
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>ApiResponse of PaymentOperationsResponse</returns>
        public ApiResponse< PaymentOperationsResponse > V1PaymentsByOrderRefOperationsCapturePutWithHttpInfo (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null)
        {
            // verify the required parameter 'orderRef' is set
            if (orderRef == null)
                throw new ApiException(400, "Missing required parameter 'orderRef' when calling PaymentsApi->V1PaymentsByOrderRefOperationsCapturePut");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentsApi->V1PaymentsByOrderRefOperationsCapturePut");

            var localVarPath = "./v1/payments/{orderRef}/operations/capture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderRef != null) localVarPathParams.Add("orderRef", this.Configuration.ApiClient.ParameterToString(orderRef)); // path parameter
            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (paymentOperationRequest != null && paymentOperationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentOperationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentOperationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsByOrderRefOperationsCapturePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentOperationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaymentOperationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentOperationsResponse)));
        }

        /// <summary>
        /// Capture This operation charges the bank account of the customer, following a valid authorization done before. You need to provide a succeeded authorized OrderRef, and the amount you want to charge.  This is well suited for a \&quot;charge at shipping\&quot; scenario: the merchant makes an authorization when the customer place the order, and the bank account is charged when the merchant actually does the shipping.    - If you want to capture the total amount of the authorization, you can either set the amount to 0 in the request, or simply not specify it.    ### Useful reminders:    * You can capture the authorization multiple times, as long as there is some amount remaining. For instance, with an authorization of 100€, you can capture 20€ and then capture 80€ later, within the limited time.    * Please note that the authorization is only valid for a limited amount of time, and that you cannot capture a greater amount than the authorized one.
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>Task of PaymentOperationsResponse</returns>
        public async System.Threading.Tasks.Task<PaymentOperationsResponse> V1PaymentsByOrderRefOperationsCapturePutAsync (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null)
        {
             ApiResponse<PaymentOperationsResponse> localVarResponse = await V1PaymentsByOrderRefOperationsCapturePutAsyncWithHttpInfo(orderRef, authToken, paymentOperationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Capture This operation charges the bank account of the customer, following a valid authorization done before. You need to provide a succeeded authorized OrderRef, and the amount you want to charge.  This is well suited for a \&quot;charge at shipping\&quot; scenario: the merchant makes an authorization when the customer place the order, and the bank account is charged when the merchant actually does the shipping.    - If you want to capture the total amount of the authorization, you can either set the amount to 0 in the request, or simply not specify it.    ### Useful reminders:    * You can capture the authorization multiple times, as long as there is some amount remaining. For instance, with an authorization of 100€, you can capture 20€ and then capture 80€ later, within the limited time.    * Please note that the authorization is only valid for a limited amount of time, and that you cannot capture a greater amount than the authorized one.
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>Task of ApiResponse (PaymentOperationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentOperationsResponse>> V1PaymentsByOrderRefOperationsCapturePutAsyncWithHttpInfo (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null)
        {
            // verify the required parameter 'orderRef' is set
            if (orderRef == null)
                throw new ApiException(400, "Missing required parameter 'orderRef' when calling PaymentsApi->V1PaymentsByOrderRefOperationsCapturePut");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentsApi->V1PaymentsByOrderRefOperationsCapturePut");

            var localVarPath = "./v1/payments/{orderRef}/operations/capture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderRef != null) localVarPathParams.Add("orderRef", this.Configuration.ApiClient.ParameterToString(orderRef)); // path parameter
            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (paymentOperationRequest != null && paymentOperationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentOperationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentOperationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsByOrderRefOperationsCapturePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentOperationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaymentOperationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentOperationsResponse)));
        }

        /// <summary>
        /// Recompute schedule This operation forces the recomputation of the payment schedule, using the default payment schedule rules.
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>PaymentOperationsResponse</returns>
        public PaymentOperationsResponse V1PaymentsByOrderRefOperationsRecomputePut (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null)
        {
             ApiResponse<PaymentOperationsResponse> localVarResponse = V1PaymentsByOrderRefOperationsRecomputePutWithHttpInfo(orderRef, authToken, paymentOperationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recompute schedule This operation forces the recomputation of the payment schedule, using the default payment schedule rules.
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>ApiResponse of PaymentOperationsResponse</returns>
        public ApiResponse< PaymentOperationsResponse > V1PaymentsByOrderRefOperationsRecomputePutWithHttpInfo (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null)
        {
            // verify the required parameter 'orderRef' is set
            if (orderRef == null)
                throw new ApiException(400, "Missing required parameter 'orderRef' when calling PaymentsApi->V1PaymentsByOrderRefOperationsRecomputePut");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentsApi->V1PaymentsByOrderRefOperationsRecomputePut");

            var localVarPath = "./v1/payments/{orderRef}/operations/recompute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderRef != null) localVarPathParams.Add("orderRef", this.Configuration.ApiClient.ParameterToString(orderRef)); // path parameter
            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (paymentOperationRequest != null && paymentOperationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentOperationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentOperationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsByOrderRefOperationsRecomputePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentOperationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaymentOperationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentOperationsResponse)));
        }

        /// <summary>
        /// Recompute schedule This operation forces the recomputation of the payment schedule, using the default payment schedule rules.
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>Task of PaymentOperationsResponse</returns>
        public async System.Threading.Tasks.Task<PaymentOperationsResponse> V1PaymentsByOrderRefOperationsRecomputePutAsync (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null)
        {
             ApiResponse<PaymentOperationsResponse> localVarResponse = await V1PaymentsByOrderRefOperationsRecomputePutAsyncWithHttpInfo(orderRef, authToken, paymentOperationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recompute schedule This operation forces the recomputation of the payment schedule, using the default payment schedule rules.
        /// </summary>
        /// <exception cref="Cpayment.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRef">The OrderRef.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOperationRequest">The payment operation request. Materialized by the Body of the PUT request (optional)</param>
        /// <returns>Task of ApiResponse (PaymentOperationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentOperationsResponse>> V1PaymentsByOrderRefOperationsRecomputePutAsyncWithHttpInfo (string orderRef, string authToken, PaymentOperationsRequest paymentOperationRequest = null)
        {
            // verify the required parameter 'orderRef' is set
            if (orderRef == null)
                throw new ApiException(400, "Missing required parameter 'orderRef' when calling PaymentsApi->V1PaymentsByOrderRefOperationsRecomputePut");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentsApi->V1PaymentsByOrderRefOperationsRecomputePut");

            var localVarPath = "./v1/payments/{orderRef}/operations/recompute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderRef != null) localVarPathParams.Add("orderRef", this.Configuration.ApiClient.ParameterToString(orderRef)); // path parameter
            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (paymentOperationRequest != null && paymentOperationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentOperationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentOperationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsByOrderRefOperationsRecomputePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentOperationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaymentOperationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentOperationsResponse)));
        }

    }
}
