/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Cpayment.Connector.Client.OpenAPIDateConverter;

namespace Cpayment.Connector.Model
{
    /// <summary>
    /// OrderData
    /// </summary>
    [DataContract]
    public partial class OrderData :  IEquatable<OrderData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderData" /> class.
        /// </summary>
        /// <param name="orderDiscountAmount">Gets or sets the order discount amount..</param>
        /// <param name="orderFeesAmount">&lt;para&gt;               Gets or sets the order fees amount.              &lt;/para&gt;.</param>
        /// <param name="orderRowsAmount">Gets or sets the order rows amount..</param>
        /// <param name="orderShippingAmount">Gets or sets the order shipping amount..</param>
        /// <param name="taxAmount">Gets or sets the tax amount..</param>
        /// <param name="freeText">Gets or sets the free text..</param>
        /// <param name="orders">Gets or sets the orders..</param>
        /// <param name="orderSummaryRef">Gets or sets the order summary reference..</param>
        /// <param name="shippingAddress">shippingAddress.</param>
        /// <param name="orderRef">The order reference linked to the schedule and transaction (required).</param>
        /// <param name="invoiceId">The invoice identifier.</param>
        /// <param name="orderTag">The order tag is a label for the schedule.</param>
        /// <param name="orderDate">Date of the order (required).</param>
        /// <param name="amount">The amount of the payment (required).</param>
        public OrderData(long? orderDiscountAmount = default(long?), long? orderFeesAmount = default(long?), long? orderRowsAmount = default(long?), long? orderShippingAmount = default(long?), long? taxAmount = default(long?), string freeText = default(string), List<SubOrder> orders = default(List<SubOrder>), string orderSummaryRef = default(string), ShippingAddress shippingAddress = default(ShippingAddress), string orderRef = default(string), long? invoiceId = default(long?), string orderTag = default(string), DateTime? orderDate = default(DateTime?), long? amount = default(long?))
        {
            // to ensure "orderRef" is required (not null)
            if (orderRef == null)
            {
                throw new InvalidDataException("orderRef is a required property for OrderData and cannot be null");
            }
            else
            {
                this.OrderRef = orderRef;
            }
            
            // to ensure "orderDate" is required (not null)
            if (orderDate == null)
            {
                throw new InvalidDataException("orderDate is a required property for OrderData and cannot be null");
            }
            else
            {
                this.OrderDate = orderDate;
            }
            
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for OrderData and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            
            this.OrderDiscountAmount = orderDiscountAmount;
            this.OrderFeesAmount = orderFeesAmount;
            this.OrderRowsAmount = orderRowsAmount;
            this.OrderShippingAmount = orderShippingAmount;
            this.TaxAmount = taxAmount;
            this.FreeText = freeText;
            this.Orders = orders;
            this.OrderSummaryRef = orderSummaryRef;
            this.ShippingAddress = shippingAddress;
            this.InvoiceId = invoiceId;
            this.OrderTag = orderTag;
        }
        
        /// <summary>
        /// Gets or sets the order discount amount.
        /// </summary>
        /// <value>Gets or sets the order discount amount.</value>
        [DataMember(Name="orderDiscountAmount", EmitDefaultValue=false)]
        public long? OrderDiscountAmount { get; set; }

        /// <summary>
        /// &lt;para&gt;               Gets or sets the order fees amount.              &lt;/para&gt;
        /// </summary>
        /// <value>&lt;para&gt;               Gets or sets the order fees amount.              &lt;/para&gt;</value>
        [DataMember(Name="orderFeesAmount", EmitDefaultValue=false)]
        public long? OrderFeesAmount { get; set; }

        /// <summary>
        /// Gets or sets the order rows amount.
        /// </summary>
        /// <value>Gets or sets the order rows amount.</value>
        [DataMember(Name="orderRowsAmount", EmitDefaultValue=false)]
        public long? OrderRowsAmount { get; set; }

        /// <summary>
        /// Gets or sets the order shipping amount.
        /// </summary>
        /// <value>Gets or sets the order shipping amount.</value>
        [DataMember(Name="orderShippingAmount", EmitDefaultValue=false)]
        public long? OrderShippingAmount { get; set; }

        /// <summary>
        /// Gets or sets the tax amount.
        /// </summary>
        /// <value>Gets or sets the tax amount.</value>
        [DataMember(Name="taxAmount", EmitDefaultValue=false)]
        public long? TaxAmount { get; set; }

        /// <summary>
        /// Gets or sets the free text.
        /// </summary>
        /// <value>Gets or sets the free text.</value>
        [DataMember(Name="freeText", EmitDefaultValue=false)]
        public string FreeText { get; set; }

        /// <summary>
        /// Gets or sets the orders.
        /// </summary>
        /// <value>Gets or sets the orders.</value>
        [DataMember(Name="orders", EmitDefaultValue=false)]
        public List<SubOrder> Orders { get; set; }

        /// <summary>
        /// Gets or sets the order summary reference.
        /// </summary>
        /// <value>Gets or sets the order summary reference.</value>
        [DataMember(Name="orderSummaryRef", EmitDefaultValue=false)]
        public string OrderSummaryRef { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name="shippingAddress", EmitDefaultValue=false)]
        public ShippingAddress ShippingAddress { get; set; }

        /// <summary>
        /// The order reference linked to the schedule and transaction
        /// </summary>
        /// <value>The order reference linked to the schedule and transaction</value>
        [DataMember(Name="orderRef", EmitDefaultValue=false)]
        public string OrderRef { get; set; }

        /// <summary>
        /// The invoice identifier
        /// </summary>
        /// <value>The invoice identifier</value>
        [DataMember(Name="invoiceId", EmitDefaultValue=false)]
        public long? InvoiceId { get; set; }

        /// <summary>
        /// The order tag is a label for the schedule
        /// </summary>
        /// <value>The order tag is a label for the schedule</value>
        [DataMember(Name="orderTag", EmitDefaultValue=false)]
        public string OrderTag { get; set; }

        /// <summary>
        /// Date of the order
        /// </summary>
        /// <value>Date of the order</value>
        [DataMember(Name="orderDate", EmitDefaultValue=false)]
        public DateTime? OrderDate { get; set; }

        /// <summary>
        /// The amount of the payment
        /// </summary>
        /// <value>The amount of the payment</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public long? Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderData {\n");
            sb.Append("  OrderDiscountAmount: ").Append(OrderDiscountAmount).Append("\n");
            sb.Append("  OrderFeesAmount: ").Append(OrderFeesAmount).Append("\n");
            sb.Append("  OrderRowsAmount: ").Append(OrderRowsAmount).Append("\n");
            sb.Append("  OrderShippingAmount: ").Append(OrderShippingAmount).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  FreeText: ").Append(FreeText).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  OrderSummaryRef: ").Append(OrderSummaryRef).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  OrderRef: ").Append(OrderRef).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  OrderTag: ").Append(OrderTag).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderData);
        }

        /// <summary>
        /// Returns true if OrderData instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderDiscountAmount == input.OrderDiscountAmount ||
                    (this.OrderDiscountAmount != null &&
                    this.OrderDiscountAmount.Equals(input.OrderDiscountAmount))
                ) && 
                (
                    this.OrderFeesAmount == input.OrderFeesAmount ||
                    (this.OrderFeesAmount != null &&
                    this.OrderFeesAmount.Equals(input.OrderFeesAmount))
                ) && 
                (
                    this.OrderRowsAmount == input.OrderRowsAmount ||
                    (this.OrderRowsAmount != null &&
                    this.OrderRowsAmount.Equals(input.OrderRowsAmount))
                ) && 
                (
                    this.OrderShippingAmount == input.OrderShippingAmount ||
                    (this.OrderShippingAmount != null &&
                    this.OrderShippingAmount.Equals(input.OrderShippingAmount))
                ) && 
                (
                    this.TaxAmount == input.TaxAmount ||
                    (this.TaxAmount != null &&
                    this.TaxAmount.Equals(input.TaxAmount))
                ) && 
                (
                    this.FreeText == input.FreeText ||
                    (this.FreeText != null &&
                    this.FreeText.Equals(input.FreeText))
                ) && 
                (
                    this.Orders == input.Orders ||
                    this.Orders != null &&
                    input.Orders != null &&
                    this.Orders.SequenceEqual(input.Orders)
                ) && 
                (
                    this.OrderSummaryRef == input.OrderSummaryRef ||
                    (this.OrderSummaryRef != null &&
                    this.OrderSummaryRef.Equals(input.OrderSummaryRef))
                ) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) && 
                (
                    this.OrderRef == input.OrderRef ||
                    (this.OrderRef != null &&
                    this.OrderRef.Equals(input.OrderRef))
                ) && 
                (
                    this.InvoiceId == input.InvoiceId ||
                    (this.InvoiceId != null &&
                    this.InvoiceId.Equals(input.InvoiceId))
                ) && 
                (
                    this.OrderTag == input.OrderTag ||
                    (this.OrderTag != null &&
                    this.OrderTag.Equals(input.OrderTag))
                ) && 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderDiscountAmount != null)
                    hashCode = hashCode * 59 + this.OrderDiscountAmount.GetHashCode();
                if (this.OrderFeesAmount != null)
                    hashCode = hashCode * 59 + this.OrderFeesAmount.GetHashCode();
                if (this.OrderRowsAmount != null)
                    hashCode = hashCode * 59 + this.OrderRowsAmount.GetHashCode();
                if (this.OrderShippingAmount != null)
                    hashCode = hashCode * 59 + this.OrderShippingAmount.GetHashCode();
                if (this.TaxAmount != null)
                    hashCode = hashCode * 59 + this.TaxAmount.GetHashCode();
                if (this.FreeText != null)
                    hashCode = hashCode * 59 + this.FreeText.GetHashCode();
                if (this.Orders != null)
                    hashCode = hashCode * 59 + this.Orders.GetHashCode();
                if (this.OrderSummaryRef != null)
                    hashCode = hashCode * 59 + this.OrderSummaryRef.GetHashCode();
                if (this.ShippingAddress != null)
                    hashCode = hashCode * 59 + this.ShippingAddress.GetHashCode();
                if (this.OrderRef != null)
                    hashCode = hashCode * 59 + this.OrderRef.GetHashCode();
                if (this.InvoiceId != null)
                    hashCode = hashCode * 59 + this.InvoiceId.GetHashCode();
                if (this.OrderTag != null)
                    hashCode = hashCode * 59 + this.OrderTag.GetHashCode();
                if (this.OrderDate != null)
                    hashCode = hashCode * 59 + this.OrderDate.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                return hashCode;
            }
        }
    }

}
