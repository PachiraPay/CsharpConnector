/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Cpayment.Connector.Client.OpenAPIDateConverter;

namespace Cpayment.Connector.Model
{
    /// <summary>
    /// Configuration
    /// </summary>
    [DataContract]
    public partial class Configuration :  IEquatable<Configuration>
    {
        /// <summary>
        /// Gets or sets the type of the form.
        /// </summary>
        /// <value>Gets or sets the type of the form.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormTypeEnum
        {
            /// <summary>
            /// Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")]
            Default = 1,

            /// <summary>
            /// Enum Iframe for value: iframe
            /// </summary>
            [EnumMember(Value = "iframe")]
            Iframe = 2,

            /// <summary>
            /// Enum Preview for value: preview
            /// </summary>
            [EnumMember(Value = "preview")]
            Preview = 3

        }

        /// <summary>
        /// Gets or sets the type of the form.
        /// </summary>
        /// <value>Gets or sets the type of the form.</value>
        [DataMember(Name="formType", EmitDefaultValue=false)]
        public FormTypeEnum? FormType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class.
        /// </summary>
        /// <param name="culture">Gets or sets the culture..</param>
        /// <param name="formType">Gets or sets the type of the form..</param>
        /// <param name="merchantBackUrl">Gets or sets the merchant back URL..</param>
        /// <param name="merchantHomeUrl">Gets or sets the merchant home URL..</param>
        /// <param name="merchantNotifyUrl">Gets or sets the merchant notify URL..</param>
        /// <param name="merchantReturnUrl">Gets or sets the merchant return URL..</param>
        /// <param name="paymentOptionRef">Gets or sets the payment option reference..</param>
        /// <param name="reportDelayInDays">Gets or sets the report delay in days..</param>
        /// <param name="userAgent">Gets or sets the user agent..</param>
        /// <param name="template">Gets or sets the url template..</param>
        /// <param name="authenticationOnly">If set to *true*, no authorization will be done. The process ends after the holder authentication..</param>
        public Configuration(string culture = default(string), FormTypeEnum? formType = default(FormTypeEnum?), string merchantBackUrl = default(string), string merchantHomeUrl = default(string), string merchantNotifyUrl = default(string), string merchantReturnUrl = default(string), string paymentOptionRef = default(string), int? reportDelayInDays = default(int?), string userAgent = default(string), string template = default(string), bool? authenticationOnly = default(bool?))
        {
            this.Culture = culture;
            this.FormType = formType;
            this.MerchantBackUrl = merchantBackUrl;
            this.MerchantHomeUrl = merchantHomeUrl;
            this.MerchantNotifyUrl = merchantNotifyUrl;
            this.MerchantReturnUrl = merchantReturnUrl;
            this.PaymentOptionRef = paymentOptionRef;
            this.ReportDelayInDays = reportDelayInDays;
            this.UserAgent = userAgent;
            this.Template = template;
            this.AuthenticationOnly = authenticationOnly;
        }
        
        /// <summary>
        /// Gets or sets the culture.
        /// </summary>
        /// <value>Gets or sets the culture.</value>
        [DataMember(Name="culture", EmitDefaultValue=false)]
        public string Culture { get; set; }


        /// <summary>
        /// Gets or sets the merchant back URL.
        /// </summary>
        /// <value>Gets or sets the merchant back URL.</value>
        [DataMember(Name="merchantBackUrl", EmitDefaultValue=false)]
        public string MerchantBackUrl { get; set; }

        /// <summary>
        /// Gets or sets the merchant home URL.
        /// </summary>
        /// <value>Gets or sets the merchant home URL.</value>
        [DataMember(Name="merchantHomeUrl", EmitDefaultValue=false)]
        public string MerchantHomeUrl { get; set; }

        /// <summary>
        /// Gets or sets the merchant notify URL.
        /// </summary>
        /// <value>Gets or sets the merchant notify URL.</value>
        [DataMember(Name="merchantNotifyUrl", EmitDefaultValue=false)]
        public string MerchantNotifyUrl { get; set; }

        /// <summary>
        /// Gets or sets the merchant return URL.
        /// </summary>
        /// <value>Gets or sets the merchant return URL.</value>
        [DataMember(Name="merchantReturnUrl", EmitDefaultValue=false)]
        public string MerchantReturnUrl { get; set; }

        /// <summary>
        /// Gets or sets the payment option reference.
        /// </summary>
        /// <value>Gets or sets the payment option reference.</value>
        [DataMember(Name="paymentOptionRef", EmitDefaultValue=false)]
        public string PaymentOptionRef { get; set; }

        /// <summary>
        /// Gets or sets the report delay in days.
        /// </summary>
        /// <value>Gets or sets the report delay in days.</value>
        [DataMember(Name="reportDelayInDays", EmitDefaultValue=false)]
        public int? ReportDelayInDays { get; set; }

        /// <summary>
        /// Gets or sets the user agent.
        /// </summary>
        /// <value>Gets or sets the user agent.</value>
        [DataMember(Name="userAgent", EmitDefaultValue=false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Gets or sets the url template.
        /// </summary>
        /// <value>Gets or sets the url template.</value>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public string Template { get; set; }

        /// <summary>
        /// If set to *true*, no authorization will be done. The process ends after the holder authentication.
        /// </summary>
        /// <value>If set to *true*, no authorization will be done. The process ends after the holder authentication.</value>
        [DataMember(Name="authenticationOnly", EmitDefaultValue=false)]
        public bool? AuthenticationOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Configuration {\n");
            sb.Append("  Culture: ").Append(Culture).Append("\n");
            sb.Append("  FormType: ").Append(FormType).Append("\n");
            sb.Append("  MerchantBackUrl: ").Append(MerchantBackUrl).Append("\n");
            sb.Append("  MerchantHomeUrl: ").Append(MerchantHomeUrl).Append("\n");
            sb.Append("  MerchantNotifyUrl: ").Append(MerchantNotifyUrl).Append("\n");
            sb.Append("  MerchantReturnUrl: ").Append(MerchantReturnUrl).Append("\n");
            sb.Append("  PaymentOptionRef: ").Append(PaymentOptionRef).Append("\n");
            sb.Append("  ReportDelayInDays: ").Append(ReportDelayInDays).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  AuthenticationOnly: ").Append(AuthenticationOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Configuration);
        }

        /// <summary>
        /// Returns true if Configuration instances are equal
        /// </summary>
        /// <param name="input">Instance of Configuration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Configuration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Culture == input.Culture ||
                    (this.Culture != null &&
                    this.Culture.Equals(input.Culture))
                ) && 
                (
                    this.FormType == input.FormType ||
                    (this.FormType != null &&
                    this.FormType.Equals(input.FormType))
                ) && 
                (
                    this.MerchantBackUrl == input.MerchantBackUrl ||
                    (this.MerchantBackUrl != null &&
                    this.MerchantBackUrl.Equals(input.MerchantBackUrl))
                ) && 
                (
                    this.MerchantHomeUrl == input.MerchantHomeUrl ||
                    (this.MerchantHomeUrl != null &&
                    this.MerchantHomeUrl.Equals(input.MerchantHomeUrl))
                ) && 
                (
                    this.MerchantNotifyUrl == input.MerchantNotifyUrl ||
                    (this.MerchantNotifyUrl != null &&
                    this.MerchantNotifyUrl.Equals(input.MerchantNotifyUrl))
                ) && 
                (
                    this.MerchantReturnUrl == input.MerchantReturnUrl ||
                    (this.MerchantReturnUrl != null &&
                    this.MerchantReturnUrl.Equals(input.MerchantReturnUrl))
                ) && 
                (
                    this.PaymentOptionRef == input.PaymentOptionRef ||
                    (this.PaymentOptionRef != null &&
                    this.PaymentOptionRef.Equals(input.PaymentOptionRef))
                ) && 
                (
                    this.ReportDelayInDays == input.ReportDelayInDays ||
                    (this.ReportDelayInDays != null &&
                    this.ReportDelayInDays.Equals(input.ReportDelayInDays))
                ) && 
                (
                    this.UserAgent == input.UserAgent ||
                    (this.UserAgent != null &&
                    this.UserAgent.Equals(input.UserAgent))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.AuthenticationOnly == input.AuthenticationOnly ||
                    (this.AuthenticationOnly != null &&
                    this.AuthenticationOnly.Equals(input.AuthenticationOnly))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Culture != null)
                    hashCode = hashCode * 59 + this.Culture.GetHashCode();
                if (this.FormType != null)
                    hashCode = hashCode * 59 + this.FormType.GetHashCode();
                if (this.MerchantBackUrl != null)
                    hashCode = hashCode * 59 + this.MerchantBackUrl.GetHashCode();
                if (this.MerchantHomeUrl != null)
                    hashCode = hashCode * 59 + this.MerchantHomeUrl.GetHashCode();
                if (this.MerchantNotifyUrl != null)
                    hashCode = hashCode * 59 + this.MerchantNotifyUrl.GetHashCode();
                if (this.MerchantReturnUrl != null)
                    hashCode = hashCode * 59 + this.MerchantReturnUrl.GetHashCode();
                if (this.PaymentOptionRef != null)
                    hashCode = hashCode * 59 + this.PaymentOptionRef.GetHashCode();
                if (this.ReportDelayInDays != null)
                    hashCode = hashCode * 59 + this.ReportDelayInDays.GetHashCode();
                if (this.UserAgent != null)
                    hashCode = hashCode * 59 + this.UserAgent.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.AuthenticationOnly != null)
                    hashCode = hashCode * 59 + this.AuthenticationOnly.GetHashCode();
                return hashCode;
            }
        }
    }

}
