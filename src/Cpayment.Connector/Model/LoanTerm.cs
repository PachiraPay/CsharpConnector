/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Cpayment.Connector.Client.OpenAPIDateConverter;

namespace Cpayment.Connector.Model
{
    /// <summary>
    /// All loan term data
    /// </summary>
    [DataContract]
    public partial class LoanTerm :  IEquatable<LoanTerm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanTerm" /> class.
        /// </summary>
        /// <param name="loanTermRef">The loan term reference.</param>
        /// <param name="minAmount">The minimum amount allowed.</param>
        /// <param name="maxAmount">The maximum amount allowed.</param>
        /// <param name="effectiveRate">The effective rate.</param>
        /// <param name="monthlyPayment">The monthly payment.</param>
        /// <param name="despositPercentage">The desposit percentage.</param>
        /// <param name="totalBillingCycles">The total billing cycles.</param>
        /// <param name="defaultTerm">Indicates if the loan term is the default or not.</param>
        /// <param name="startDate">The start date.</param>
        /// <param name="endDate">The end date.</param>
        public LoanTerm(string loanTermRef = default(string), long? minAmount = default(long?), long? maxAmount = default(long?), int? effectiveRate = default(int?), long? monthlyPayment = default(long?), int? despositPercentage = default(int?), int? totalBillingCycles = default(int?), bool? defaultTerm = default(bool?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            this.LoanTermRef = loanTermRef;
            this.MinAmount = minAmount;
            this.MaxAmount = maxAmount;
            this.EffectiveRate = effectiveRate;
            this.MonthlyPayment = monthlyPayment;
            this.DespositPercentage = despositPercentage;
            this.TotalBillingCycles = totalBillingCycles;
            this.DefaultTerm = defaultTerm;
            this.StartDate = startDate;
            this.EndDate = endDate;
        }
        
        /// <summary>
        /// The loan term reference
        /// </summary>
        /// <value>The loan term reference</value>
        [DataMember(Name="loanTermRef", EmitDefaultValue=false)]
        public string LoanTermRef { get; set; }

        /// <summary>
        /// The minimum amount allowed
        /// </summary>
        /// <value>The minimum amount allowed</value>
        [DataMember(Name="minAmount", EmitDefaultValue=false)]
        public long? MinAmount { get; set; }

        /// <summary>
        /// The maximum amount allowed
        /// </summary>
        /// <value>The maximum amount allowed</value>
        [DataMember(Name="maxAmount", EmitDefaultValue=false)]
        public long? MaxAmount { get; set; }

        /// <summary>
        /// The effective rate
        /// </summary>
        /// <value>The effective rate</value>
        [DataMember(Name="effectiveRate", EmitDefaultValue=false)]
        public int? EffectiveRate { get; set; }

        /// <summary>
        /// The monthly payment
        /// </summary>
        /// <value>The monthly payment</value>
        [DataMember(Name="monthlyPayment", EmitDefaultValue=false)]
        public long? MonthlyPayment { get; set; }

        /// <summary>
        /// The desposit percentage
        /// </summary>
        /// <value>The desposit percentage</value>
        [DataMember(Name="despositPercentage", EmitDefaultValue=false)]
        public int? DespositPercentage { get; set; }

        /// <summary>
        /// The total billing cycles
        /// </summary>
        /// <value>The total billing cycles</value>
        [DataMember(Name="totalBillingCycles", EmitDefaultValue=false)]
        public int? TotalBillingCycles { get; set; }

        /// <summary>
        /// Indicates if the loan term is the default or not
        /// </summary>
        /// <value>Indicates if the loan term is the default or not</value>
        [DataMember(Name="defaultTerm", EmitDefaultValue=false)]
        public bool? DefaultTerm { get; set; }

        /// <summary>
        /// The start date
        /// </summary>
        /// <value>The start date</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// The end date
        /// </summary>
        /// <value>The end date</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanTerm {\n");
            sb.Append("  LoanTermRef: ").Append(LoanTermRef).Append("\n");
            sb.Append("  MinAmount: ").Append(MinAmount).Append("\n");
            sb.Append("  MaxAmount: ").Append(MaxAmount).Append("\n");
            sb.Append("  EffectiveRate: ").Append(EffectiveRate).Append("\n");
            sb.Append("  MonthlyPayment: ").Append(MonthlyPayment).Append("\n");
            sb.Append("  DespositPercentage: ").Append(DespositPercentage).Append("\n");
            sb.Append("  TotalBillingCycles: ").Append(TotalBillingCycles).Append("\n");
            sb.Append("  DefaultTerm: ").Append(DefaultTerm).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanTerm);
        }

        /// <summary>
        /// Returns true if LoanTerm instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanTerm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanTerm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoanTermRef == input.LoanTermRef ||
                    (this.LoanTermRef != null &&
                    this.LoanTermRef.Equals(input.LoanTermRef))
                ) && 
                (
                    this.MinAmount == input.MinAmount ||
                    (this.MinAmount != null &&
                    this.MinAmount.Equals(input.MinAmount))
                ) && 
                (
                    this.MaxAmount == input.MaxAmount ||
                    (this.MaxAmount != null &&
                    this.MaxAmount.Equals(input.MaxAmount))
                ) && 
                (
                    this.EffectiveRate == input.EffectiveRate ||
                    (this.EffectiveRate != null &&
                    this.EffectiveRate.Equals(input.EffectiveRate))
                ) && 
                (
                    this.MonthlyPayment == input.MonthlyPayment ||
                    (this.MonthlyPayment != null &&
                    this.MonthlyPayment.Equals(input.MonthlyPayment))
                ) && 
                (
                    this.DespositPercentage == input.DespositPercentage ||
                    (this.DespositPercentage != null &&
                    this.DespositPercentage.Equals(input.DespositPercentage))
                ) && 
                (
                    this.TotalBillingCycles == input.TotalBillingCycles ||
                    (this.TotalBillingCycles != null &&
                    this.TotalBillingCycles.Equals(input.TotalBillingCycles))
                ) && 
                (
                    this.DefaultTerm == input.DefaultTerm ||
                    (this.DefaultTerm != null &&
                    this.DefaultTerm.Equals(input.DefaultTerm))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoanTermRef != null)
                    hashCode = hashCode * 59 + this.LoanTermRef.GetHashCode();
                if (this.MinAmount != null)
                    hashCode = hashCode * 59 + this.MinAmount.GetHashCode();
                if (this.MaxAmount != null)
                    hashCode = hashCode * 59 + this.MaxAmount.GetHashCode();
                if (this.EffectiveRate != null)
                    hashCode = hashCode * 59 + this.EffectiveRate.GetHashCode();
                if (this.MonthlyPayment != null)
                    hashCode = hashCode * 59 + this.MonthlyPayment.GetHashCode();
                if (this.DespositPercentage != null)
                    hashCode = hashCode * 59 + this.DespositPercentage.GetHashCode();
                if (this.TotalBillingCycles != null)
                    hashCode = hashCode * 59 + this.TotalBillingCycles.GetHashCode();
                if (this.DefaultTerm != null)
                    hashCode = hashCode * 59 + this.DefaultTerm.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                return hashCode;
            }
        }
    }

}
