/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Cpayment.Connector.Client.OpenAPIDateConverter;

namespace Cpayment.Connector.Model
{
    /// <summary>
    /// All payment operation data for the response
    /// </summary>
    [DataContract]
    public partial class GetPaymentSessionResult :  IEquatable<GetPaymentSessionResult>
    {
        /// <summary>
        /// The response code message of the service
        /// </summary>
        /// <value>The response code message of the service</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentResultCodeMessageEnum
        {
            /// <summary>
            /// Enum Undefined for value: undefined
            /// </summary>
            [EnumMember(Value = "undefined")]
            Undefined = 1,

            /// <summary>
            /// Enum Succeeded for value: succeeded
            /// </summary>
            [EnumMember(Value = "succeeded")]
            Succeeded = 2,

            /// <summary>
            /// Enum Refused for value: refused
            /// </summary>
            [EnumMember(Value = "refused")]
            Refused = 3,

            /// <summary>
            /// Enum RefusedByBank for value: refusedByBank
            /// </summary>
            [EnumMember(Value = "refusedByBank")]
            RefusedByBank = 4,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 5,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 6,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 7,

            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 8,

            /// <summary>
            /// Enum NotProcessed for value: notProcessed
            /// </summary>
            [EnumMember(Value = "notProcessed")]
            NotProcessed = 9

        }

        /// <summary>
        /// The response code message of the service
        /// </summary>
        /// <value>The response code message of the service</value>
        [DataMember(Name="paymentResultCodeMessage", EmitDefaultValue=false)]
        public PaymentResultCodeMessageEnum? PaymentResultCodeMessage { get; set; }
        /// <summary>
        /// The complementary response code message of the service
        /// </summary>
        /// <value>The complementary response code message of the service</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentResultComplementaryCodeMessageEnum
        {
            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum AmountLimitExceeded for value: amountLimitExceeded
            /// </summary>
            [EnumMember(Value = "amountLimitExceeded")]
            AmountLimitExceeded = 2,

            /// <summary>
            /// Enum LimitExceeded for value: limitExceeded
            /// </summary>
            [EnumMember(Value = "limitExceeded")]
            LimitExceeded = 3,

            /// <summary>
            /// Enum TechnicalProblem for value: technicalProblem
            /// </summary>
            [EnumMember(Value = "technicalProblem")]
            TechnicalProblem = 4,

            /// <summary>
            /// Enum Authorized for value: authorized
            /// </summary>
            [EnumMember(Value = "authorized")]
            Authorized = 5,

            /// <summary>
            /// Enum BankFraudSuspicion for value: bankFraudSuspicion
            /// </summary>
            [EnumMember(Value = "bankFraudSuspicion")]
            BankFraudSuspicion = 6,

            /// <summary>
            /// Enum CardExpired for value: cardExpired
            /// </summary>
            [EnumMember(Value = "cardExpired")]
            CardExpired = 7,

            /// <summary>
            /// Enum CardIssuerUnavailable for value: cardIssuerUnavailable
            /// </summary>
            [EnumMember(Value = "cardIssuerUnavailable")]
            CardIssuerUnavailable = 8,

            /// <summary>
            /// Enum CardholderNotAuthenticated for value: cardholderNotAuthenticated
            /// </summary>
            [EnumMember(Value = "cardholderNotAuthenticated")]
            CardholderNotAuthenticated = 9,

            /// <summary>
            /// Enum DateOfValidityExpired for value: dateOfValidityExpired
            /// </summary>
            [EnumMember(Value = "dateOfValidityExpired")]
            DateOfValidityExpired = 10,

            /// <summary>
            /// Enum DuplicateRequest for value: duplicateRequest
            /// </summary>
            [EnumMember(Value = "duplicateRequest")]
            DuplicateRequest = 11,

            /// <summary>
            /// Enum FormatError for value: formatError
            /// </summary>
            [EnumMember(Value = "formatError")]
            FormatError = 12,

            /// <summary>
            /// Enum FraudSuspicion for value: fraudSuspicion
            /// </summary>
            [EnumMember(Value = "fraudSuspicion")]
            FraudSuspicion = 13,

            /// <summary>
            /// Enum IllegalTransaction for value: illegalTransaction
            /// </summary>
            [EnumMember(Value = "illegalTransaction")]
            IllegalTransaction = 14,

            /// <summary>
            /// Enum InvalidAcceptor for value: invalidAcceptor
            /// </summary>
            [EnumMember(Value = "invalidAcceptor")]
            InvalidAcceptor = 15,

            /// <summary>
            /// Enum InvalidAccount for value: invalidAccount
            /// </summary>
            [EnumMember(Value = "invalidAccount")]
            InvalidAccount = 16,

            /// <summary>
            /// Enum InvalidCardIssuer for value: invalidCardIssuer
            /// </summary>
            [EnumMember(Value = "invalidCardIssuer")]
            InvalidCardIssuer = 17,

            /// <summary>
            /// Enum InvalidTransaction for value: invalidTransaction
            /// </summary>
            [EnumMember(Value = "invalidTransaction")]
            InvalidTransaction = 18,

            /// <summary>
            /// Enum LostCard for value: lostCard
            /// </summary>
            [EnumMember(Value = "lostCard")]
            LostCard = 19,

            /// <summary>
            /// Enum ReferenceNumberCannotBeFound for value: referenceNumberCannotBeFound
            /// </summary>
            [EnumMember(Value = "referenceNumberCannotBeFound")]
            ReferenceNumberCannotBeFound = 20,

            /// <summary>
            /// Enum Referred for value: referred
            /// </summary>
            [EnumMember(Value = "referred")]
            Referred = 21,

            /// <summary>
            /// Enum Refused for value: refused
            /// </summary>
            [EnumMember(Value = "refused")]
            Refused = 22,

            /// <summary>
            /// Enum RequestedFunctionNotSupported for value: requestedFunctionNotSupported
            /// </summary>
            [EnumMember(Value = "requestedFunctionNotSupported")]
            RequestedFunctionNotSupported = 23,

            /// <summary>
            /// Enum SecurityBreach for value: securityBreach
            /// </summary>
            [EnumMember(Value = "securityBreach")]
            SecurityBreach = 24,

            /// <summary>
            /// Enum SecurityRulesViolated for value: securityRulesViolated
            /// </summary>
            [EnumMember(Value = "securityRulesViolated")]
            SecurityRulesViolated = 25,

            /// <summary>
            /// Enum ServerUnavailableNetworkRoutingAskedAgain for value: serverUnavailableNetworkRoutingAskedAgain
            /// </summary>
            [EnumMember(Value = "serverUnavailableNetworkRoutingAskedAgain")]
            ServerUnavailableNetworkRoutingAskedAgain = 26,

            /// <summary>
            /// Enum StolenCard for value: stolenCard
            /// </summary>
            [EnumMember(Value = "stolenCard")]
            StolenCard = 27,

            /// <summary>
            /// Enum SystemUnavailable for value: systemUnavailable
            /// </summary>
            [EnumMember(Value = "systemUnavailable")]
            SystemUnavailable = 28,

            /// <summary>
            /// Enum TemporaryBankServerUnavailability for value: temporaryBankServerUnavailability
            /// </summary>
            [EnumMember(Value = "temporaryBankServerUnavailability")]
            TemporaryBankServerUnavailability = 29,

            /// <summary>
            /// Enum TemporaryOfficeServerUnavailability for value: temporaryOfficeServerUnavailability
            /// </summary>
            [EnumMember(Value = "temporaryOfficeServerUnavailability")]
            TemporaryOfficeServerUnavailability = 30,

            /// <summary>
            /// Enum TransactionNotPermitted for value: transactionNotPermitted
            /// </summary>
            [EnumMember(Value = "transactionNotPermitted")]
            TransactionNotPermitted = 31,

            /// <summary>
            /// Enum TransactionTimedOut for value: transactionTimedOut
            /// </summary>
            [EnumMember(Value = "transactionTimedOut")]
            TransactionTimedOut = 32,

            /// <summary>
            /// Enum UnknownAcquirerAccountCode for value: unknownAcquirerAccountCode
            /// </summary>
            [EnumMember(Value = "unknownAcquirerAccountCode")]
            UnknownAcquirerAccountCode = 33,

            /// <summary>
            /// Enum UnknownCard for value: unknownCard
            /// </summary>
            [EnumMember(Value = "unknownCard")]
            UnknownCard = 34,

            /// <summary>
            /// Enum UpdateOfFileImpossible for value: updateOfFileImpossible
            /// </summary>
            [EnumMember(Value = "updateOfFileImpossible")]
            UpdateOfFileImpossible = 35,

            /// <summary>
            /// Enum TransactionArchived for value: transactionArchived
            /// </summary>
            [EnumMember(Value = "transactionArchived")]
            TransactionArchived = 36,

            /// <summary>
            /// Enum RefusedByScoring for value: refusedByScoring
            /// </summary>
            [EnumMember(Value = "refusedByScoring")]
            RefusedByScoring = 37,

            /// <summary>
            /// Enum PaymentInformationFillingAttemptLimitExceeded for value: paymentInformationFillingAttemptLimitExceeded
            /// </summary>
            [EnumMember(Value = "paymentInformationFillingAttemptLimitExceeded")]
            PaymentInformationFillingAttemptLimitExceeded = 38,

            /// <summary>
            /// Enum RefusedByScoring2 for value: refusedByScoring2
            /// </summary>
            [EnumMember(Value = "refusedByScoring2")]
            RefusedByScoring2 = 39,

            /// <summary>
            /// Enum NotAvailable for value: notAvailable
            /// </summary>
            [EnumMember(Value = "notAvailable")]
            NotAvailable = 40

        }

        /// <summary>
        /// The complementary response code message of the service
        /// </summary>
        /// <value>The complementary response code message of the service</value>
        [DataMember(Name="paymentResultComplementaryCodeMessage", EmitDefaultValue=false)]
        public PaymentResultComplementaryCodeMessageEnum? PaymentResultComplementaryCodeMessage { get; set; }
        /// <summary>
        /// The authentication status
        /// </summary>
        /// <value>The authentication status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthenticationStatusEnum
        {
            /// <summary>
            /// Enum Undefined for value: undefined
            /// </summary>
            [EnumMember(Value = "undefined")]
            Undefined = 1,

            /// <summary>
            /// Enum Authenticated for value: authenticated
            /// </summary>
            [EnumMember(Value = "authenticated")]
            Authenticated = 2,

            /// <summary>
            /// Enum NotAuthenticated for value: notAuthenticated
            /// </summary>
            [EnumMember(Value = "notAuthenticated")]
            NotAuthenticated = 3

        }

        /// <summary>
        /// The authentication status
        /// </summary>
        /// <value>The authentication status</value>
        [DataMember(Name="authenticationStatus", EmitDefaultValue=false)]
        public AuthenticationStatusEnum? AuthenticationStatus { get; set; }
        /// <summary>
        /// The liability shift status
        /// </summary>
        /// <value>The liability shift status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LiabilityShiftStatusEnum
        {
            /// <summary>
            /// Enum Undefined for value: undefined
            /// </summary>
            [EnumMember(Value = "undefined")]
            Undefined = 1,

            /// <summary>
            /// Enum Shift for value: shift
            /// </summary>
            [EnumMember(Value = "shift")]
            Shift = 2,

            /// <summary>
            /// Enum NoShift for value: noShift
            /// </summary>
            [EnumMember(Value = "noShift")]
            NoShift = 3

        }

        /// <summary>
        /// The liability shift status
        /// </summary>
        /// <value>The liability shift status</value>
        [DataMember(Name="liabilityShiftStatus", EmitDefaultValue=false)]
        public LiabilityShiftStatusEnum? LiabilityShiftStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetPaymentSessionResult" /> class.
        /// </summary>
        /// <param name="orderRef">The orderRef.</param>
        /// <param name="paymentResultCode">The response code of the service.</param>
        /// <param name="paymentResultCodeMessage">The response code message of the service.</param>
        /// <param name="paymentResultComplementaryCode">The complementary response code of the service.</param>
        /// <param name="paymentResultComplementaryCodeMessage">The complementary response code message of the service.</param>
        /// <param name="storedPaymentMethodId">Stored Payment Method Id.</param>
        /// <param name="storedPaymentMethodLabel">Stored Payment Label.</param>
        /// <param name="authenticationStatus">The authentication status.</param>
        /// <param name="liabilityShiftStatus">The liability shift status.</param>
        /// <param name="authenticationData">All authentication data, as a dictionary of multiple key/value pairs..</param>
        /// <param name="responseMessage">The global response message.</param>
        public GetPaymentSessionResult(string orderRef = default(string), int? paymentResultCode = default(int?), PaymentResultCodeMessageEnum? paymentResultCodeMessage = default(PaymentResultCodeMessageEnum?), int? paymentResultComplementaryCode = default(int?), PaymentResultComplementaryCodeMessageEnum? paymentResultComplementaryCodeMessage = default(PaymentResultComplementaryCodeMessageEnum?), string storedPaymentMethodId = default(string), string storedPaymentMethodLabel = default(string), AuthenticationStatusEnum? authenticationStatus = default(AuthenticationStatusEnum?), LiabilityShiftStatusEnum? liabilityShiftStatus = default(LiabilityShiftStatusEnum?), Dictionary<string, string> authenticationData = default(Dictionary<string, string>), string responseMessage = default(string))
        {
            this.OrderRef = orderRef;
            this.PaymentResultCode = paymentResultCode;
            this.PaymentResultCodeMessage = paymentResultCodeMessage;
            this.PaymentResultComplementaryCode = paymentResultComplementaryCode;
            this.PaymentResultComplementaryCodeMessage = paymentResultComplementaryCodeMessage;
            this.StoredPaymentMethodId = storedPaymentMethodId;
            this.StoredPaymentMethodLabel = storedPaymentMethodLabel;
            this.AuthenticationStatus = authenticationStatus;
            this.LiabilityShiftStatus = liabilityShiftStatus;
            this.AuthenticationData = authenticationData;
            this.ResponseMessage = responseMessage;
        }
        
        /// <summary>
        /// The orderRef
        /// </summary>
        /// <value>The orderRef</value>
        [DataMember(Name="orderRef", EmitDefaultValue=false)]
        public string OrderRef { get; set; }

        /// <summary>
        /// The response code of the service
        /// </summary>
        /// <value>The response code of the service</value>
        [DataMember(Name="paymentResultCode", EmitDefaultValue=false)]
        public int? PaymentResultCode { get; set; }


        /// <summary>
        /// The complementary response code of the service
        /// </summary>
        /// <value>The complementary response code of the service</value>
        [DataMember(Name="paymentResultComplementaryCode", EmitDefaultValue=false)]
        public int? PaymentResultComplementaryCode { get; set; }


        /// <summary>
        /// Stored Payment Method Id
        /// </summary>
        /// <value>Stored Payment Method Id</value>
        [DataMember(Name="storedPaymentMethodId", EmitDefaultValue=false)]
        public string StoredPaymentMethodId { get; set; }

        /// <summary>
        /// Stored Payment Label
        /// </summary>
        /// <value>Stored Payment Label</value>
        [DataMember(Name="storedPaymentMethodLabel", EmitDefaultValue=false)]
        public string StoredPaymentMethodLabel { get; set; }



        /// <summary>
        /// All authentication data, as a dictionary of multiple key/value pairs.
        /// </summary>
        /// <value>All authentication data, as a dictionary of multiple key/value pairs.</value>
        [DataMember(Name="authenticationData", EmitDefaultValue=false)]
        public Dictionary<string, string> AuthenticationData { get; set; }

        /// <summary>
        /// The global response message
        /// </summary>
        /// <value>The global response message</value>
        [DataMember(Name="responseMessage", EmitDefaultValue=false)]
        public string ResponseMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetPaymentSessionResult {\n");
            sb.Append("  OrderRef: ").Append(OrderRef).Append("\n");
            sb.Append("  PaymentResultCode: ").Append(PaymentResultCode).Append("\n");
            sb.Append("  PaymentResultCodeMessage: ").Append(PaymentResultCodeMessage).Append("\n");
            sb.Append("  PaymentResultComplementaryCode: ").Append(PaymentResultComplementaryCode).Append("\n");
            sb.Append("  PaymentResultComplementaryCodeMessage: ").Append(PaymentResultComplementaryCodeMessage).Append("\n");
            sb.Append("  StoredPaymentMethodId: ").Append(StoredPaymentMethodId).Append("\n");
            sb.Append("  StoredPaymentMethodLabel: ").Append(StoredPaymentMethodLabel).Append("\n");
            sb.Append("  AuthenticationStatus: ").Append(AuthenticationStatus).Append("\n");
            sb.Append("  LiabilityShiftStatus: ").Append(LiabilityShiftStatus).Append("\n");
            sb.Append("  AuthenticationData: ").Append(AuthenticationData).Append("\n");
            sb.Append("  ResponseMessage: ").Append(ResponseMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetPaymentSessionResult);
        }

        /// <summary>
        /// Returns true if GetPaymentSessionResult instances are equal
        /// </summary>
        /// <param name="input">Instance of GetPaymentSessionResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetPaymentSessionResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderRef == input.OrderRef ||
                    (this.OrderRef != null &&
                    this.OrderRef.Equals(input.OrderRef))
                ) && 
                (
                    this.PaymentResultCode == input.PaymentResultCode ||
                    (this.PaymentResultCode != null &&
                    this.PaymentResultCode.Equals(input.PaymentResultCode))
                ) && 
                (
                    this.PaymentResultCodeMessage == input.PaymentResultCodeMessage ||
                    (this.PaymentResultCodeMessage != null &&
                    this.PaymentResultCodeMessage.Equals(input.PaymentResultCodeMessage))
                ) && 
                (
                    this.PaymentResultComplementaryCode == input.PaymentResultComplementaryCode ||
                    (this.PaymentResultComplementaryCode != null &&
                    this.PaymentResultComplementaryCode.Equals(input.PaymentResultComplementaryCode))
                ) && 
                (
                    this.PaymentResultComplementaryCodeMessage == input.PaymentResultComplementaryCodeMessage ||
                    (this.PaymentResultComplementaryCodeMessage != null &&
                    this.PaymentResultComplementaryCodeMessage.Equals(input.PaymentResultComplementaryCodeMessage))
                ) && 
                (
                    this.StoredPaymentMethodId == input.StoredPaymentMethodId ||
                    (this.StoredPaymentMethodId != null &&
                    this.StoredPaymentMethodId.Equals(input.StoredPaymentMethodId))
                ) && 
                (
                    this.StoredPaymentMethodLabel == input.StoredPaymentMethodLabel ||
                    (this.StoredPaymentMethodLabel != null &&
                    this.StoredPaymentMethodLabel.Equals(input.StoredPaymentMethodLabel))
                ) && 
                (
                    this.AuthenticationStatus == input.AuthenticationStatus ||
                    (this.AuthenticationStatus != null &&
                    this.AuthenticationStatus.Equals(input.AuthenticationStatus))
                ) && 
                (
                    this.LiabilityShiftStatus == input.LiabilityShiftStatus ||
                    (this.LiabilityShiftStatus != null &&
                    this.LiabilityShiftStatus.Equals(input.LiabilityShiftStatus))
                ) && 
                (
                    this.AuthenticationData == input.AuthenticationData ||
                    this.AuthenticationData != null &&
                    input.AuthenticationData != null &&
                    this.AuthenticationData.SequenceEqual(input.AuthenticationData)
                ) && 
                (
                    this.ResponseMessage == input.ResponseMessage ||
                    (this.ResponseMessage != null &&
                    this.ResponseMessage.Equals(input.ResponseMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderRef != null)
                    hashCode = hashCode * 59 + this.OrderRef.GetHashCode();
                if (this.PaymentResultCode != null)
                    hashCode = hashCode * 59 + this.PaymentResultCode.GetHashCode();
                if (this.PaymentResultCodeMessage != null)
                    hashCode = hashCode * 59 + this.PaymentResultCodeMessage.GetHashCode();
                if (this.PaymentResultComplementaryCode != null)
                    hashCode = hashCode * 59 + this.PaymentResultComplementaryCode.GetHashCode();
                if (this.PaymentResultComplementaryCodeMessage != null)
                    hashCode = hashCode * 59 + this.PaymentResultComplementaryCodeMessage.GetHashCode();
                if (this.StoredPaymentMethodId != null)
                    hashCode = hashCode * 59 + this.StoredPaymentMethodId.GetHashCode();
                if (this.StoredPaymentMethodLabel != null)
                    hashCode = hashCode * 59 + this.StoredPaymentMethodLabel.GetHashCode();
                if (this.AuthenticationStatus != null)
                    hashCode = hashCode * 59 + this.AuthenticationStatus.GetHashCode();
                if (this.LiabilityShiftStatus != null)
                    hashCode = hashCode * 59 + this.LiabilityShiftStatus.GetHashCode();
                if (this.AuthenticationData != null)
                    hashCode = hashCode * 59 + this.AuthenticationData.GetHashCode();
                if (this.ResponseMessage != null)
                    hashCode = hashCode * 59 + this.ResponseMessage.GetHashCode();
                return hashCode;
            }
        }
    }

}
