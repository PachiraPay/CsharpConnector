/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Cpayment.Connector.Client.OpenAPIDateConverter;

namespace Cpayment.Connector.Model
{
    /// <summary>
    /// All payment card data
    /// </summary>
    [DataContract]
    public partial class PaymentCard :  IEquatable<PaymentCard>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentCard" /> class.
        /// </summary>
        /// <param name="paymentCardRef">The payment card reference.</param>
        /// <param name="name">The payment card name.</param>
        /// <param name="paymentCardOptions">All payment card options data.</param>
        public PaymentCard(string paymentCardRef = default(string), string name = default(string), List<PaymentCardOption> paymentCardOptions = default(List<PaymentCardOption>))
        {
            this.PaymentCardRef = paymentCardRef;
            this.Name = name;
            this.PaymentCardOptions = paymentCardOptions;
        }
        
        /// <summary>
        /// The payment card reference
        /// </summary>
        /// <value>The payment card reference</value>
        [DataMember(Name="paymentCardRef", EmitDefaultValue=false)]
        public string PaymentCardRef { get; set; }

        /// <summary>
        /// The payment card name
        /// </summary>
        /// <value>The payment card name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// All payment card options data
        /// </summary>
        /// <value>All payment card options data</value>
        [DataMember(Name="paymentCardOptions", EmitDefaultValue=false)]
        public List<PaymentCardOption> PaymentCardOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentCard {\n");
            sb.Append("  PaymentCardRef: ").Append(PaymentCardRef).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PaymentCardOptions: ").Append(PaymentCardOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentCard);
        }

        /// <summary>
        /// Returns true if PaymentCard instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentCard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PaymentCardRef == input.PaymentCardRef ||
                    (this.PaymentCardRef != null &&
                    this.PaymentCardRef.Equals(input.PaymentCardRef))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PaymentCardOptions == input.PaymentCardOptions ||
                    this.PaymentCardOptions != null &&
                    input.PaymentCardOptions != null &&
                    this.PaymentCardOptions.SequenceEqual(input.PaymentCardOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentCardRef != null)
                    hashCode = hashCode * 59 + this.PaymentCardRef.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PaymentCardOptions != null)
                    hashCode = hashCode * 59 + this.PaymentCardOptions.GetHashCode();
                return hashCode;
            }
        }
    }

}
