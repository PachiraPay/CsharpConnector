/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Cpayment.Connector.Client.OpenAPIDateConverter;

namespace Cpayment.Connector.Model
{
    /// <summary>
    /// ShippingAddress
    /// </summary>
    [DataContract]
    public partial class ShippingAddress :  IEquatable<ShippingAddress>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingAddress" /> class.
        /// </summary>
        /// <param name="city">Gets or sets the city field..</param>
        /// <param name="line1">Gets or sets the line1 field..</param>
        /// <param name="line2">Gets or sets the line2 field..</param>
        /// <param name="name">Gets or sets the name field..</param>
        /// <param name="placeCalled">Gets or sets the place called field..</param>
        /// <param name="zipCode">Gets or sets the zip code field..</param>
        public ShippingAddress(string city = default(string), string line1 = default(string), string line2 = default(string), string name = default(string), string placeCalled = default(string), string zipCode = default(string))
        {
            this.City = city;
            this.Line1 = line1;
            this.Line2 = line2;
            this.Name = name;
            this.PlaceCalled = placeCalled;
            this.ZipCode = zipCode;
        }
        
        /// <summary>
        /// Gets or sets the city field.
        /// </summary>
        /// <value>Gets or sets the city field.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or sets the line1 field.
        /// </summary>
        /// <value>Gets or sets the line1 field.</value>
        [DataMember(Name="line1", EmitDefaultValue=false)]
        public string Line1 { get; set; }

        /// <summary>
        /// Gets or sets the line2 field.
        /// </summary>
        /// <value>Gets or sets the line2 field.</value>
        [DataMember(Name="line2", EmitDefaultValue=false)]
        public string Line2 { get; set; }

        /// <summary>
        /// Gets or sets the name field.
        /// </summary>
        /// <value>Gets or sets the name field.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the place called field.
        /// </summary>
        /// <value>Gets or sets the place called field.</value>
        [DataMember(Name="placeCalled", EmitDefaultValue=false)]
        public string PlaceCalled { get; set; }

        /// <summary>
        /// Gets or sets the zip code field.
        /// </summary>
        /// <value>Gets or sets the zip code field.</value>
        [DataMember(Name="zipCode", EmitDefaultValue=false)]
        public string ZipCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShippingAddress {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Line1: ").Append(Line1).Append("\n");
            sb.Append("  Line2: ").Append(Line2).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PlaceCalled: ").Append(PlaceCalled).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShippingAddress);
        }

        /// <summary>
        /// Returns true if ShippingAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of ShippingAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingAddress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Line1 == input.Line1 ||
                    (this.Line1 != null &&
                    this.Line1.Equals(input.Line1))
                ) && 
                (
                    this.Line2 == input.Line2 ||
                    (this.Line2 != null &&
                    this.Line2.Equals(input.Line2))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PlaceCalled == input.PlaceCalled ||
                    (this.PlaceCalled != null &&
                    this.PlaceCalled.Equals(input.PlaceCalled))
                ) && 
                (
                    this.ZipCode == input.ZipCode ||
                    (this.ZipCode != null &&
                    this.ZipCode.Equals(input.ZipCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Line1 != null)
                    hashCode = hashCode * 59 + this.Line1.GetHashCode();
                if (this.Line2 != null)
                    hashCode = hashCode * 59 + this.Line2.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PlaceCalled != null)
                    hashCode = hashCode * 59 + this.PlaceCalled.GetHashCode();
                if (this.ZipCode != null)
                    hashCode = hashCode * 59 + this.ZipCode.GetHashCode();
                return hashCode;
            }
        }
    }

}
