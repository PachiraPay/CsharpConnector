/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Cpayment.Connector.Client.OpenAPIDateConverter;

namespace Cpayment.Connector.Model
{
    /// <summary>
    /// All loan offer data
    /// </summary>
    [DataContract]
    public partial class LoanOffer :  IEquatable<LoanOffer>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanOffer" /> class.
        /// </summary>
        /// <param name="loanRef">The loan offer reference.</param>
        /// <param name="loanTerms">All loan terms data.</param>
        public LoanOffer(string loanRef = default(string), List<LoanTerm> loanTerms = default(List<LoanTerm>))
        {
            this.LoanRef = loanRef;
            this.LoanTerms = loanTerms;
        }
        
        /// <summary>
        /// The loan offer reference
        /// </summary>
        /// <value>The loan offer reference</value>
        [DataMember(Name="loanRef", EmitDefaultValue=false)]
        public string LoanRef { get; set; }

        /// <summary>
        /// All loan terms data
        /// </summary>
        /// <value>All loan terms data</value>
        [DataMember(Name="loanTerms", EmitDefaultValue=false)]
        public List<LoanTerm> LoanTerms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanOffer {\n");
            sb.Append("  LoanRef: ").Append(LoanRef).Append("\n");
            sb.Append("  LoanTerms: ").Append(LoanTerms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanOffer);
        }

        /// <summary>
        /// Returns true if LoanOffer instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanOffer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanOffer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoanRef == input.LoanRef ||
                    (this.LoanRef != null &&
                    this.LoanRef.Equals(input.LoanRef))
                ) && 
                (
                    this.LoanTerms == input.LoanTerms ||
                    this.LoanTerms != null &&
                    input.LoanTerms != null &&
                    this.LoanTerms.SequenceEqual(input.LoanTerms)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoanRef != null)
                    hashCode = hashCode * 59 + this.LoanRef.GetHashCode();
                if (this.LoanTerms != null)
                    hashCode = hashCode * 59 + this.LoanTerms.GetHashCode();
                return hashCode;
            }
        }
    }

}
