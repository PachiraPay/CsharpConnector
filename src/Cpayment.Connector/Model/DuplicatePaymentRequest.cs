/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Cpayment.Connector.Client.OpenAPIDateConverter;

namespace Cpayment.Connector.Model
{
    /// <summary>
    /// The AuthorByCopy Payment Request
    /// </summary>
    [DataContract]
    public partial class DuplicatePaymentRequest :  IEquatable<DuplicatePaymentRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DuplicatePaymentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DuplicatePaymentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DuplicatePaymentRequest" /> class.
        /// </summary>
        /// <param name="context">context (required).</param>
        /// <param name="options">options.</param>
        /// <param name="order">order (required).</param>
        /// <param name="copyReference">copyReference (required).</param>
        /// <param name="validationMode">validationMode.</param>
        /// <param name="notificationUrl">Url for the notification of the payment.</param>
        public DuplicatePaymentRequest(CardPaymentContextData context = default(CardPaymentContextData), Options options = default(Options), Order order = default(Order), CopyReference copyReference = default(CopyReference), ValidationModeOverride validationMode = default(ValidationModeOverride), string notificationUrl = default(string))
        {
            // to ensure "context" is required (not null)
            if (context == null)
            {
                throw new InvalidDataException("context is a required property for DuplicatePaymentRequest and cannot be null");
            }
            else
            {
                this.Context = context;
            }
            
            // to ensure "order" is required (not null)
            if (order == null)
            {
                throw new InvalidDataException("order is a required property for DuplicatePaymentRequest and cannot be null");
            }
            else
            {
                this.Order = order;
            }
            
            // to ensure "copyReference" is required (not null)
            if (copyReference == null)
            {
                throw new InvalidDataException("copyReference is a required property for DuplicatePaymentRequest and cannot be null");
            }
            else
            {
                this.CopyReference = copyReference;
            }
            
            this.Options = options;
            this.ValidationMode = validationMode;
            this.NotificationUrl = notificationUrl;
        }
        
        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="context", EmitDefaultValue=false)]
        public CardPaymentContextData Context { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public Options Options { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public Order Order { get; set; }

        /// <summary>
        /// Gets or Sets CopyReference
        /// </summary>
        [DataMember(Name="copyReference", EmitDefaultValue=false)]
        public CopyReference CopyReference { get; set; }

        /// <summary>
        /// Gets or Sets ValidationMode
        /// </summary>
        [DataMember(Name="validationMode", EmitDefaultValue=false)]
        public ValidationModeOverride ValidationMode { get; set; }

        /// <summary>
        /// Url for the notification of the payment
        /// </summary>
        /// <value>Url for the notification of the payment</value>
        [DataMember(Name="notificationUrl", EmitDefaultValue=false)]
        public string NotificationUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DuplicatePaymentRequest {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  CopyReference: ").Append(CopyReference).Append("\n");
            sb.Append("  ValidationMode: ").Append(ValidationMode).Append("\n");
            sb.Append("  NotificationUrl: ").Append(NotificationUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DuplicatePaymentRequest);
        }

        /// <summary>
        /// Returns true if DuplicatePaymentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DuplicatePaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DuplicatePaymentRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.CopyReference == input.CopyReference ||
                    (this.CopyReference != null &&
                    this.CopyReference.Equals(input.CopyReference))
                ) && 
                (
                    this.ValidationMode == input.ValidationMode ||
                    (this.ValidationMode != null &&
                    this.ValidationMode.Equals(input.ValidationMode))
                ) && 
                (
                    this.NotificationUrl == input.NotificationUrl ||
                    (this.NotificationUrl != null &&
                    this.NotificationUrl.Equals(input.NotificationUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.CopyReference != null)
                    hashCode = hashCode * 59 + this.CopyReference.GetHashCode();
                if (this.ValidationMode != null)
                    hashCode = hashCode * 59 + this.ValidationMode.GetHashCode();
                if (this.NotificationUrl != null)
                    hashCode = hashCode * 59 + this.NotificationUrl.GetHashCode();
                return hashCode;
            }
        }
    }

}
