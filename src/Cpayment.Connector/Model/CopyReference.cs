/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Cpayment.Connector.Client.OpenAPIDateConverter;

namespace Cpayment.Connector.Model
{
    /// <summary>
    /// The Copy Data (mandatory for author by copy)
    /// </summary>
    [DataContract]
    public partial class CopyReference :  IEquatable<CopyReference>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CopyReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CopyReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CopyReference" /> class.
        /// </summary>
        /// <param name="fromOrderRef">The order reference to use for the copy (required).</param>
        /// <param name="fromOrderTag">The order label to use for the copy.</param>
        public CopyReference(string fromOrderRef = default(string), string fromOrderTag = default(string))
        {
            // to ensure "fromOrderRef" is required (not null)
            if (fromOrderRef == null)
            {
                throw new InvalidDataException("fromOrderRef is a required property for CopyReference and cannot be null");
            }
            else
            {
                this.FromOrderRef = fromOrderRef;
            }
            
            this.FromOrderTag = fromOrderTag;
        }
        
        /// <summary>
        /// The order reference to use for the copy
        /// </summary>
        /// <value>The order reference to use for the copy</value>
        [DataMember(Name="fromOrderRef", EmitDefaultValue=false)]
        public string FromOrderRef { get; set; }

        /// <summary>
        /// The order label to use for the copy
        /// </summary>
        /// <value>The order label to use for the copy</value>
        [DataMember(Name="fromOrderTag", EmitDefaultValue=false)]
        public string FromOrderTag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CopyReference {\n");
            sb.Append("  FromOrderRef: ").Append(FromOrderRef).Append("\n");
            sb.Append("  FromOrderTag: ").Append(FromOrderTag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CopyReference);
        }

        /// <summary>
        /// Returns true if CopyReference instances are equal
        /// </summary>
        /// <param name="input">Instance of CopyReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CopyReference input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FromOrderRef == input.FromOrderRef ||
                    (this.FromOrderRef != null &&
                    this.FromOrderRef.Equals(input.FromOrderRef))
                ) && 
                (
                    this.FromOrderTag == input.FromOrderTag ||
                    (this.FromOrderTag != null &&
                    this.FromOrderTag.Equals(input.FromOrderTag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FromOrderRef != null)
                    hashCode = hashCode * 59 + this.FromOrderRef.GetHashCode();
                if (this.FromOrderTag != null)
                    hashCode = hashCode * 59 + this.FromOrderTag.GetHashCode();
                return hashCode;
            }
        }
    }

}
