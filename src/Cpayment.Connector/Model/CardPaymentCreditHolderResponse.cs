/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Cpayment.Connector.Client.OpenAPIDateConverter;

namespace Cpayment.Connector.Model
{
    /// <summary>
    /// Response object for CardPaymentCreditHolder
    /// </summary>
    [DataContract]
    public partial class CardPaymentCreditHolderResponse :  IEquatable<CardPaymentCreditHolderResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardPaymentCreditHolderResponse" /> class.
        /// </summary>
        /// <param name="responseCode">The response code of the service.</param>
        /// <param name="merchantAccountRef">The MerchantAccountRef used for the credit.</param>
        /// <param name="responseMessage">The global response message.</param>
        public CardPaymentCreditHolderResponse(string responseCode = default(string), string merchantAccountRef = default(string), string responseMessage = default(string))
        {
            this.ResponseCode = responseCode;
            this.MerchantAccountRef = merchantAccountRef;
            this.ResponseMessage = responseMessage;
        }
        
        /// <summary>
        /// The response code of the service
        /// </summary>
        /// <value>The response code of the service</value>
        [DataMember(Name="responseCode", EmitDefaultValue=false)]
        public string ResponseCode { get; set; }

        /// <summary>
        /// The MerchantAccountRef used for the credit
        /// </summary>
        /// <value>The MerchantAccountRef used for the credit</value>
        [DataMember(Name="merchantAccountRef", EmitDefaultValue=false)]
        public string MerchantAccountRef { get; set; }

        /// <summary>
        /// The global response message
        /// </summary>
        /// <value>The global response message</value>
        [DataMember(Name="responseMessage", EmitDefaultValue=false)]
        public string ResponseMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardPaymentCreditHolderResponse {\n");
            sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            sb.Append("  MerchantAccountRef: ").Append(MerchantAccountRef).Append("\n");
            sb.Append("  ResponseMessage: ").Append(ResponseMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardPaymentCreditHolderResponse);
        }

        /// <summary>
        /// Returns true if CardPaymentCreditHolderResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CardPaymentCreditHolderResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardPaymentCreditHolderResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResponseCode == input.ResponseCode ||
                    (this.ResponseCode != null &&
                    this.ResponseCode.Equals(input.ResponseCode))
                ) && 
                (
                    this.MerchantAccountRef == input.MerchantAccountRef ||
                    (this.MerchantAccountRef != null &&
                    this.MerchantAccountRef.Equals(input.MerchantAccountRef))
                ) && 
                (
                    this.ResponseMessage == input.ResponseMessage ||
                    (this.ResponseMessage != null &&
                    this.ResponseMessage.Equals(input.ResponseMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResponseCode != null)
                    hashCode = hashCode * 59 + this.ResponseCode.GetHashCode();
                if (this.MerchantAccountRef != null)
                    hashCode = hashCode * 59 + this.MerchantAccountRef.GetHashCode();
                if (this.ResponseMessage != null)
                    hashCode = hashCode * 59 + this.ResponseMessage.GetHashCode();
                return hashCode;
            }
        }
    }

}
