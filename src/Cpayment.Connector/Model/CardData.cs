/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Cpayment.Connector.Client.OpenAPIDateConverter;

namespace Cpayment.Connector.Model
{
    /// <summary>
    /// All card Data
    /// </summary>
    [DataContract]
    public partial class CardData :  IEquatable<CardData>
    {
        /// <summary>
        /// The card type
        /// </summary>
        /// <value>The card type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CardSchemeEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Cb for value: cb
            /// </summary>
            [EnumMember(Value = "cb")]
            Cb = 2,

            /// <summary>
            /// Enum Visa for value: visa
            /// </summary>
            [EnumMember(Value = "visa")]
            Visa = 3,

            /// <summary>
            /// Enum MasterCard for value: masterCard
            /// </summary>
            [EnumMember(Value = "masterCard")]
            MasterCard = 4,

            /// <summary>
            /// Enum Cdiscount for value: cdiscount
            /// </summary>
            [EnumMember(Value = "cdiscount")]
            Cdiscount = 5,

            /// <summary>
            /// Enum Casino for value: casino
            /// </summary>
            [EnumMember(Value = "casino")]
            Casino = 6,

            /// <summary>
            /// Enum Cofinoga for value: cofinoga
            /// </summary>
            [EnumMember(Value = "cofinoga")]
            Cofinoga = 7,

            /// <summary>
            /// Enum Amex for value: amex
            /// </summary>
            [EnumMember(Value = "amex")]
            Amex = 8,

            /// <summary>
            /// Enum Finaref for value: finaref
            /// </summary>
            [EnumMember(Value = "finaref")]
            Finaref = 9,

            /// <summary>
            /// Enum Aurore for value: aurore
            /// </summary>
            [EnumMember(Value = "aurore")]
            Aurore = 10,

            /// <summary>
            /// Enum CdiscountCup for value: cdiscount_Cup
            /// </summary>
            [EnumMember(Value = "cdiscount_Cup")]
            CdiscountCup = 11,

            /// <summary>
            /// Enum Diners for value: diners
            /// </summary>
            [EnumMember(Value = "diners")]
            Diners = 12,

            /// <summary>
            /// Enum Exito for value: exito
            /// </summary>
            [EnumMember(Value = "exito")]
            Exito = 13,

            /// <summary>
            /// Enum ExitoFranquicia for value: exitoFranquicia
            /// </summary>
            [EnumMember(Value = "exitoFranquicia")]
            ExitoFranquicia = 14,

            /// <summary>
            /// Enum PayPal for value: payPal
            /// </summary>
            [EnumMember(Value = "payPal")]
            PayPal = 15,

            /// <summary>
            /// Enum BanContact for value: banContact
            /// </summary>
            [EnumMember(Value = "banContact")]
            BanContact = 16,

            /// <summary>
            /// Enum Pse for value: pse
            /// </summary>
            [EnumMember(Value = "pse")]
            Pse = 17,

            /// <summary>
            /// Enum Paylib for value: paylib
            /// </summary>
            [EnumMember(Value = "paylib")]
            Paylib = 18

        }

        /// <summary>
        /// The card type
        /// </summary>
        /// <value>The card type</value>
        [DataMember(Name="cardScheme", EmitDefaultValue=false)]
        public CardSchemeEnum CardScheme { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CardData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardData" /> class.
        /// </summary>
        /// <param name="cardOptionId">The card option identifier.</param>
        /// <param name="cardScheme">The card type (required).</param>
        /// <param name="expirationDate">The card&#39;s expiration date.</param>
        /// <param name="cardNumber">The card number (required).</param>
        /// <param name="securityNumber">The Security number (CVV).</param>
        /// <param name="cardLabel">The name of the card owner.</param>
        public CardData(int? cardOptionId = default(int?), CardSchemeEnum cardScheme = default(CardSchemeEnum), DateTime? expirationDate = default(DateTime?), string cardNumber = default(string), string securityNumber = default(string), string cardLabel = default(string))
        {
            // to ensure "cardScheme" is required (not null)
            if (cardScheme == null)
            {
                throw new InvalidDataException("cardScheme is a required property for CardData and cannot be null");
            }
            else
            {
                this.CardScheme = cardScheme;
            }
            
            // to ensure "cardNumber" is required (not null)
            if (cardNumber == null)
            {
                throw new InvalidDataException("cardNumber is a required property for CardData and cannot be null");
            }
            else
            {
                this.CardNumber = cardNumber;
            }
            
            this.CardOptionId = cardOptionId;
            this.ExpirationDate = expirationDate;
            this.SecurityNumber = securityNumber;
            this.CardLabel = cardLabel;
        }
        
        /// <summary>
        /// The card option identifier
        /// </summary>
        /// <value>The card option identifier</value>
        [DataMember(Name="cardOptionId", EmitDefaultValue=false)]
        public int? CardOptionId { get; set; }


        /// <summary>
        /// The card&#39;s expiration date
        /// </summary>
        /// <value>The card&#39;s expiration date</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// The card number
        /// </summary>
        /// <value>The card number</value>
        [DataMember(Name="cardNumber", EmitDefaultValue=false)]
        public string CardNumber { get; set; }

        /// <summary>
        /// The Security number (CVV)
        /// </summary>
        /// <value>The Security number (CVV)</value>
        [DataMember(Name="securityNumber", EmitDefaultValue=false)]
        public string SecurityNumber { get; set; }

        /// <summary>
        /// The name of the card owner
        /// </summary>
        /// <value>The name of the card owner</value>
        [DataMember(Name="cardLabel", EmitDefaultValue=false)]
        public string CardLabel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardData {\n");
            sb.Append("  CardOptionId: ").Append(CardOptionId).Append("\n");
            sb.Append("  CardScheme: ").Append(CardScheme).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  SecurityNumber: ").Append(SecurityNumber).Append("\n");
            sb.Append("  CardLabel: ").Append(CardLabel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardData);
        }

        /// <summary>
        /// Returns true if CardData instances are equal
        /// </summary>
        /// <param name="input">Instance of CardData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CardOptionId == input.CardOptionId ||
                    (this.CardOptionId != null &&
                    this.CardOptionId.Equals(input.CardOptionId))
                ) && 
                (
                    this.CardScheme == input.CardScheme ||
                    (this.CardScheme != null &&
                    this.CardScheme.Equals(input.CardScheme))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.CardNumber == input.CardNumber ||
                    (this.CardNumber != null &&
                    this.CardNumber.Equals(input.CardNumber))
                ) && 
                (
                    this.SecurityNumber == input.SecurityNumber ||
                    (this.SecurityNumber != null &&
                    this.SecurityNumber.Equals(input.SecurityNumber))
                ) && 
                (
                    this.CardLabel == input.CardLabel ||
                    (this.CardLabel != null &&
                    this.CardLabel.Equals(input.CardLabel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardOptionId != null)
                    hashCode = hashCode * 59 + this.CardOptionId.GetHashCode();
                if (this.CardScheme != null)
                    hashCode = hashCode * 59 + this.CardScheme.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.CardNumber != null)
                    hashCode = hashCode * 59 + this.CardNumber.GetHashCode();
                if (this.SecurityNumber != null)
                    hashCode = hashCode * 59 + this.SecurityNumber.GetHashCode();
                if (this.CardLabel != null)
                    hashCode = hashCode * 59 + this.CardLabel.GetHashCode();
                return hashCode;
            }
        }
    }

}
