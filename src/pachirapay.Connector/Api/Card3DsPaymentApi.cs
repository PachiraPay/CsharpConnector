/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using pachirapay.Connector.Client;
using pachirapay.Connector.Model;

namespace pachirapay.Connector.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICard3DsPaymentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Validate authentication.
        /// </summary>
        /// <remarks>
        /// To process a payment authorization linked to this authentication, you should pass all authentication data.
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsValidateAuthenticationRequest">The validate authentication request. (optional)</param>
        /// <returns>Card3DsValidateAuthenticationResponse</returns>
        Card3DsValidateAuthenticationResponse V1PaymentsCard3dsPaymentAuthenticationPost (string authToken, Card3DsValidateAuthenticationRequest card3DsValidateAuthenticationRequest = null);

        /// <summary>
        /// Validate authentication.
        /// </summary>
        /// <remarks>
        /// To process a payment authorization linked to this authentication, you should pass all authentication data.
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsValidateAuthenticationRequest">The validate authentication request. (optional)</param>
        /// <returns>ApiResponse of Card3DsValidateAuthenticationResponse</returns>
        ApiResponse<Card3DsValidateAuthenticationResponse> V1PaymentsCard3dsPaymentAuthenticationPostWithHttpInfo (string authToken, Card3DsValidateAuthenticationRequest card3DsValidateAuthenticationRequest = null);
        /// <summary>
        /// Check enrollment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsCheckEnrollmentRequest">All data needed to make a 3DS card payment (optional)</param>
        /// <returns>Card3DsCheckEnrollmentResponse</returns>
        Card3DsCheckEnrollmentResponse V1PaymentsCard3dsPaymentPost (string authToken, Card3DsCheckEnrollmentRequest card3DsCheckEnrollmentRequest = null);

        /// <summary>
        /// Check enrollment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsCheckEnrollmentRequest">All data needed to make a 3DS card payment (optional)</param>
        /// <returns>ApiResponse of Card3DsCheckEnrollmentResponse</returns>
        ApiResponse<Card3DsCheckEnrollmentResponse> V1PaymentsCard3dsPaymentPostWithHttpInfo (string authToken, Card3DsCheckEnrollmentRequest card3DsCheckEnrollmentRequest = null);
        /// <summary>
        /// Validate authentication AND authorize / payment
        /// </summary>
        /// <remarks>
        /// The payment3DSecure is done in three steps.    &lt;para&gt;  **Step 1**  Using the POST Method available, you can check the enrollment of the card that will be used.  Remember to take note of the merchantId, merchantSiteId and orderRef you are sending, as well as the paymentRequestId you receive. You will need them again in step 3.  Also please take note of the parameter values you receive in the response, as you will need them in step 2.  &lt;/para&gt;&lt;para&gt;  **Step 2**  Then, you need to create and send a form for the user to validate the 3DS part of the card validation. We have provided you an example for the form (see below).  Simply replace the placeholder values for the parameters you received.    &lt;pre&gt; &amp;lt;html lang&#x3D;\&quot;en\&quot;&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form id &#x3D; \&quot;formulaire\&quot; method&#x3D;\&quot;post\&quot; action&#x3D;\&quot;https://fakeRoute.payment3DS.com\&quot;&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param1\&quot; name&#x3D;\&quot;param1\&quot; value&#x3D;\&quot;value1\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param2\&quot; name&#x3D;\&quot;param2\&quot; value&#x3D;\&quot;value2\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param3\&quot; name&#x3D;\&quot;param3\&quot; value&#x3D;\&quot;value3\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param4\&quot; name&#x3D;\&quot;param4\&quot; value&#x3D;\&quot;value4\&quot;/&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;script&amp;gt; &amp;lt;document.forms[0].submit(); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &lt;/pre&gt;&lt;/para&gt;&lt;para&gt;  **Step 3**  Finally, you can proceed with this PUT method to finish the payment.  Replace the placeholder values of the merchantId, merchantSiteId and orderRef with the values you sent in the POST method, and the paymentRequestId with the value you received from said POST method.  &lt;/para&gt;
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsValidateAndAuthorizeRequest">The card payment put request. (optional)</param>
        /// <returns>CardPaymentResponse</returns>
        CardPaymentResponse V1PaymentsCard3dsPaymentPut (string authToken, Card3DsValidateAuthenticationAndAuthorizeRequest card3DsValidateAndAuthorizeRequest = null);

        /// <summary>
        /// Validate authentication AND authorize / payment
        /// </summary>
        /// <remarks>
        /// The payment3DSecure is done in three steps.    &lt;para&gt;  **Step 1**  Using the POST Method available, you can check the enrollment of the card that will be used.  Remember to take note of the merchantId, merchantSiteId and orderRef you are sending, as well as the paymentRequestId you receive. You will need them again in step 3.  Also please take note of the parameter values you receive in the response, as you will need them in step 2.  &lt;/para&gt;&lt;para&gt;  **Step 2**  Then, you need to create and send a form for the user to validate the 3DS part of the card validation. We have provided you an example for the form (see below).  Simply replace the placeholder values for the parameters you received.    &lt;pre&gt; &amp;lt;html lang&#x3D;\&quot;en\&quot;&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form id &#x3D; \&quot;formulaire\&quot; method&#x3D;\&quot;post\&quot; action&#x3D;\&quot;https://fakeRoute.payment3DS.com\&quot;&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param1\&quot; name&#x3D;\&quot;param1\&quot; value&#x3D;\&quot;value1\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param2\&quot; name&#x3D;\&quot;param2\&quot; value&#x3D;\&quot;value2\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param3\&quot; name&#x3D;\&quot;param3\&quot; value&#x3D;\&quot;value3\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param4\&quot; name&#x3D;\&quot;param4\&quot; value&#x3D;\&quot;value4\&quot;/&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;script&amp;gt; &amp;lt;document.forms[0].submit(); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &lt;/pre&gt;&lt;/para&gt;&lt;para&gt;  **Step 3**  Finally, you can proceed with this PUT method to finish the payment.  Replace the placeholder values of the merchantId, merchantSiteId and orderRef with the values you sent in the POST method, and the paymentRequestId with the value you received from said POST method.  &lt;/para&gt;
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsValidateAndAuthorizeRequest">The card payment put request. (optional)</param>
        /// <returns>ApiResponse of CardPaymentResponse</returns>
        ApiResponse<CardPaymentResponse> V1PaymentsCard3dsPaymentPutWithHttpInfo (string authToken, Card3DsValidateAuthenticationAndAuthorizeRequest card3DsValidateAndAuthorizeRequest = null);
        /// <summary>
        /// Authorization / payment -with- authentication data
        /// </summary>
        /// <remarks>
        /// To reuse the previously stored authenticationData in order to trigger a 3DS authorization, you must call the dedicated Authorize with authentication-data API, and pass all authentication data.    For this first version of the API, you must pass the same orderRef and orderTag as the authentication. In future versions, the authorization will be completely decorrelated of the authentication.
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsAuthorizeWithAuthDataRequest">The authorize with authentication data request. (optional)</param>
        /// <returns>CardPaymentResponse</returns>
        CardPaymentResponse V1PaymentsCard3dsPaymentWithAuthenticationDataPost (string authToken, Card3DsAuthorizeWithAuthDataRequest card3DsAuthorizeWithAuthDataRequest = null);

        /// <summary>
        /// Authorization / payment -with- authentication data
        /// </summary>
        /// <remarks>
        /// To reuse the previously stored authenticationData in order to trigger a 3DS authorization, you must call the dedicated Authorize with authentication-data API, and pass all authentication data.    For this first version of the API, you must pass the same orderRef and orderTag as the authentication. In future versions, the authorization will be completely decorrelated of the authentication.
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsAuthorizeWithAuthDataRequest">The authorize with authentication data request. (optional)</param>
        /// <returns>ApiResponse of CardPaymentResponse</returns>
        ApiResponse<CardPaymentResponse> V1PaymentsCard3dsPaymentWithAuthenticationDataPostWithHttpInfo (string authToken, Card3DsAuthorizeWithAuthDataRequest card3DsAuthorizeWithAuthDataRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Validate authentication.
        /// </summary>
        /// <remarks>
        /// To process a payment authorization linked to this authentication, you should pass all authentication data.
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsValidateAuthenticationRequest">The validate authentication request. (optional)</param>
        /// <returns>Task of Card3DsValidateAuthenticationResponse</returns>
        System.Threading.Tasks.Task<Card3DsValidateAuthenticationResponse> V1PaymentsCard3dsPaymentAuthenticationPostAsync (string authToken, Card3DsValidateAuthenticationRequest card3DsValidateAuthenticationRequest = null);

        /// <summary>
        /// Validate authentication.
        /// </summary>
        /// <remarks>
        /// To process a payment authorization linked to this authentication, you should pass all authentication data.
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsValidateAuthenticationRequest">The validate authentication request. (optional)</param>
        /// <returns>Task of ApiResponse (Card3DsValidateAuthenticationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<Card3DsValidateAuthenticationResponse>> V1PaymentsCard3dsPaymentAuthenticationPostAsyncWithHttpInfo (string authToken, Card3DsValidateAuthenticationRequest card3DsValidateAuthenticationRequest = null);
        /// <summary>
        /// Check enrollment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsCheckEnrollmentRequest">All data needed to make a 3DS card payment (optional)</param>
        /// <returns>Task of Card3DsCheckEnrollmentResponse</returns>
        System.Threading.Tasks.Task<Card3DsCheckEnrollmentResponse> V1PaymentsCard3dsPaymentPostAsync (string authToken, Card3DsCheckEnrollmentRequest card3DsCheckEnrollmentRequest = null);

        /// <summary>
        /// Check enrollment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsCheckEnrollmentRequest">All data needed to make a 3DS card payment (optional)</param>
        /// <returns>Task of ApiResponse (Card3DsCheckEnrollmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<Card3DsCheckEnrollmentResponse>> V1PaymentsCard3dsPaymentPostAsyncWithHttpInfo (string authToken, Card3DsCheckEnrollmentRequest card3DsCheckEnrollmentRequest = null);
        /// <summary>
        /// Validate authentication AND authorize / payment
        /// </summary>
        /// <remarks>
        /// The payment3DSecure is done in three steps.    &lt;para&gt;  **Step 1**  Using the POST Method available, you can check the enrollment of the card that will be used.  Remember to take note of the merchantId, merchantSiteId and orderRef you are sending, as well as the paymentRequestId you receive. You will need them again in step 3.  Also please take note of the parameter values you receive in the response, as you will need them in step 2.  &lt;/para&gt;&lt;para&gt;  **Step 2**  Then, you need to create and send a form for the user to validate the 3DS part of the card validation. We have provided you an example for the form (see below).  Simply replace the placeholder values for the parameters you received.    &lt;pre&gt; &amp;lt;html lang&#x3D;\&quot;en\&quot;&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form id &#x3D; \&quot;formulaire\&quot; method&#x3D;\&quot;post\&quot; action&#x3D;\&quot;https://fakeRoute.payment3DS.com\&quot;&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param1\&quot; name&#x3D;\&quot;param1\&quot; value&#x3D;\&quot;value1\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param2\&quot; name&#x3D;\&quot;param2\&quot; value&#x3D;\&quot;value2\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param3\&quot; name&#x3D;\&quot;param3\&quot; value&#x3D;\&quot;value3\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param4\&quot; name&#x3D;\&quot;param4\&quot; value&#x3D;\&quot;value4\&quot;/&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;script&amp;gt; &amp;lt;document.forms[0].submit(); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &lt;/pre&gt;&lt;/para&gt;&lt;para&gt;  **Step 3**  Finally, you can proceed with this PUT method to finish the payment.  Replace the placeholder values of the merchantId, merchantSiteId and orderRef with the values you sent in the POST method, and the paymentRequestId with the value you received from said POST method.  &lt;/para&gt;
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsValidateAndAuthorizeRequest">The card payment put request. (optional)</param>
        /// <returns>Task of CardPaymentResponse</returns>
        System.Threading.Tasks.Task<CardPaymentResponse> V1PaymentsCard3dsPaymentPutAsync (string authToken, Card3DsValidateAuthenticationAndAuthorizeRequest card3DsValidateAndAuthorizeRequest = null);

        /// <summary>
        /// Validate authentication AND authorize / payment
        /// </summary>
        /// <remarks>
        /// The payment3DSecure is done in three steps.    &lt;para&gt;  **Step 1**  Using the POST Method available, you can check the enrollment of the card that will be used.  Remember to take note of the merchantId, merchantSiteId and orderRef you are sending, as well as the paymentRequestId you receive. You will need them again in step 3.  Also please take note of the parameter values you receive in the response, as you will need them in step 2.  &lt;/para&gt;&lt;para&gt;  **Step 2**  Then, you need to create and send a form for the user to validate the 3DS part of the card validation. We have provided you an example for the form (see below).  Simply replace the placeholder values for the parameters you received.    &lt;pre&gt; &amp;lt;html lang&#x3D;\&quot;en\&quot;&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form id &#x3D; \&quot;formulaire\&quot; method&#x3D;\&quot;post\&quot; action&#x3D;\&quot;https://fakeRoute.payment3DS.com\&quot;&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param1\&quot; name&#x3D;\&quot;param1\&quot; value&#x3D;\&quot;value1\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param2\&quot; name&#x3D;\&quot;param2\&quot; value&#x3D;\&quot;value2\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param3\&quot; name&#x3D;\&quot;param3\&quot; value&#x3D;\&quot;value3\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param4\&quot; name&#x3D;\&quot;param4\&quot; value&#x3D;\&quot;value4\&quot;/&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;script&amp;gt; &amp;lt;document.forms[0].submit(); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &lt;/pre&gt;&lt;/para&gt;&lt;para&gt;  **Step 3**  Finally, you can proceed with this PUT method to finish the payment.  Replace the placeholder values of the merchantId, merchantSiteId and orderRef with the values you sent in the POST method, and the paymentRequestId with the value you received from said POST method.  &lt;/para&gt;
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsValidateAndAuthorizeRequest">The card payment put request. (optional)</param>
        /// <returns>Task of ApiResponse (CardPaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardPaymentResponse>> V1PaymentsCard3dsPaymentPutAsyncWithHttpInfo (string authToken, Card3DsValidateAuthenticationAndAuthorizeRequest card3DsValidateAndAuthorizeRequest = null);
        /// <summary>
        /// Authorization / payment -with- authentication data
        /// </summary>
        /// <remarks>
        /// To reuse the previously stored authenticationData in order to trigger a 3DS authorization, you must call the dedicated Authorize with authentication-data API, and pass all authentication data.    For this first version of the API, you must pass the same orderRef and orderTag as the authentication. In future versions, the authorization will be completely decorrelated of the authentication.
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsAuthorizeWithAuthDataRequest">The authorize with authentication data request. (optional)</param>
        /// <returns>Task of CardPaymentResponse</returns>
        System.Threading.Tasks.Task<CardPaymentResponse> V1PaymentsCard3dsPaymentWithAuthenticationDataPostAsync (string authToken, Card3DsAuthorizeWithAuthDataRequest card3DsAuthorizeWithAuthDataRequest = null);

        /// <summary>
        /// Authorization / payment -with- authentication data
        /// </summary>
        /// <remarks>
        /// To reuse the previously stored authenticationData in order to trigger a 3DS authorization, you must call the dedicated Authorize with authentication-data API, and pass all authentication data.    For this first version of the API, you must pass the same orderRef and orderTag as the authentication. In future versions, the authorization will be completely decorrelated of the authentication.
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsAuthorizeWithAuthDataRequest">The authorize with authentication data request. (optional)</param>
        /// <returns>Task of ApiResponse (CardPaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardPaymentResponse>> V1PaymentsCard3dsPaymentWithAuthenticationDataPostAsyncWithHttpInfo (string authToken, Card3DsAuthorizeWithAuthDataRequest card3DsAuthorizeWithAuthDataRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Card3DsPaymentApi : ICard3DsPaymentApi
    {
        private pachirapay.Connector.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Card3DsPaymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public Card3DsPaymentApi(String basePath)
        {
            this.Configuration = new pachirapay.Connector.Client.Configuration { BasePath = basePath };

            ExceptionFactory = pachirapay.Connector.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Card3DsPaymentApi"/> class
        /// </summary>
        /// <returns></returns>
        public Card3DsPaymentApi()
        {
            this.Configuration = pachirapay.Connector.Client.Configuration.Default;

            ExceptionFactory = pachirapay.Connector.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Card3DsPaymentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Card3DsPaymentApi(pachirapay.Connector.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = pachirapay.Connector.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = pachirapay.Connector.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public pachirapay.Connector.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public pachirapay.Connector.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Validate authentication. To process a payment authorization linked to this authentication, you should pass all authentication data.
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsValidateAuthenticationRequest">The validate authentication request. (optional)</param>
        /// <returns>Card3DsValidateAuthenticationResponse</returns>
        public Card3DsValidateAuthenticationResponse V1PaymentsCard3dsPaymentAuthenticationPost (string authToken, Card3DsValidateAuthenticationRequest card3DsValidateAuthenticationRequest = null)
        {
             ApiResponse<Card3DsValidateAuthenticationResponse> localVarResponse = V1PaymentsCard3dsPaymentAuthenticationPostWithHttpInfo(authToken, card3DsValidateAuthenticationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate authentication. To process a payment authorization linked to this authentication, you should pass all authentication data.
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsValidateAuthenticationRequest">The validate authentication request. (optional)</param>
        /// <returns>ApiResponse of Card3DsValidateAuthenticationResponse</returns>
        public ApiResponse< Card3DsValidateAuthenticationResponse > V1PaymentsCard3dsPaymentAuthenticationPostWithHttpInfo (string authToken, Card3DsValidateAuthenticationRequest card3DsValidateAuthenticationRequest = null)
        {
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling Card3DsPaymentApi->V1PaymentsCard3dsPaymentAuthenticationPost");

            var localVarPath = "./v1/payments/card3ds-payment/authentication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (card3DsValidateAuthenticationRequest != null && card3DsValidateAuthenticationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(card3DsValidateAuthenticationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = card3DsValidateAuthenticationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsCard3dsPaymentAuthenticationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card3DsValidateAuthenticationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Card3DsValidateAuthenticationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card3DsValidateAuthenticationResponse)));
        }

        /// <summary>
        /// Validate authentication. To process a payment authorization linked to this authentication, you should pass all authentication data.
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsValidateAuthenticationRequest">The validate authentication request. (optional)</param>
        /// <returns>Task of Card3DsValidateAuthenticationResponse</returns>
        public async System.Threading.Tasks.Task<Card3DsValidateAuthenticationResponse> V1PaymentsCard3dsPaymentAuthenticationPostAsync (string authToken, Card3DsValidateAuthenticationRequest card3DsValidateAuthenticationRequest = null)
        {
             ApiResponse<Card3DsValidateAuthenticationResponse> localVarResponse = await V1PaymentsCard3dsPaymentAuthenticationPostAsyncWithHttpInfo(authToken, card3DsValidateAuthenticationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate authentication. To process a payment authorization linked to this authentication, you should pass all authentication data.
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsValidateAuthenticationRequest">The validate authentication request. (optional)</param>
        /// <returns>Task of ApiResponse (Card3DsValidateAuthenticationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Card3DsValidateAuthenticationResponse>> V1PaymentsCard3dsPaymentAuthenticationPostAsyncWithHttpInfo (string authToken, Card3DsValidateAuthenticationRequest card3DsValidateAuthenticationRequest = null)
        {
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling Card3DsPaymentApi->V1PaymentsCard3dsPaymentAuthenticationPost");

            var localVarPath = "./v1/payments/card3ds-payment/authentication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (card3DsValidateAuthenticationRequest != null && card3DsValidateAuthenticationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(card3DsValidateAuthenticationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = card3DsValidateAuthenticationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsCard3dsPaymentAuthenticationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card3DsValidateAuthenticationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Card3DsValidateAuthenticationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card3DsValidateAuthenticationResponse)));
        }

        /// <summary>
        /// Check enrollment 
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsCheckEnrollmentRequest">All data needed to make a 3DS card payment (optional)</param>
        /// <returns>Card3DsCheckEnrollmentResponse</returns>
        public Card3DsCheckEnrollmentResponse V1PaymentsCard3dsPaymentPost (string authToken, Card3DsCheckEnrollmentRequest card3DsCheckEnrollmentRequest = null)
        {
             ApiResponse<Card3DsCheckEnrollmentResponse> localVarResponse = V1PaymentsCard3dsPaymentPostWithHttpInfo(authToken, card3DsCheckEnrollmentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check enrollment 
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsCheckEnrollmentRequest">All data needed to make a 3DS card payment (optional)</param>
        /// <returns>ApiResponse of Card3DsCheckEnrollmentResponse</returns>
        public ApiResponse< Card3DsCheckEnrollmentResponse > V1PaymentsCard3dsPaymentPostWithHttpInfo (string authToken, Card3DsCheckEnrollmentRequest card3DsCheckEnrollmentRequest = null)
        {
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling Card3DsPaymentApi->V1PaymentsCard3dsPaymentPost");

            var localVarPath = "./v1/payments/card3ds-payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (card3DsCheckEnrollmentRequest != null && card3DsCheckEnrollmentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(card3DsCheckEnrollmentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = card3DsCheckEnrollmentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsCard3dsPaymentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card3DsCheckEnrollmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Card3DsCheckEnrollmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card3DsCheckEnrollmentResponse)));
        }

        /// <summary>
        /// Check enrollment 
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsCheckEnrollmentRequest">All data needed to make a 3DS card payment (optional)</param>
        /// <returns>Task of Card3DsCheckEnrollmentResponse</returns>
        public async System.Threading.Tasks.Task<Card3DsCheckEnrollmentResponse> V1PaymentsCard3dsPaymentPostAsync (string authToken, Card3DsCheckEnrollmentRequest card3DsCheckEnrollmentRequest = null)
        {
             ApiResponse<Card3DsCheckEnrollmentResponse> localVarResponse = await V1PaymentsCard3dsPaymentPostAsyncWithHttpInfo(authToken, card3DsCheckEnrollmentRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check enrollment 
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsCheckEnrollmentRequest">All data needed to make a 3DS card payment (optional)</param>
        /// <returns>Task of ApiResponse (Card3DsCheckEnrollmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Card3DsCheckEnrollmentResponse>> V1PaymentsCard3dsPaymentPostAsyncWithHttpInfo (string authToken, Card3DsCheckEnrollmentRequest card3DsCheckEnrollmentRequest = null)
        {
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling Card3DsPaymentApi->V1PaymentsCard3dsPaymentPost");

            var localVarPath = "./v1/payments/card3ds-payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (card3DsCheckEnrollmentRequest != null && card3DsCheckEnrollmentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(card3DsCheckEnrollmentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = card3DsCheckEnrollmentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsCard3dsPaymentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card3DsCheckEnrollmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Card3DsCheckEnrollmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card3DsCheckEnrollmentResponse)));
        }

        /// <summary>
        /// Validate authentication AND authorize / payment The payment3DSecure is done in three steps.    &lt;para&gt;  **Step 1**  Using the POST Method available, you can check the enrollment of the card that will be used.  Remember to take note of the merchantId, merchantSiteId and orderRef you are sending, as well as the paymentRequestId you receive. You will need them again in step 3.  Also please take note of the parameter values you receive in the response, as you will need them in step 2.  &lt;/para&gt;&lt;para&gt;  **Step 2**  Then, you need to create and send a form for the user to validate the 3DS part of the card validation. We have provided you an example for the form (see below).  Simply replace the placeholder values for the parameters you received.    &lt;pre&gt; &amp;lt;html lang&#x3D;\&quot;en\&quot;&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form id &#x3D; \&quot;formulaire\&quot; method&#x3D;\&quot;post\&quot; action&#x3D;\&quot;https://fakeRoute.payment3DS.com\&quot;&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param1\&quot; name&#x3D;\&quot;param1\&quot; value&#x3D;\&quot;value1\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param2\&quot; name&#x3D;\&quot;param2\&quot; value&#x3D;\&quot;value2\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param3\&quot; name&#x3D;\&quot;param3\&quot; value&#x3D;\&quot;value3\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param4\&quot; name&#x3D;\&quot;param4\&quot; value&#x3D;\&quot;value4\&quot;/&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;script&amp;gt; &amp;lt;document.forms[0].submit(); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &lt;/pre&gt;&lt;/para&gt;&lt;para&gt;  **Step 3**  Finally, you can proceed with this PUT method to finish the payment.  Replace the placeholder values of the merchantId, merchantSiteId and orderRef with the values you sent in the POST method, and the paymentRequestId with the value you received from said POST method.  &lt;/para&gt;
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsValidateAndAuthorizeRequest">The card payment put request. (optional)</param>
        /// <returns>CardPaymentResponse</returns>
        public CardPaymentResponse V1PaymentsCard3dsPaymentPut (string authToken, Card3DsValidateAuthenticationAndAuthorizeRequest card3DsValidateAndAuthorizeRequest = null)
        {
             ApiResponse<CardPaymentResponse> localVarResponse = V1PaymentsCard3dsPaymentPutWithHttpInfo(authToken, card3DsValidateAndAuthorizeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate authentication AND authorize / payment The payment3DSecure is done in three steps.    &lt;para&gt;  **Step 1**  Using the POST Method available, you can check the enrollment of the card that will be used.  Remember to take note of the merchantId, merchantSiteId and orderRef you are sending, as well as the paymentRequestId you receive. You will need them again in step 3.  Also please take note of the parameter values you receive in the response, as you will need them in step 2.  &lt;/para&gt;&lt;para&gt;  **Step 2**  Then, you need to create and send a form for the user to validate the 3DS part of the card validation. We have provided you an example for the form (see below).  Simply replace the placeholder values for the parameters you received.    &lt;pre&gt; &amp;lt;html lang&#x3D;\&quot;en\&quot;&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form id &#x3D; \&quot;formulaire\&quot; method&#x3D;\&quot;post\&quot; action&#x3D;\&quot;https://fakeRoute.payment3DS.com\&quot;&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param1\&quot; name&#x3D;\&quot;param1\&quot; value&#x3D;\&quot;value1\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param2\&quot; name&#x3D;\&quot;param2\&quot; value&#x3D;\&quot;value2\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param3\&quot; name&#x3D;\&quot;param3\&quot; value&#x3D;\&quot;value3\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param4\&quot; name&#x3D;\&quot;param4\&quot; value&#x3D;\&quot;value4\&quot;/&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;script&amp;gt; &amp;lt;document.forms[0].submit(); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &lt;/pre&gt;&lt;/para&gt;&lt;para&gt;  **Step 3**  Finally, you can proceed with this PUT method to finish the payment.  Replace the placeholder values of the merchantId, merchantSiteId and orderRef with the values you sent in the POST method, and the paymentRequestId with the value you received from said POST method.  &lt;/para&gt;
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsValidateAndAuthorizeRequest">The card payment put request. (optional)</param>
        /// <returns>ApiResponse of CardPaymentResponse</returns>
        public ApiResponse< CardPaymentResponse > V1PaymentsCard3dsPaymentPutWithHttpInfo (string authToken, Card3DsValidateAuthenticationAndAuthorizeRequest card3DsValidateAndAuthorizeRequest = null)
        {
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling Card3DsPaymentApi->V1PaymentsCard3dsPaymentPut");

            var localVarPath = "./v1/payments/card3ds-payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (card3DsValidateAndAuthorizeRequest != null && card3DsValidateAndAuthorizeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(card3DsValidateAndAuthorizeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = card3DsValidateAndAuthorizeRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsCard3dsPaymentPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardPaymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CardPaymentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardPaymentResponse)));
        }

        /// <summary>
        /// Validate authentication AND authorize / payment The payment3DSecure is done in three steps.    &lt;para&gt;  **Step 1**  Using the POST Method available, you can check the enrollment of the card that will be used.  Remember to take note of the merchantId, merchantSiteId and orderRef you are sending, as well as the paymentRequestId you receive. You will need them again in step 3.  Also please take note of the parameter values you receive in the response, as you will need them in step 2.  &lt;/para&gt;&lt;para&gt;  **Step 2**  Then, you need to create and send a form for the user to validate the 3DS part of the card validation. We have provided you an example for the form (see below).  Simply replace the placeholder values for the parameters you received.    &lt;pre&gt; &amp;lt;html lang&#x3D;\&quot;en\&quot;&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form id &#x3D; \&quot;formulaire\&quot; method&#x3D;\&quot;post\&quot; action&#x3D;\&quot;https://fakeRoute.payment3DS.com\&quot;&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param1\&quot; name&#x3D;\&quot;param1\&quot; value&#x3D;\&quot;value1\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param2\&quot; name&#x3D;\&quot;param2\&quot; value&#x3D;\&quot;value2\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param3\&quot; name&#x3D;\&quot;param3\&quot; value&#x3D;\&quot;value3\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param4\&quot; name&#x3D;\&quot;param4\&quot; value&#x3D;\&quot;value4\&quot;/&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;script&amp;gt; &amp;lt;document.forms[0].submit(); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &lt;/pre&gt;&lt;/para&gt;&lt;para&gt;  **Step 3**  Finally, you can proceed with this PUT method to finish the payment.  Replace the placeholder values of the merchantId, merchantSiteId and orderRef with the values you sent in the POST method, and the paymentRequestId with the value you received from said POST method.  &lt;/para&gt;
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsValidateAndAuthorizeRequest">The card payment put request. (optional)</param>
        /// <returns>Task of CardPaymentResponse</returns>
        public async System.Threading.Tasks.Task<CardPaymentResponse> V1PaymentsCard3dsPaymentPutAsync (string authToken, Card3DsValidateAuthenticationAndAuthorizeRequest card3DsValidateAndAuthorizeRequest = null)
        {
             ApiResponse<CardPaymentResponse> localVarResponse = await V1PaymentsCard3dsPaymentPutAsyncWithHttpInfo(authToken, card3DsValidateAndAuthorizeRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate authentication AND authorize / payment The payment3DSecure is done in three steps.    &lt;para&gt;  **Step 1**  Using the POST Method available, you can check the enrollment of the card that will be used.  Remember to take note of the merchantId, merchantSiteId and orderRef you are sending, as well as the paymentRequestId you receive. You will need them again in step 3.  Also please take note of the parameter values you receive in the response, as you will need them in step 2.  &lt;/para&gt;&lt;para&gt;  **Step 2**  Then, you need to create and send a form for the user to validate the 3DS part of the card validation. We have provided you an example for the form (see below).  Simply replace the placeholder values for the parameters you received.    &lt;pre&gt; &amp;lt;html lang&#x3D;\&quot;en\&quot;&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form id &#x3D; \&quot;formulaire\&quot; method&#x3D;\&quot;post\&quot; action&#x3D;\&quot;https://fakeRoute.payment3DS.com\&quot;&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param1\&quot; name&#x3D;\&quot;param1\&quot; value&#x3D;\&quot;value1\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param2\&quot; name&#x3D;\&quot;param2\&quot; value&#x3D;\&quot;value2\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param3\&quot; name&#x3D;\&quot;param3\&quot; value&#x3D;\&quot;value3\&quot;/&amp;gt; &amp;lt;input type &#x3D; \&quot;hidden\&quot; id&#x3D;\&quot;param4\&quot; name&#x3D;\&quot;param4\&quot; value&#x3D;\&quot;value4\&quot;/&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;script&amp;gt; &amp;lt;document.forms[0].submit(); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &lt;/pre&gt;&lt;/para&gt;&lt;para&gt;  **Step 3**  Finally, you can proceed with this PUT method to finish the payment.  Replace the placeholder values of the merchantId, merchantSiteId and orderRef with the values you sent in the POST method, and the paymentRequestId with the value you received from said POST method.  &lt;/para&gt;
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsValidateAndAuthorizeRequest">The card payment put request. (optional)</param>
        /// <returns>Task of ApiResponse (CardPaymentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardPaymentResponse>> V1PaymentsCard3dsPaymentPutAsyncWithHttpInfo (string authToken, Card3DsValidateAuthenticationAndAuthorizeRequest card3DsValidateAndAuthorizeRequest = null)
        {
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling Card3DsPaymentApi->V1PaymentsCard3dsPaymentPut");

            var localVarPath = "./v1/payments/card3ds-payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (card3DsValidateAndAuthorizeRequest != null && card3DsValidateAndAuthorizeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(card3DsValidateAndAuthorizeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = card3DsValidateAndAuthorizeRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsCard3dsPaymentPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardPaymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CardPaymentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardPaymentResponse)));
        }

        /// <summary>
        /// Authorization / payment -with- authentication data To reuse the previously stored authenticationData in order to trigger a 3DS authorization, you must call the dedicated Authorize with authentication-data API, and pass all authentication data.    For this first version of the API, you must pass the same orderRef and orderTag as the authentication. In future versions, the authorization will be completely decorrelated of the authentication.
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsAuthorizeWithAuthDataRequest">The authorize with authentication data request. (optional)</param>
        /// <returns>CardPaymentResponse</returns>
        public CardPaymentResponse V1PaymentsCard3dsPaymentWithAuthenticationDataPost (string authToken, Card3DsAuthorizeWithAuthDataRequest card3DsAuthorizeWithAuthDataRequest = null)
        {
             ApiResponse<CardPaymentResponse> localVarResponse = V1PaymentsCard3dsPaymentWithAuthenticationDataPostWithHttpInfo(authToken, card3DsAuthorizeWithAuthDataRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authorization / payment -with- authentication data To reuse the previously stored authenticationData in order to trigger a 3DS authorization, you must call the dedicated Authorize with authentication-data API, and pass all authentication data.    For this first version of the API, you must pass the same orderRef and orderTag as the authentication. In future versions, the authorization will be completely decorrelated of the authentication.
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsAuthorizeWithAuthDataRequest">The authorize with authentication data request. (optional)</param>
        /// <returns>ApiResponse of CardPaymentResponse</returns>
        public ApiResponse< CardPaymentResponse > V1PaymentsCard3dsPaymentWithAuthenticationDataPostWithHttpInfo (string authToken, Card3DsAuthorizeWithAuthDataRequest card3DsAuthorizeWithAuthDataRequest = null)
        {
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling Card3DsPaymentApi->V1PaymentsCard3dsPaymentWithAuthenticationDataPost");

            var localVarPath = "./v1/payments/card3ds-payment/with-authentication-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (card3DsAuthorizeWithAuthDataRequest != null && card3DsAuthorizeWithAuthDataRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(card3DsAuthorizeWithAuthDataRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = card3DsAuthorizeWithAuthDataRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsCard3dsPaymentWithAuthenticationDataPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardPaymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CardPaymentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardPaymentResponse)));
        }

        /// <summary>
        /// Authorization / payment -with- authentication data To reuse the previously stored authenticationData in order to trigger a 3DS authorization, you must call the dedicated Authorize with authentication-data API, and pass all authentication data.    For this first version of the API, you must pass the same orderRef and orderTag as the authentication. In future versions, the authorization will be completely decorrelated of the authentication.
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsAuthorizeWithAuthDataRequest">The authorize with authentication data request. (optional)</param>
        /// <returns>Task of CardPaymentResponse</returns>
        public async System.Threading.Tasks.Task<CardPaymentResponse> V1PaymentsCard3dsPaymentWithAuthenticationDataPostAsync (string authToken, Card3DsAuthorizeWithAuthDataRequest card3DsAuthorizeWithAuthDataRequest = null)
        {
             ApiResponse<CardPaymentResponse> localVarResponse = await V1PaymentsCard3dsPaymentWithAuthenticationDataPostAsyncWithHttpInfo(authToken, card3DsAuthorizeWithAuthDataRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authorization / payment -with- authentication data To reuse the previously stored authenticationData in order to trigger a 3DS authorization, you must call the dedicated Authorize with authentication-data API, and pass all authentication data.    For this first version of the API, you must pass the same orderRef and orderTag as the authentication. In future versions, the authorization will be completely decorrelated of the authentication.
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="card3DsAuthorizeWithAuthDataRequest">The authorize with authentication data request. (optional)</param>
        /// <returns>Task of ApiResponse (CardPaymentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardPaymentResponse>> V1PaymentsCard3dsPaymentWithAuthenticationDataPostAsyncWithHttpInfo (string authToken, Card3DsAuthorizeWithAuthDataRequest card3DsAuthorizeWithAuthDataRequest = null)
        {
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling Card3DsPaymentApi->V1PaymentsCard3dsPaymentWithAuthenticationDataPost");

            var localVarPath = "./v1/payments/card3ds-payment/with-authentication-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (card3DsAuthorizeWithAuthDataRequest != null && card3DsAuthorizeWithAuthDataRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(card3DsAuthorizeWithAuthDataRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = card3DsAuthorizeWithAuthDataRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsCard3dsPaymentWithAuthenticationDataPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardPaymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CardPaymentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardPaymentResponse)));
        }

    }
}
