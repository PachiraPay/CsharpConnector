/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = pachirapay.Connector.Client.OpenAPIDateConverter;

namespace pachirapay.Connector.Model
{
    /// <summary>
    /// All order data
    /// </summary>
    [DataContract]
    public partial class Order :  IEquatable<Order>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Order() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="orderRef">The order reference linked to the schedule and transaction (required).</param>
        /// <param name="invoiceId">The invoice identifier.</param>
        /// <param name="orderTag">The order tag is a label for the schedule.</param>
        /// <param name="orderDate">Date of the order (required).</param>
        /// <param name="amount">The amount of the payment (required).</param>
        public Order(string orderRef = default(string), long? invoiceId = default(long?), string orderTag = default(string), DateTime? orderDate = default(DateTime?), long? amount = default(long?))
        {
            // to ensure "orderRef" is required (not null)
            if (orderRef == null)
            {
                throw new InvalidDataException("orderRef is a required property for Order and cannot be null");
            }
            else
            {
                this.OrderRef = orderRef;
            }
            
            // to ensure "orderDate" is required (not null)
            if (orderDate == null)
            {
                throw new InvalidDataException("orderDate is a required property for Order and cannot be null");
            }
            else
            {
                this.OrderDate = orderDate;
            }
            
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for Order and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            
            this.InvoiceId = invoiceId;
            this.OrderTag = orderTag;
        }
        
        /// <summary>
        /// The order reference linked to the schedule and transaction
        /// </summary>
        /// <value>The order reference linked to the schedule and transaction</value>
        [DataMember(Name="orderRef", EmitDefaultValue=false)]
        public string OrderRef { get; set; }

        /// <summary>
        /// The invoice identifier
        /// </summary>
        /// <value>The invoice identifier</value>
        [DataMember(Name="invoiceId", EmitDefaultValue=false)]
        public long? InvoiceId { get; set; }

        /// <summary>
        /// The order tag is a label for the schedule
        /// </summary>
        /// <value>The order tag is a label for the schedule</value>
        [DataMember(Name="orderTag", EmitDefaultValue=false)]
        public string OrderTag { get; set; }

        /// <summary>
        /// Date of the order
        /// </summary>
        /// <value>Date of the order</value>
        [DataMember(Name="orderDate", EmitDefaultValue=false)]
        public DateTime? OrderDate { get; set; }

        /// <summary>
        /// The amount of the payment
        /// </summary>
        /// <value>The amount of the payment</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public long? Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  OrderRef: ").Append(OrderRef).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  OrderTag: ").Append(OrderTag).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderRef == input.OrderRef ||
                    (this.OrderRef != null &&
                    this.OrderRef.Equals(input.OrderRef))
                ) && 
                (
                    this.InvoiceId == input.InvoiceId ||
                    (this.InvoiceId != null &&
                    this.InvoiceId.Equals(input.InvoiceId))
                ) && 
                (
                    this.OrderTag == input.OrderTag ||
                    (this.OrderTag != null &&
                    this.OrderTag.Equals(input.OrderTag))
                ) && 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderRef != null)
                    hashCode = hashCode * 59 + this.OrderRef.GetHashCode();
                if (this.InvoiceId != null)
                    hashCode = hashCode * 59 + this.InvoiceId.GetHashCode();
                if (this.OrderTag != null)
                    hashCode = hashCode * 59 + this.OrderTag.GetHashCode();
                if (this.OrderDate != null)
                    hashCode = hashCode * 59 + this.OrderDate.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                return hashCode;
            }
        }
    }

}
