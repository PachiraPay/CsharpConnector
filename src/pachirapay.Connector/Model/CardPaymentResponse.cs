/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = pachirapay.Connector.Client.OpenAPIDateConverter;

namespace pachirapay.Connector.Model
{
    /// <summary>
    /// The card payment response
    /// </summary>
    [DataContract]
    public partial class CardPaymentResponse :  IEquatable<CardPaymentResponse>
    {
        /// <summary>
        /// The response code of the service
        /// </summary>
        /// <value>The response code of the service</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResponseCodeEnum
        {
            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum Succeeded for value: succeeded
            /// </summary>
            [EnumMember(Value = "succeeded")]
            Succeeded = 2,

            /// <summary>
            /// Enum BadRequest for value: badRequest
            /// </summary>
            [EnumMember(Value = "badRequest")]
            BadRequest = 3,

            /// <summary>
            /// Enum RefusedByBank for value: refusedByBank
            /// </summary>
            [EnumMember(Value = "refusedByBank")]
            RefusedByBank = 4,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 5,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 6

        }

        /// <summary>
        /// The response code of the service
        /// </summary>
        /// <value>The response code of the service</value>
        [DataMember(Name="responseCode", EmitDefaultValue=false)]
        public ResponseCodeEnum? ResponseCode { get; set; }
        /// <summary>
        /// The complementary code for more details
        /// </summary>
        /// <value>The complementary code for more details</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComplementaryResponseCodeEnum
        {
            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum AmountLimitExceeded for value: amountLimitExceeded
            /// </summary>
            [EnumMember(Value = "amountLimitExceeded")]
            AmountLimitExceeded = 2,

            /// <summary>
            /// Enum LimitExceeded for value: limitExceeded
            /// </summary>
            [EnumMember(Value = "limitExceeded")]
            LimitExceeded = 3,

            /// <summary>
            /// Enum TechnicalProblem for value: technicalProblem
            /// </summary>
            [EnumMember(Value = "technicalProblem")]
            TechnicalProblem = 4,

            /// <summary>
            /// Enum Authorized for value: authorized
            /// </summary>
            [EnumMember(Value = "authorized")]
            Authorized = 5,

            /// <summary>
            /// Enum BankFraudSuspicion for value: bankFraudSuspicion
            /// </summary>
            [EnumMember(Value = "bankFraudSuspicion")]
            BankFraudSuspicion = 6,

            /// <summary>
            /// Enum CardExpired for value: cardExpired
            /// </summary>
            [EnumMember(Value = "cardExpired")]
            CardExpired = 7,

            /// <summary>
            /// Enum CardIssuerUnavailable for value: cardIssuerUnavailable
            /// </summary>
            [EnumMember(Value = "cardIssuerUnavailable")]
            CardIssuerUnavailable = 8,

            /// <summary>
            /// Enum CardholderNotAuthenticated for value: cardholderNotAuthenticated
            /// </summary>
            [EnumMember(Value = "cardholderNotAuthenticated")]
            CardholderNotAuthenticated = 9,

            /// <summary>
            /// Enum DateOfValidityExpired for value: dateOfValidityExpired
            /// </summary>
            [EnumMember(Value = "dateOfValidityExpired")]
            DateOfValidityExpired = 10,

            /// <summary>
            /// Enum DuplicateRequest for value: duplicateRequest
            /// </summary>
            [EnumMember(Value = "duplicateRequest")]
            DuplicateRequest = 11,

            /// <summary>
            /// Enum FormatError for value: formatError
            /// </summary>
            [EnumMember(Value = "formatError")]
            FormatError = 12,

            /// <summary>
            /// Enum FraudSuspicion for value: fraudSuspicion
            /// </summary>
            [EnumMember(Value = "fraudSuspicion")]
            FraudSuspicion = 13,

            /// <summary>
            /// Enum IllegalTransaction for value: illegalTransaction
            /// </summary>
            [EnumMember(Value = "illegalTransaction")]
            IllegalTransaction = 14,

            /// <summary>
            /// Enum InvalidAcceptor for value: invalidAcceptor
            /// </summary>
            [EnumMember(Value = "invalidAcceptor")]
            InvalidAcceptor = 15,

            /// <summary>
            /// Enum InvalidAccount for value: invalidAccount
            /// </summary>
            [EnumMember(Value = "invalidAccount")]
            InvalidAccount = 16,

            /// <summary>
            /// Enum InvalidCardIssuer for value: invalidCardIssuer
            /// </summary>
            [EnumMember(Value = "invalidCardIssuer")]
            InvalidCardIssuer = 17,

            /// <summary>
            /// Enum InvalidTransaction for value: invalidTransaction
            /// </summary>
            [EnumMember(Value = "invalidTransaction")]
            InvalidTransaction = 18,

            /// <summary>
            /// Enum LostCard for value: lostCard
            /// </summary>
            [EnumMember(Value = "lostCard")]
            LostCard = 19,

            /// <summary>
            /// Enum ReferenceNumberCannotBeFound for value: referenceNumberCannotBeFound
            /// </summary>
            [EnumMember(Value = "referenceNumberCannotBeFound")]
            ReferenceNumberCannotBeFound = 20,

            /// <summary>
            /// Enum Referred for value: referred
            /// </summary>
            [EnumMember(Value = "referred")]
            Referred = 21,

            /// <summary>
            /// Enum Refused for value: refused
            /// </summary>
            [EnumMember(Value = "refused")]
            Refused = 22,

            /// <summary>
            /// Enum RequestedFunctionNotSupported for value: requestedFunctionNotSupported
            /// </summary>
            [EnumMember(Value = "requestedFunctionNotSupported")]
            RequestedFunctionNotSupported = 23,

            /// <summary>
            /// Enum SecurityBreach for value: securityBreach
            /// </summary>
            [EnumMember(Value = "securityBreach")]
            SecurityBreach = 24,

            /// <summary>
            /// Enum SecurityRulesViolated for value: securityRulesViolated
            /// </summary>
            [EnumMember(Value = "securityRulesViolated")]
            SecurityRulesViolated = 25,

            /// <summary>
            /// Enum ServerUnavailableNetworkRoutingAskedAgain for value: serverUnavailableNetworkRoutingAskedAgain
            /// </summary>
            [EnumMember(Value = "serverUnavailableNetworkRoutingAskedAgain")]
            ServerUnavailableNetworkRoutingAskedAgain = 26,

            /// <summary>
            /// Enum StolenCard for value: stolenCard
            /// </summary>
            [EnumMember(Value = "stolenCard")]
            StolenCard = 27,

            /// <summary>
            /// Enum SystemUnavailable for value: systemUnavailable
            /// </summary>
            [EnumMember(Value = "systemUnavailable")]
            SystemUnavailable = 28,

            /// <summary>
            /// Enum TemporaryBankServerUnavailability for value: temporaryBankServerUnavailability
            /// </summary>
            [EnumMember(Value = "temporaryBankServerUnavailability")]
            TemporaryBankServerUnavailability = 29,

            /// <summary>
            /// Enum TemporaryOfficeServerUnavailability for value: temporaryOfficeServerUnavailability
            /// </summary>
            [EnumMember(Value = "temporaryOfficeServerUnavailability")]
            TemporaryOfficeServerUnavailability = 30,

            /// <summary>
            /// Enum TransactionNotPermitted for value: transactionNotPermitted
            /// </summary>
            [EnumMember(Value = "transactionNotPermitted")]
            TransactionNotPermitted = 31,

            /// <summary>
            /// Enum TransactionTimedOut for value: transactionTimedOut
            /// </summary>
            [EnumMember(Value = "transactionTimedOut")]
            TransactionTimedOut = 32,

            /// <summary>
            /// Enum UnknownAcquirerAccountCode for value: unknownAcquirerAccountCode
            /// </summary>
            [EnumMember(Value = "unknownAcquirerAccountCode")]
            UnknownAcquirerAccountCode = 33,

            /// <summary>
            /// Enum UnknownCard for value: unknownCard
            /// </summary>
            [EnumMember(Value = "unknownCard")]
            UnknownCard = 34,

            /// <summary>
            /// Enum UpdateOfFileImpossible for value: updateOfFileImpossible
            /// </summary>
            [EnumMember(Value = "updateOfFileImpossible")]
            UpdateOfFileImpossible = 35,

            /// <summary>
            /// Enum TransactionArchived for value: transactionArchived
            /// </summary>
            [EnumMember(Value = "transactionArchived")]
            TransactionArchived = 36,

            /// <summary>
            /// Enum RefusedByScoring for value: refusedByScoring
            /// </summary>
            [EnumMember(Value = "refusedByScoring")]
            RefusedByScoring = 37,

            /// <summary>
            /// Enum RefusedByScoring2 for value: refusedByScoring2
            /// </summary>
            [EnumMember(Value = "refusedByScoring2")]
            RefusedByScoring2 = 38,

            /// <summary>
            /// Enum NotAvailable for value: notAvailable
            /// </summary>
            [EnumMember(Value = "notAvailable")]
            NotAvailable = 39,

            /// <summary>
            /// Enum DeprecatedCardToken for value: deprecatedCardToken
            /// </summary>
            [EnumMember(Value = "deprecatedCardToken")]
            DeprecatedCardToken = 40,

            /// <summary>
            /// Enum ExceededAuthorizedAmount for value: exceededAuthorizedAmount
            /// </summary>
            [EnumMember(Value = "exceededAuthorizedAmount")]
            ExceededAuthorizedAmount = 41,

            /// <summary>
            /// Enum ReportDelayLimitExceeded for value: reportDelayLimitExceeded
            /// </summary>
            [EnumMember(Value = "reportDelayLimitExceeded")]
            ReportDelayLimitExceeded = 42

        }

        /// <summary>
        /// The complementary code for more details
        /// </summary>
        /// <value>The complementary code for more details</value>
        [DataMember(Name="complementaryResponseCode", EmitDefaultValue=false)]
        public ComplementaryResponseCodeEnum? ComplementaryResponseCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardPaymentResponse" /> class.
        /// </summary>
        /// <param name="merchantAccountRef">The merchant account reference of the payment.</param>
        /// <param name="responseCode">The response code of the service.</param>
        /// <param name="complementaryResponseCode">The complementary code for more details.</param>
        /// <param name="schedules">All schedules data.</param>
        /// <param name="storedCard">storedCard.</param>
        /// <param name="responseMessage">The global response message.</param>
        public CardPaymentResponse(string merchantAccountRef = default(string), ResponseCodeEnum? responseCode = default(ResponseCodeEnum?), ComplementaryResponseCodeEnum? complementaryResponseCode = default(ComplementaryResponseCodeEnum?), List<ScheduleLight> schedules = default(List<ScheduleLight>), StoredCard storedCard = default(StoredCard), string responseMessage = default(string))
        {
            this.MerchantAccountRef = merchantAccountRef;
            this.ResponseCode = responseCode;
            this.ComplementaryResponseCode = complementaryResponseCode;
            this.Schedules = schedules;
            this.StoredCard = storedCard;
            this.ResponseMessage = responseMessage;
        }
        
        /// <summary>
        /// The merchant account reference of the payment
        /// </summary>
        /// <value>The merchant account reference of the payment</value>
        [DataMember(Name="merchantAccountRef", EmitDefaultValue=false)]
        public string MerchantAccountRef { get; set; }



        /// <summary>
        /// All schedules data
        /// </summary>
        /// <value>All schedules data</value>
        [DataMember(Name="schedules", EmitDefaultValue=false)]
        public List<ScheduleLight> Schedules { get; set; }

        /// <summary>
        /// Gets or Sets StoredCard
        /// </summary>
        [DataMember(Name="storedCard", EmitDefaultValue=false)]
        public StoredCard StoredCard { get; set; }

        /// <summary>
        /// The global response message
        /// </summary>
        /// <value>The global response message</value>
        [DataMember(Name="responseMessage", EmitDefaultValue=false)]
        public string ResponseMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardPaymentResponse {\n");
            sb.Append("  MerchantAccountRef: ").Append(MerchantAccountRef).Append("\n");
            sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            sb.Append("  ComplementaryResponseCode: ").Append(ComplementaryResponseCode).Append("\n");
            sb.Append("  Schedules: ").Append(Schedules).Append("\n");
            sb.Append("  StoredCard: ").Append(StoredCard).Append("\n");
            sb.Append("  ResponseMessage: ").Append(ResponseMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardPaymentResponse);
        }

        /// <summary>
        /// Returns true if CardPaymentResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CardPaymentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardPaymentResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MerchantAccountRef == input.MerchantAccountRef ||
                    (this.MerchantAccountRef != null &&
                    this.MerchantAccountRef.Equals(input.MerchantAccountRef))
                ) && 
                (
                    this.ResponseCode == input.ResponseCode ||
                    (this.ResponseCode != null &&
                    this.ResponseCode.Equals(input.ResponseCode))
                ) && 
                (
                    this.ComplementaryResponseCode == input.ComplementaryResponseCode ||
                    (this.ComplementaryResponseCode != null &&
                    this.ComplementaryResponseCode.Equals(input.ComplementaryResponseCode))
                ) && 
                (
                    this.Schedules == input.Schedules ||
                    this.Schedules != null &&
                    input.Schedules != null &&
                    this.Schedules.SequenceEqual(input.Schedules)
                ) && 
                (
                    this.StoredCard == input.StoredCard ||
                    (this.StoredCard != null &&
                    this.StoredCard.Equals(input.StoredCard))
                ) && 
                (
                    this.ResponseMessage == input.ResponseMessage ||
                    (this.ResponseMessage != null &&
                    this.ResponseMessage.Equals(input.ResponseMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MerchantAccountRef != null)
                    hashCode = hashCode * 59 + this.MerchantAccountRef.GetHashCode();
                if (this.ResponseCode != null)
                    hashCode = hashCode * 59 + this.ResponseCode.GetHashCode();
                if (this.ComplementaryResponseCode != null)
                    hashCode = hashCode * 59 + this.ComplementaryResponseCode.GetHashCode();
                if (this.Schedules != null)
                    hashCode = hashCode * 59 + this.Schedules.GetHashCode();
                if (this.StoredCard != null)
                    hashCode = hashCode * 59 + this.StoredCard.GetHashCode();
                if (this.ResponseMessage != null)
                    hashCode = hashCode * 59 + this.ResponseMessage.GetHashCode();
                return hashCode;
            }
        }
    }

}
