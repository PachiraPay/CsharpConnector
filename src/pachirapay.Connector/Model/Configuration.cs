/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = pachirapay.Connector.Client.OpenAPIDateConverter;

namespace pachirapay.Connector.Model
{
    /// <summary>
    /// Configuration
    /// </summary>
    [DataContract]
    public partial class Configuration :  IEquatable<Configuration>
    {
        /// <summary>
        /// Specify the payment form type.  - Default is a full page payment form and should be used is you plan to redirect the customer to the payment page.  - Iframe should be used if you plan to integrate the payment form into your checkout (without external redirection).
        /// </summary>
        /// <value>Specify the payment form type.  - Default is a full page payment form and should be used is you plan to redirect the customer to the payment page.  - Iframe should be used if you plan to integrate the payment form into your checkout (without external redirection).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormTypeEnum
        {
            /// <summary>
            /// Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")]
            Default = 1,

            /// <summary>
            /// Enum Iframe for value: iframe
            /// </summary>
            [EnumMember(Value = "iframe")]
            Iframe = 2,

            /// <summary>
            /// Enum Preview for value: preview
            /// </summary>
            [EnumMember(Value = "preview")]
            Preview = 3

        }

        /// <summary>
        /// Specify the payment form type.  - Default is a full page payment form and should be used is you plan to redirect the customer to the payment page.  - Iframe should be used if you plan to integrate the payment form into your checkout (without external redirection).
        /// </summary>
        /// <value>Specify the payment form type.  - Default is a full page payment form and should be used is you plan to redirect the customer to the payment page.  - Iframe should be used if you plan to integrate the payment form into your checkout (without external redirection).</value>
        [DataMember(Name="formType", EmitDefaultValue=false)]
        public FormTypeEnum? FormType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Configuration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class.
        /// </summary>
        /// <param name="culture">Specify the culture to use on the payment form (ex: \&quot;fr-FR\&quot;, \&quot;en-GB\&quot;, \&quot;en-US\&quot;, \&quot;es-CO\&quot;).</param>
        /// <param name="formType">Specify the payment form type.  - Default is a full page payment form and should be used is you plan to redirect the customer to the payment page.  - Iframe should be used if you plan to integrate the payment form into your checkout (without external redirection)..</param>
        /// <param name="merchantBackUrl">Defines the URL to use if we need to redirect the customer back to your website..</param>
        /// <param name="merchantHomeUrl">Defines the URL to use if we need to redirect the customer to the homepage of your website..</param>
        /// <param name="merchantNotifyUrl">Defines the URL to use to notify you at the end of the payment process.  The notification is a POST request, which includes the payment result code.  NOTE: this URL is optional, if not specified, no notification will be posted..</param>
        /// <param name="merchantReturnUrl">Defines the URL to use to redirect the customer at the end of the payment process.  The redirection is a POST request, using the customer browser, which includes the payment result code..</param>
        /// <param name="paymentOptionRef">Defines the payment option to use (1 for card payment, 21 for card payment with 3DS, 17 for paypal, ...).  Please refer to the full documentation for the exhaustive list. (required).</param>
        /// <param name="reportDelayInDays">The report delay in days. Can be used to postpone a payment..</param>
        /// <param name="userAgent">The user agent.  Optional, if not set it will be retrieved during the first load of the payment session into the customer browser..</param>
        /// <param name="template">The template to use for the payment form.  Optional, it should be set only if a specific UI has been implemented (custom UI style).  By default, it will defaulting to the \&quot;Generic\&quot; template..</param>
        /// <param name="authenticationOnly">If set to *true*, no authorization will be done. The process ends after the holder authentication..</param>
        public Configuration(string culture = default(string), FormTypeEnum? formType = default(FormTypeEnum?), string merchantBackUrl = default(string), string merchantHomeUrl = default(string), string merchantNotifyUrl = default(string), string merchantReturnUrl = default(string), string paymentOptionRef = default(string), int? reportDelayInDays = default(int?), string userAgent = default(string), string template = default(string), bool? authenticationOnly = default(bool?))
        {
            // to ensure "paymentOptionRef" is required (not null)
            if (paymentOptionRef == null)
            {
                throw new InvalidDataException("paymentOptionRef is a required property for Configuration and cannot be null");
            }
            else
            {
                this.PaymentOptionRef = paymentOptionRef;
            }
            
            this.Culture = culture;
            this.FormType = formType;
            this.MerchantBackUrl = merchantBackUrl;
            this.MerchantHomeUrl = merchantHomeUrl;
            this.MerchantNotifyUrl = merchantNotifyUrl;
            this.MerchantReturnUrl = merchantReturnUrl;
            this.ReportDelayInDays = reportDelayInDays;
            this.UserAgent = userAgent;
            this.Template = template;
            this.AuthenticationOnly = authenticationOnly;
        }
        
        /// <summary>
        /// Specify the culture to use on the payment form (ex: \&quot;fr-FR\&quot;, \&quot;en-GB\&quot;, \&quot;en-US\&quot;, \&quot;es-CO\&quot;)
        /// </summary>
        /// <value>Specify the culture to use on the payment form (ex: \&quot;fr-FR\&quot;, \&quot;en-GB\&quot;, \&quot;en-US\&quot;, \&quot;es-CO\&quot;)</value>
        [DataMember(Name="culture", EmitDefaultValue=false)]
        public string Culture { get; set; }


        /// <summary>
        /// Defines the URL to use if we need to redirect the customer back to your website.
        /// </summary>
        /// <value>Defines the URL to use if we need to redirect the customer back to your website.</value>
        [DataMember(Name="merchantBackUrl", EmitDefaultValue=false)]
        public string MerchantBackUrl { get; set; }

        /// <summary>
        /// Defines the URL to use if we need to redirect the customer to the homepage of your website.
        /// </summary>
        /// <value>Defines the URL to use if we need to redirect the customer to the homepage of your website.</value>
        [DataMember(Name="merchantHomeUrl", EmitDefaultValue=false)]
        public string MerchantHomeUrl { get; set; }

        /// <summary>
        /// Defines the URL to use to notify you at the end of the payment process.  The notification is a POST request, which includes the payment result code.  NOTE: this URL is optional, if not specified, no notification will be posted.
        /// </summary>
        /// <value>Defines the URL to use to notify you at the end of the payment process.  The notification is a POST request, which includes the payment result code.  NOTE: this URL is optional, if not specified, no notification will be posted.</value>
        [DataMember(Name="merchantNotifyUrl", EmitDefaultValue=false)]
        public string MerchantNotifyUrl { get; set; }

        /// <summary>
        /// Defines the URL to use to redirect the customer at the end of the payment process.  The redirection is a POST request, using the customer browser, which includes the payment result code.
        /// </summary>
        /// <value>Defines the URL to use to redirect the customer at the end of the payment process.  The redirection is a POST request, using the customer browser, which includes the payment result code.</value>
        [DataMember(Name="merchantReturnUrl", EmitDefaultValue=false)]
        public string MerchantReturnUrl { get; set; }

        /// <summary>
        /// Defines the payment option to use (1 for card payment, 21 for card payment with 3DS, 17 for paypal, ...).  Please refer to the full documentation for the exhaustive list.
        /// </summary>
        /// <value>Defines the payment option to use (1 for card payment, 21 for card payment with 3DS, 17 for paypal, ...).  Please refer to the full documentation for the exhaustive list.</value>
        [DataMember(Name="paymentOptionRef", EmitDefaultValue=false)]
        public string PaymentOptionRef { get; set; }

        /// <summary>
        /// The report delay in days. Can be used to postpone a payment.
        /// </summary>
        /// <value>The report delay in days. Can be used to postpone a payment.</value>
        [DataMember(Name="reportDelayInDays", EmitDefaultValue=false)]
        public int? ReportDelayInDays { get; set; }

        /// <summary>
        /// The user agent.  Optional, if not set it will be retrieved during the first load of the payment session into the customer browser.
        /// </summary>
        /// <value>The user agent.  Optional, if not set it will be retrieved during the first load of the payment session into the customer browser.</value>
        [DataMember(Name="userAgent", EmitDefaultValue=false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// The template to use for the payment form.  Optional, it should be set only if a specific UI has been implemented (custom UI style).  By default, it will defaulting to the \&quot;Generic\&quot; template.
        /// </summary>
        /// <value>The template to use for the payment form.  Optional, it should be set only if a specific UI has been implemented (custom UI style).  By default, it will defaulting to the \&quot;Generic\&quot; template.</value>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public string Template { get; set; }

        /// <summary>
        /// If set to *true*, no authorization will be done. The process ends after the holder authentication.
        /// </summary>
        /// <value>If set to *true*, no authorization will be done. The process ends after the holder authentication.</value>
        [DataMember(Name="authenticationOnly", EmitDefaultValue=false)]
        public bool? AuthenticationOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Configuration {\n");
            sb.Append("  Culture: ").Append(Culture).Append("\n");
            sb.Append("  FormType: ").Append(FormType).Append("\n");
            sb.Append("  MerchantBackUrl: ").Append(MerchantBackUrl).Append("\n");
            sb.Append("  MerchantHomeUrl: ").Append(MerchantHomeUrl).Append("\n");
            sb.Append("  MerchantNotifyUrl: ").Append(MerchantNotifyUrl).Append("\n");
            sb.Append("  MerchantReturnUrl: ").Append(MerchantReturnUrl).Append("\n");
            sb.Append("  PaymentOptionRef: ").Append(PaymentOptionRef).Append("\n");
            sb.Append("  ReportDelayInDays: ").Append(ReportDelayInDays).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  AuthenticationOnly: ").Append(AuthenticationOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Configuration);
        }

        /// <summary>
        /// Returns true if Configuration instances are equal
        /// </summary>
        /// <param name="input">Instance of Configuration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Configuration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Culture == input.Culture ||
                    (this.Culture != null &&
                    this.Culture.Equals(input.Culture))
                ) && 
                (
                    this.FormType == input.FormType ||
                    (this.FormType != null &&
                    this.FormType.Equals(input.FormType))
                ) && 
                (
                    this.MerchantBackUrl == input.MerchantBackUrl ||
                    (this.MerchantBackUrl != null &&
                    this.MerchantBackUrl.Equals(input.MerchantBackUrl))
                ) && 
                (
                    this.MerchantHomeUrl == input.MerchantHomeUrl ||
                    (this.MerchantHomeUrl != null &&
                    this.MerchantHomeUrl.Equals(input.MerchantHomeUrl))
                ) && 
                (
                    this.MerchantNotifyUrl == input.MerchantNotifyUrl ||
                    (this.MerchantNotifyUrl != null &&
                    this.MerchantNotifyUrl.Equals(input.MerchantNotifyUrl))
                ) && 
                (
                    this.MerchantReturnUrl == input.MerchantReturnUrl ||
                    (this.MerchantReturnUrl != null &&
                    this.MerchantReturnUrl.Equals(input.MerchantReturnUrl))
                ) && 
                (
                    this.PaymentOptionRef == input.PaymentOptionRef ||
                    (this.PaymentOptionRef != null &&
                    this.PaymentOptionRef.Equals(input.PaymentOptionRef))
                ) && 
                (
                    this.ReportDelayInDays == input.ReportDelayInDays ||
                    (this.ReportDelayInDays != null &&
                    this.ReportDelayInDays.Equals(input.ReportDelayInDays))
                ) && 
                (
                    this.UserAgent == input.UserAgent ||
                    (this.UserAgent != null &&
                    this.UserAgent.Equals(input.UserAgent))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.AuthenticationOnly == input.AuthenticationOnly ||
                    (this.AuthenticationOnly != null &&
                    this.AuthenticationOnly.Equals(input.AuthenticationOnly))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Culture != null)
                    hashCode = hashCode * 59 + this.Culture.GetHashCode();
                if (this.FormType != null)
                    hashCode = hashCode * 59 + this.FormType.GetHashCode();
                if (this.MerchantBackUrl != null)
                    hashCode = hashCode * 59 + this.MerchantBackUrl.GetHashCode();
                if (this.MerchantHomeUrl != null)
                    hashCode = hashCode * 59 + this.MerchantHomeUrl.GetHashCode();
                if (this.MerchantNotifyUrl != null)
                    hashCode = hashCode * 59 + this.MerchantNotifyUrl.GetHashCode();
                if (this.MerchantReturnUrl != null)
                    hashCode = hashCode * 59 + this.MerchantReturnUrl.GetHashCode();
                if (this.PaymentOptionRef != null)
                    hashCode = hashCode * 59 + this.PaymentOptionRef.GetHashCode();
                if (this.ReportDelayInDays != null)
                    hashCode = hashCode * 59 + this.ReportDelayInDays.GetHashCode();
                if (this.UserAgent != null)
                    hashCode = hashCode * 59 + this.UserAgent.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.AuthenticationOnly != null)
                    hashCode = hashCode * 59 + this.AuthenticationOnly.GetHashCode();
                return hashCode;
            }
        }
    }

}
