/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = pachirapay.Connector.Client.OpenAPIDateConverter;

namespace pachirapay.Connector.Model
{
    /// <summary>
    /// All ValidationMode Overriden data
    /// </summary>
    [DataContract]
    public partial class ValidationModeOverride :  IEquatable<ValidationModeOverride>
    {
        /// <summary>
        /// The validation mode
        /// </summary>
        /// <value>The validation mode</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ValidationModeEnum
        {
            /// <summary>
            /// Enum Undefined for value: undefined
            /// </summary>
            [EnumMember(Value = "undefined")]
            Undefined = 1,

            /// <summary>
            /// Enum Auto for value: auto
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto = 2,

            /// <summary>
            /// Enum Manual for value: manual
            /// </summary>
            [EnumMember(Value = "manual")]
            Manual = 3

        }

        /// <summary>
        /// The validation mode
        /// </summary>
        /// <value>The validation mode</value>
        [DataMember(Name="validationMode", EmitDefaultValue=false)]
        public ValidationModeEnum ValidationMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationModeOverride" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ValidationModeOverride() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationModeOverride" /> class.
        /// </summary>
        /// <param name="captureDelay">The delay capture overriden.</param>
        /// <param name="validationMode">The validation mode (required).</param>
        public ValidationModeOverride(int? captureDelay = default(int?), ValidationModeEnum validationMode = default(ValidationModeEnum))
        {
            // to ensure "validationMode" is required (not null)
            if (validationMode == null)
            {
                throw new InvalidDataException("validationMode is a required property for ValidationModeOverride and cannot be null");
            }
            else
            {
                this.ValidationMode = validationMode;
            }
            
            this.CaptureDelay = captureDelay;
        }
        
        /// <summary>
        /// The delay capture overriden
        /// </summary>
        /// <value>The delay capture overriden</value>
        [DataMember(Name="captureDelay", EmitDefaultValue=false)]
        public int? CaptureDelay { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidationModeOverride {\n");
            sb.Append("  CaptureDelay: ").Append(CaptureDelay).Append("\n");
            sb.Append("  ValidationMode: ").Append(ValidationMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidationModeOverride);
        }

        /// <summary>
        /// Returns true if ValidationModeOverride instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidationModeOverride to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidationModeOverride input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CaptureDelay == input.CaptureDelay ||
                    (this.CaptureDelay != null &&
                    this.CaptureDelay.Equals(input.CaptureDelay))
                ) && 
                (
                    this.ValidationMode == input.ValidationMode ||
                    (this.ValidationMode != null &&
                    this.ValidationMode.Equals(input.ValidationMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CaptureDelay != null)
                    hashCode = hashCode * 59 + this.CaptureDelay.GetHashCode();
                if (this.ValidationMode != null)
                    hashCode = hashCode * 59 + this.ValidationMode.GetHashCode();
                return hashCode;
            }
        }
    }

}
