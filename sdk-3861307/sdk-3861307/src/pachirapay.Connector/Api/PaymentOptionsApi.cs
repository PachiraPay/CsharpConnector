/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using pachirapay.Connector.Client;
using pachirapay.Connector.Model;

namespace pachirapay.Connector.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentOptionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets payment options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>PaymentOptionsResponse</returns>
        PaymentOptionsResponse V1PaymentOptionsMerchantsByMerchantIdSitesByMerchantSiteIdGet (int? merchantId, string merchantSiteId, string authToken);

        /// <summary>
        /// Gets payment options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>ApiResponse of PaymentOptionsResponse</returns>
        ApiResponse<PaymentOptionsResponse> V1PaymentOptionsMerchantsByMerchantIdSitesByMerchantSiteIdGetWithHttpInfo (int? merchantId, string merchantSiteId, string authToken);
        /// <summary>
        /// Gets payment options for a context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOptionsRequest">The payment options request. (optional)</param>
        /// <returns>PaymentOptionsResponse</returns>
        PaymentOptionsResponse V1PaymentOptionsPost (string authToken, PaymentOptionsRequest paymentOptionsRequest = null);

        /// <summary>
        /// Gets payment options for a context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOptionsRequest">The payment options request. (optional)</param>
        /// <returns>ApiResponse of PaymentOptionsResponse</returns>
        ApiResponse<PaymentOptionsResponse> V1PaymentOptionsPostWithHttpInfo (string authToken, PaymentOptionsRequest paymentOptionsRequest = null);
        /// <summary>
        /// Validates eligibility
        /// </summary>
        /// <remarks>
        /// WARNING : NOT IMPLEMENTED YET.     Validates the eligibility of the given payment option, according to context.
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOptionEligibilityRequest">The payment option eligibility request. (optional)</param>
        /// <returns></returns>
        void V1PaymentOptionsValidateEligibilityPost (string authToken, Object paymentOptionEligibilityRequest = null);

        /// <summary>
        /// Validates eligibility
        /// </summary>
        /// <remarks>
        /// WARNING : NOT IMPLEMENTED YET.     Validates the eligibility of the given payment option, according to context.
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOptionEligibilityRequest">The payment option eligibility request. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1PaymentOptionsValidateEligibilityPostWithHttpInfo (string authToken, Object paymentOptionEligibilityRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets payment options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of PaymentOptionsResponse</returns>
        System.Threading.Tasks.Task<PaymentOptionsResponse> V1PaymentOptionsMerchantsByMerchantIdSitesByMerchantSiteIdGetAsync (int? merchantId, string merchantSiteId, string authToken);

        /// <summary>
        /// Gets payment options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of ApiResponse (PaymentOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentOptionsResponse>> V1PaymentOptionsMerchantsByMerchantIdSitesByMerchantSiteIdGetAsyncWithHttpInfo (int? merchantId, string merchantSiteId, string authToken);
        /// <summary>
        /// Gets payment options for a context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOptionsRequest">The payment options request. (optional)</param>
        /// <returns>Task of PaymentOptionsResponse</returns>
        System.Threading.Tasks.Task<PaymentOptionsResponse> V1PaymentOptionsPostAsync (string authToken, PaymentOptionsRequest paymentOptionsRequest = null);

        /// <summary>
        /// Gets payment options for a context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOptionsRequest">The payment options request. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentOptionsResponse>> V1PaymentOptionsPostAsyncWithHttpInfo (string authToken, PaymentOptionsRequest paymentOptionsRequest = null);
        /// <summary>
        /// Validates eligibility
        /// </summary>
        /// <remarks>
        /// WARNING : NOT IMPLEMENTED YET.     Validates the eligibility of the given payment option, according to context.
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOptionEligibilityRequest">The payment option eligibility request. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1PaymentOptionsValidateEligibilityPostAsync (string authToken, Object paymentOptionEligibilityRequest = null);

        /// <summary>
        /// Validates eligibility
        /// </summary>
        /// <remarks>
        /// WARNING : NOT IMPLEMENTED YET.     Validates the eligibility of the given payment option, according to context.
        /// </remarks>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOptionEligibilityRequest">The payment option eligibility request. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1PaymentOptionsValidateEligibilityPostAsyncWithHttpInfo (string authToken, Object paymentOptionEligibilityRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentOptionsApi : IPaymentOptionsApi
    {
        private pachirapay.Connector.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentOptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentOptionsApi(String basePath)
        {
            this.Configuration = new pachirapay.Connector.Client.Configuration { BasePath = basePath };

            ExceptionFactory = pachirapay.Connector.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentOptionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PaymentOptionsApi()
        {
            this.Configuration = pachirapay.Connector.Client.Configuration.Default;

            ExceptionFactory = pachirapay.Connector.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentOptionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentOptionsApi(pachirapay.Connector.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = pachirapay.Connector.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = pachirapay.Connector.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public pachirapay.Connector.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public pachirapay.Connector.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets payment options 
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>PaymentOptionsResponse</returns>
        public PaymentOptionsResponse V1PaymentOptionsMerchantsByMerchantIdSitesByMerchantSiteIdGet (int? merchantId, string merchantSiteId, string authToken)
        {
             ApiResponse<PaymentOptionsResponse> localVarResponse = V1PaymentOptionsMerchantsByMerchantIdSitesByMerchantSiteIdGetWithHttpInfo(merchantId, merchantSiteId, authToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets payment options 
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>ApiResponse of PaymentOptionsResponse</returns>
        public ApiResponse< PaymentOptionsResponse > V1PaymentOptionsMerchantsByMerchantIdSitesByMerchantSiteIdGetWithHttpInfo (int? merchantId, string merchantSiteId, string authToken)
        {
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling PaymentOptionsApi->V1PaymentOptionsMerchantsByMerchantIdSitesByMerchantSiteIdGet");
            // verify the required parameter 'merchantSiteId' is set
            if (merchantSiteId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSiteId' when calling PaymentOptionsApi->V1PaymentOptionsMerchantsByMerchantIdSitesByMerchantSiteIdGet");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentOptionsApi->V1PaymentOptionsMerchantsByMerchantIdSitesByMerchantSiteIdGet");

            var localVarPath = "./v1/payment-options/merchants/{merchantId}/sites/{merchantSiteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantId != null) localVarPathParams.Add("merchantId", this.Configuration.ApiClient.ParameterToString(merchantId)); // path parameter
            if (merchantSiteId != null) localVarPathParams.Add("merchantSiteId", this.Configuration.ApiClient.ParameterToString(merchantSiteId)); // path parameter
            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentOptionsMerchantsByMerchantIdSitesByMerchantSiteIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaymentOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentOptionsResponse)));
        }

        /// <summary>
        /// Gets payment options 
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of PaymentOptionsResponse</returns>
        public async System.Threading.Tasks.Task<PaymentOptionsResponse> V1PaymentOptionsMerchantsByMerchantIdSitesByMerchantSiteIdGetAsync (int? merchantId, string merchantSiteId, string authToken)
        {
             ApiResponse<PaymentOptionsResponse> localVarResponse = await V1PaymentOptionsMerchantsByMerchantIdSitesByMerchantSiteIdGetAsyncWithHttpInfo(merchantId, merchantSiteId, authToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets payment options 
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant identifier.</param>
        /// <param name="merchantSiteId">The merchant site identifier.</param>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <returns>Task of ApiResponse (PaymentOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentOptionsResponse>> V1PaymentOptionsMerchantsByMerchantIdSitesByMerchantSiteIdGetAsyncWithHttpInfo (int? merchantId, string merchantSiteId, string authToken)
        {
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling PaymentOptionsApi->V1PaymentOptionsMerchantsByMerchantIdSitesByMerchantSiteIdGet");
            // verify the required parameter 'merchantSiteId' is set
            if (merchantSiteId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSiteId' when calling PaymentOptionsApi->V1PaymentOptionsMerchantsByMerchantIdSitesByMerchantSiteIdGet");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentOptionsApi->V1PaymentOptionsMerchantsByMerchantIdSitesByMerchantSiteIdGet");

            var localVarPath = "./v1/payment-options/merchants/{merchantId}/sites/{merchantSiteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantId != null) localVarPathParams.Add("merchantId", this.Configuration.ApiClient.ParameterToString(merchantId)); // path parameter
            if (merchantSiteId != null) localVarPathParams.Add("merchantSiteId", this.Configuration.ApiClient.ParameterToString(merchantSiteId)); // path parameter
            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentOptionsMerchantsByMerchantIdSitesByMerchantSiteIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaymentOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentOptionsResponse)));
        }

        /// <summary>
        /// Gets payment options for a context 
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOptionsRequest">The payment options request. (optional)</param>
        /// <returns>PaymentOptionsResponse</returns>
        public PaymentOptionsResponse V1PaymentOptionsPost (string authToken, PaymentOptionsRequest paymentOptionsRequest = null)
        {
             ApiResponse<PaymentOptionsResponse> localVarResponse = V1PaymentOptionsPostWithHttpInfo(authToken, paymentOptionsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets payment options for a context 
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOptionsRequest">The payment options request. (optional)</param>
        /// <returns>ApiResponse of PaymentOptionsResponse</returns>
        public ApiResponse< PaymentOptionsResponse > V1PaymentOptionsPostWithHttpInfo (string authToken, PaymentOptionsRequest paymentOptionsRequest = null)
        {
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentOptionsApi->V1PaymentOptionsPost");

            var localVarPath = "./v1/payment-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (paymentOptionsRequest != null && paymentOptionsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentOptionsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentOptionsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentOptionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaymentOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentOptionsResponse)));
        }

        /// <summary>
        /// Gets payment options for a context 
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOptionsRequest">The payment options request. (optional)</param>
        /// <returns>Task of PaymentOptionsResponse</returns>
        public async System.Threading.Tasks.Task<PaymentOptionsResponse> V1PaymentOptionsPostAsync (string authToken, PaymentOptionsRequest paymentOptionsRequest = null)
        {
             ApiResponse<PaymentOptionsResponse> localVarResponse = await V1PaymentOptionsPostAsyncWithHttpInfo(authToken, paymentOptionsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets payment options for a context 
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOptionsRequest">The payment options request. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentOptionsResponse>> V1PaymentOptionsPostAsyncWithHttpInfo (string authToken, PaymentOptionsRequest paymentOptionsRequest = null)
        {
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentOptionsApi->V1PaymentOptionsPost");

            var localVarPath = "./v1/payment-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (paymentOptionsRequest != null && paymentOptionsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentOptionsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentOptionsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentOptionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaymentOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentOptionsResponse)));
        }

        /// <summary>
        /// Validates eligibility WARNING : NOT IMPLEMENTED YET.     Validates the eligibility of the given payment option, according to context.
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOptionEligibilityRequest">The payment option eligibility request. (optional)</param>
        /// <returns></returns>
        public void V1PaymentOptionsValidateEligibilityPost (string authToken, Object paymentOptionEligibilityRequest = null)
        {
             V1PaymentOptionsValidateEligibilityPostWithHttpInfo(authToken, paymentOptionEligibilityRequest);
        }

        /// <summary>
        /// Validates eligibility WARNING : NOT IMPLEMENTED YET.     Validates the eligibility of the given payment option, according to context.
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOptionEligibilityRequest">The payment option eligibility request. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1PaymentOptionsValidateEligibilityPostWithHttpInfo (string authToken, Object paymentOptionEligibilityRequest = null)
        {
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentOptionsApi->V1PaymentOptionsValidateEligibilityPost");

            var localVarPath = "./v1/payment-options/validateEligibility";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (paymentOptionEligibilityRequest != null && paymentOptionEligibilityRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentOptionEligibilityRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentOptionEligibilityRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentOptionsValidateEligibilityPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Validates eligibility WARNING : NOT IMPLEMENTED YET.     Validates the eligibility of the given payment option, according to context.
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOptionEligibilityRequest">The payment option eligibility request. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1PaymentOptionsValidateEligibilityPostAsync (string authToken, Object paymentOptionEligibilityRequest = null)
        {
             await V1PaymentOptionsValidateEligibilityPostAsyncWithHttpInfo(authToken, paymentOptionEligibilityRequest);

        }

        /// <summary>
        /// Validates eligibility WARNING : NOT IMPLEMENTED YET.     Validates the eligibility of the given payment option, according to context.
        /// </summary>
        /// <exception cref="pachirapay.Connector.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authToken">Gets or sets the authentication token.</param>
        /// <param name="paymentOptionEligibilityRequest">The payment option eligibility request. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1PaymentOptionsValidateEligibilityPostAsyncWithHttpInfo (string authToken, Object paymentOptionEligibilityRequest = null)
        {
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling PaymentOptionsApi->V1PaymentOptionsValidateEligibilityPost");

            var localVarPath = "./v1/payment-options/validateEligibility";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authToken != null) localVarHeaderParams.Add("authToken", this.Configuration.ApiClient.ParameterToString(authToken)); // header parameter
            if (paymentOptionEligibilityRequest != null && paymentOptionEligibilityRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentOptionEligibilityRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentOptionEligibilityRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentOptionsValidateEligibilityPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

    }
}
