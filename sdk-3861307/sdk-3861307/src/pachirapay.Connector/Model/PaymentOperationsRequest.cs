/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = pachirapay.Connector.Client.OpenAPIDateConverter;

namespace pachirapay.Connector.Model
{
    /// <summary>
    /// All Payment Operation data for the request
    /// </summary>
    [DataContract]
    public partial class PaymentOperationsRequest :  IEquatable<PaymentOperationsRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentOperationsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentOperationsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentOperationsRequest" /> class.
        /// </summary>
        /// <param name="merchantId">The merchant identifier (required).</param>
        /// <param name="merchantSiteId">The merchant site identifier. (required).</param>
        /// <param name="attempt">The number of attempts (useful for CAPTURE). (required).</param>
        /// <param name="rank">The rank concerned by the operation (required).</param>
        /// <param name="amount">The amount.</param>
        public PaymentOperationsRequest(int? merchantId = default(int?), string merchantSiteId = default(string), int? attempt = default(int?), int? rank = default(int?), long? amount = default(long?))
        {
            // to ensure "merchantId" is required (not null)
            if (merchantId == null)
            {
                throw new InvalidDataException("merchantId is a required property for PaymentOperationsRequest and cannot be null");
            }
            else
            {
                this.MerchantId = merchantId;
            }
            
            // to ensure "merchantSiteId" is required (not null)
            if (merchantSiteId == null)
            {
                throw new InvalidDataException("merchantSiteId is a required property for PaymentOperationsRequest and cannot be null");
            }
            else
            {
                this.MerchantSiteId = merchantSiteId;
            }
            
            // to ensure "attempt" is required (not null)
            if (attempt == null)
            {
                throw new InvalidDataException("attempt is a required property for PaymentOperationsRequest and cannot be null");
            }
            else
            {
                this.Attempt = attempt;
            }
            
            // to ensure "rank" is required (not null)
            if (rank == null)
            {
                throw new InvalidDataException("rank is a required property for PaymentOperationsRequest and cannot be null");
            }
            else
            {
                this.Rank = rank;
            }
            
            this.Amount = amount;
        }
        
        /// <summary>
        /// The merchant identifier
        /// </summary>
        /// <value>The merchant identifier</value>
        [DataMember(Name="merchantId", EmitDefaultValue=false)]
        public int? MerchantId { get; set; }

        /// <summary>
        /// The merchant site identifier.
        /// </summary>
        /// <value>The merchant site identifier.</value>
        [DataMember(Name="merchantSiteId", EmitDefaultValue=false)]
        public string MerchantSiteId { get; set; }

        /// <summary>
        /// The number of attempts (useful for CAPTURE).
        /// </summary>
        /// <value>The number of attempts (useful for CAPTURE).</value>
        [DataMember(Name="attempt", EmitDefaultValue=false)]
        public int? Attempt { get; set; }

        /// <summary>
        /// The rank concerned by the operation
        /// </summary>
        /// <value>The rank concerned by the operation</value>
        [DataMember(Name="rank", EmitDefaultValue=false)]
        public int? Rank { get; set; }

        /// <summary>
        /// The amount
        /// </summary>
        /// <value>The amount</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public long? Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentOperationsRequest {\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  MerchantSiteId: ").Append(MerchantSiteId).Append("\n");
            sb.Append("  Attempt: ").Append(Attempt).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentOperationsRequest);
        }

        /// <summary>
        /// Returns true if PaymentOperationsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentOperationsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentOperationsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.MerchantSiteId == input.MerchantSiteId ||
                    (this.MerchantSiteId != null &&
                    this.MerchantSiteId.Equals(input.MerchantSiteId))
                ) && 
                (
                    this.Attempt == input.Attempt ||
                    (this.Attempt != null &&
                    this.Attempt.Equals(input.Attempt))
                ) && 
                (
                    this.Rank == input.Rank ||
                    (this.Rank != null &&
                    this.Rank.Equals(input.Rank))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.MerchantSiteId != null)
                    hashCode = hashCode * 59 + this.MerchantSiteId.GetHashCode();
                if (this.Attempt != null)
                    hashCode = hashCode * 59 + this.Attempt.GetHashCode();
                if (this.Rank != null)
                    hashCode = hashCode * 59 + this.Rank.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                return hashCode;
            }
        }
    }

}
