/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = pachirapay.Connector.Client.OpenAPIDateConverter;

namespace pachirapay.Connector.Model
{
    /// <summary>
    /// StoredPaymentMethodResponse
    /// </summary>
    [DataContract]
    public partial class StoredPaymentMethodResponse :  IEquatable<StoredPaymentMethodResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoredPaymentMethodResponse" /> class.
        /// </summary>
        /// <param name="storedPaymentMethodList">Gets or sets the stored payment method list..</param>
        /// <param name="responseMessage">The global response message.</param>
        public StoredPaymentMethodResponse(List<StoredPaymentMethod> storedPaymentMethodList = default(List<StoredPaymentMethod>), string responseMessage = default(string))
        {
            this.StoredPaymentMethodList = storedPaymentMethodList;
            this.ResponseMessage = responseMessage;
        }
        
        /// <summary>
        /// Gets or sets the stored payment method list.
        /// </summary>
        /// <value>Gets or sets the stored payment method list.</value>
        [DataMember(Name="storedPaymentMethodList", EmitDefaultValue=false)]
        public List<StoredPaymentMethod> StoredPaymentMethodList { get; set; }

        /// <summary>
        /// The global response message
        /// </summary>
        /// <value>The global response message</value>
        [DataMember(Name="responseMessage", EmitDefaultValue=false)]
        public string ResponseMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoredPaymentMethodResponse {\n");
            sb.Append("  StoredPaymentMethodList: ").Append(StoredPaymentMethodList).Append("\n");
            sb.Append("  ResponseMessage: ").Append(ResponseMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoredPaymentMethodResponse);
        }

        /// <summary>
        /// Returns true if StoredPaymentMethodResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of StoredPaymentMethodResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoredPaymentMethodResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StoredPaymentMethodList == input.StoredPaymentMethodList ||
                    this.StoredPaymentMethodList != null &&
                    input.StoredPaymentMethodList != null &&
                    this.StoredPaymentMethodList.SequenceEqual(input.StoredPaymentMethodList)
                ) && 
                (
                    this.ResponseMessage == input.ResponseMessage ||
                    (this.ResponseMessage != null &&
                    this.ResponseMessage.Equals(input.ResponseMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StoredPaymentMethodList != null)
                    hashCode = hashCode * 59 + this.StoredPaymentMethodList.GetHashCode();
                if (this.ResponseMessage != null)
                    hashCode = hashCode * 59 + this.ResponseMessage.GetHashCode();
                return hashCode;
            }
        }
    }

}
