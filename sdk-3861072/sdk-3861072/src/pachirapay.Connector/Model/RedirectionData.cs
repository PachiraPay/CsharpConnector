/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = pachirapay.Connector.Client.OpenAPIDateConverter;

namespace pachirapay.Connector.Model
{
    /// <summary>
    /// All redirection data (3DS only)
    /// </summary>
    [DataContract]
    public partial class RedirectionData :  IEquatable<RedirectionData>
    {
        /// <summary>
        /// The redirection type (GET, POST)
        /// </summary>
        /// <value>The redirection type (GET, POST)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RedirectionTypeEnum
        {
            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum Get for value: get
            /// </summary>
            [EnumMember(Value = "get")]
            Get = 2,

            /// <summary>
            /// Enum Post for value: post
            /// </summary>
            [EnumMember(Value = "post")]
            Post = 3

        }

        /// <summary>
        /// The redirection type (GET, POST)
        /// </summary>
        /// <value>The redirection type (GET, POST)</value>
        [DataMember(Name="redirectionType", EmitDefaultValue=false)]
        public RedirectionTypeEnum? RedirectionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RedirectionData" /> class.
        /// </summary>
        /// <param name="redirectionUrl">The redirection url (ex 3DS acs server).</param>
        /// <param name="_params">All params for the redirection.</param>
        /// <param name="redirectionType">The redirection type (GET, POST).</param>
        public RedirectionData(string redirectionUrl = default(string), Dictionary<string, string> _params = default(Dictionary<string, string>), RedirectionTypeEnum? redirectionType = default(RedirectionTypeEnum?))
        {
            this.RedirectionUrl = redirectionUrl;
            this.Params = _params;
            this.RedirectionType = redirectionType;
        }
        
        /// <summary>
        /// The redirection url (ex 3DS acs server)
        /// </summary>
        /// <value>The redirection url (ex 3DS acs server)</value>
        [DataMember(Name="redirectionUrl", EmitDefaultValue=false)]
        public string RedirectionUrl { get; set; }

        /// <summary>
        /// All params for the redirection
        /// </summary>
        /// <value>All params for the redirection</value>
        [DataMember(Name="params", EmitDefaultValue=false)]
        public Dictionary<string, string> Params { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RedirectionData {\n");
            sb.Append("  RedirectionUrl: ").Append(RedirectionUrl).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  RedirectionType: ").Append(RedirectionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RedirectionData);
        }

        /// <summary>
        /// Returns true if RedirectionData instances are equal
        /// </summary>
        /// <param name="input">Instance of RedirectionData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RedirectionData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RedirectionUrl == input.RedirectionUrl ||
                    (this.RedirectionUrl != null &&
                    this.RedirectionUrl.Equals(input.RedirectionUrl))
                ) && 
                (
                    this.Params == input.Params ||
                    this.Params != null &&
                    input.Params != null &&
                    this.Params.SequenceEqual(input.Params)
                ) && 
                (
                    this.RedirectionType == input.RedirectionType ||
                    (this.RedirectionType != null &&
                    this.RedirectionType.Equals(input.RedirectionType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RedirectionUrl != null)
                    hashCode = hashCode * 59 + this.RedirectionUrl.GetHashCode();
                if (this.Params != null)
                    hashCode = hashCode * 59 + this.Params.GetHashCode();
                if (this.RedirectionType != null)
                    hashCode = hashCode * 59 + this.RedirectionType.GetHashCode();
                return hashCode;
            }
        }
    }

}
