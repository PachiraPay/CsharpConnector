/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = pachirapay.Connector.Client.OpenAPIDateConverter;

namespace pachirapay.Connector.Model
{
    /// <summary>
    /// Customer
    /// </summary>
    [DataContract]
    public partial class Customer :  IEquatable<Customer>
    {
        /// <summary>
        /// The customer civility.
        /// </summary>
        /// <value>The customer civility.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CivilityEnum
        {
            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum Mister for value: mister
            /// </summary>
            [EnumMember(Value = "mister")]
            Mister = 2,

            /// <summary>
            /// Enum Misses for value: misses
            /// </summary>
            [EnumMember(Value = "misses")]
            Misses = 3,

            /// <summary>
            /// Enum Miss for value: miss
            /// </summary>
            [EnumMember(Value = "miss")]
            Miss = 4

        }

        /// <summary>
        /// The customer civility.
        /// </summary>
        /// <value>The customer civility.</value>
        [DataMember(Name="civility", EmitDefaultValue=false)]
        public CivilityEnum? Civility { get; set; }
        /// <summary>
        /// The customer country code.
        /// </summary>
        /// <value>The customer country code.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CountryEnum
        {
            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum Aw for value: aw
            /// </summary>
            [EnumMember(Value = "aw")]
            Aw = 2,

            /// <summary>
            /// Enum Af for value: af
            /// </summary>
            [EnumMember(Value = "af")]
            Af = 3,

            /// <summary>
            /// Enum Ao for value: ao
            /// </summary>
            [EnumMember(Value = "ao")]
            Ao = 4,

            /// <summary>
            /// Enum Ai for value: ai
            /// </summary>
            [EnumMember(Value = "ai")]
            Ai = 5,

            /// <summary>
            /// Enum Al for value: al
            /// </summary>
            [EnumMember(Value = "al")]
            Al = 6,

            /// <summary>
            /// Enum Ad for value: ad
            /// </summary>
            [EnumMember(Value = "ad")]
            Ad = 7,

            /// <summary>
            /// Enum An for value: an
            /// </summary>
            [EnumMember(Value = "an")]
            An = 8,

            /// <summary>
            /// Enum Ae for value: ae
            /// </summary>
            [EnumMember(Value = "ae")]
            Ae = 9,

            /// <summary>
            /// Enum Ar for value: ar
            /// </summary>
            [EnumMember(Value = "ar")]
            Ar = 10,

            /// <summary>
            /// Enum Am for value: am
            /// </summary>
            [EnumMember(Value = "am")]
            Am = 11,

            /// <summary>
            /// Enum As for value: as
            /// </summary>
            [EnumMember(Value = "as")]
            As = 12,

            /// <summary>
            /// Enum Aq for value: aq
            /// </summary>
            [EnumMember(Value = "aq")]
            Aq = 13,

            /// <summary>
            /// Enum Tf for value: tf
            /// </summary>
            [EnumMember(Value = "tf")]
            Tf = 14,

            /// <summary>
            /// Enum Ag for value: ag
            /// </summary>
            [EnumMember(Value = "ag")]
            Ag = 15,

            /// <summary>
            /// Enum Au for value: au
            /// </summary>
            [EnumMember(Value = "au")]
            Au = 16,

            /// <summary>
            /// Enum At for value: at
            /// </summary>
            [EnumMember(Value = "at")]
            At = 17,

            /// <summary>
            /// Enum Az for value: az
            /// </summary>
            [EnumMember(Value = "az")]
            Az = 18,

            /// <summary>
            /// Enum Bi for value: bi
            /// </summary>
            [EnumMember(Value = "bi")]
            Bi = 19,

            /// <summary>
            /// Enum Be for value: be
            /// </summary>
            [EnumMember(Value = "be")]
            Be = 20,

            /// <summary>
            /// Enum Bj for value: bj
            /// </summary>
            [EnumMember(Value = "bj")]
            Bj = 21,

            /// <summary>
            /// Enum Bf for value: bf
            /// </summary>
            [EnumMember(Value = "bf")]
            Bf = 22,

            /// <summary>
            /// Enum Bd for value: bd
            /// </summary>
            [EnumMember(Value = "bd")]
            Bd = 23,

            /// <summary>
            /// Enum Bg for value: bg
            /// </summary>
            [EnumMember(Value = "bg")]
            Bg = 24,

            /// <summary>
            /// Enum Bh for value: bh
            /// </summary>
            [EnumMember(Value = "bh")]
            Bh = 25,

            /// <summary>
            /// Enum Bs for value: bs
            /// </summary>
            [EnumMember(Value = "bs")]
            Bs = 26,

            /// <summary>
            /// Enum Ba for value: ba
            /// </summary>
            [EnumMember(Value = "ba")]
            Ba = 27,

            /// <summary>
            /// Enum By for value: by
            /// </summary>
            [EnumMember(Value = "by")]
            By = 28,

            /// <summary>
            /// Enum Bz for value: bz
            /// </summary>
            [EnumMember(Value = "bz")]
            Bz = 29,

            /// <summary>
            /// Enum Bm for value: bm
            /// </summary>
            [EnumMember(Value = "bm")]
            Bm = 30,

            /// <summary>
            /// Enum Bo for value: bo
            /// </summary>
            [EnumMember(Value = "bo")]
            Bo = 31,

            /// <summary>
            /// Enum Br for value: br
            /// </summary>
            [EnumMember(Value = "br")]
            Br = 32,

            /// <summary>
            /// Enum Bb for value: bb
            /// </summary>
            [EnumMember(Value = "bb")]
            Bb = 33,

            /// <summary>
            /// Enum Bn for value: bn
            /// </summary>
            [EnumMember(Value = "bn")]
            Bn = 34,

            /// <summary>
            /// Enum Bt for value: bt
            /// </summary>
            [EnumMember(Value = "bt")]
            Bt = 35,

            /// <summary>
            /// Enum Bv for value: bv
            /// </summary>
            [EnumMember(Value = "bv")]
            Bv = 36,

            /// <summary>
            /// Enum Bw for value: bw
            /// </summary>
            [EnumMember(Value = "bw")]
            Bw = 37,

            /// <summary>
            /// Enum Cf for value: cf
            /// </summary>
            [EnumMember(Value = "cf")]
            Cf = 38,

            /// <summary>
            /// Enum Ca for value: ca
            /// </summary>
            [EnumMember(Value = "ca")]
            Ca = 39,

            /// <summary>
            /// Enum Cc for value: cc
            /// </summary>
            [EnumMember(Value = "cc")]
            Cc = 40,

            /// <summary>
            /// Enum Ch for value: ch
            /// </summary>
            [EnumMember(Value = "ch")]
            Ch = 41,

            /// <summary>
            /// Enum Cl for value: cl
            /// </summary>
            [EnumMember(Value = "cl")]
            Cl = 42,

            /// <summary>
            /// Enum Cn for value: cn
            /// </summary>
            [EnumMember(Value = "cn")]
            Cn = 43,

            /// <summary>
            /// Enum Ci for value: ci
            /// </summary>
            [EnumMember(Value = "ci")]
            Ci = 44,

            /// <summary>
            /// Enum Cm for value: cm
            /// </summary>
            [EnumMember(Value = "cm")]
            Cm = 45,

            /// <summary>
            /// Enum Cg for value: cg
            /// </summary>
            [EnumMember(Value = "cg")]
            Cg = 46,

            /// <summary>
            /// Enum Ck for value: ck
            /// </summary>
            [EnumMember(Value = "ck")]
            Ck = 47,

            /// <summary>
            /// Enum Co for value: co
            /// </summary>
            [EnumMember(Value = "co")]
            Co = 48,

            /// <summary>
            /// Enum Km for value: km
            /// </summary>
            [EnumMember(Value = "km")]
            Km = 49,

            /// <summary>
            /// Enum Cv for value: cv
            /// </summary>
            [EnumMember(Value = "cv")]
            Cv = 50,

            /// <summary>
            /// Enum Cr for value: cr
            /// </summary>
            [EnumMember(Value = "cr")]
            Cr = 51,

            /// <summary>
            /// Enum Cu for value: cu
            /// </summary>
            [EnumMember(Value = "cu")]
            Cu = 52,

            /// <summary>
            /// Enum Cx for value: cx
            /// </summary>
            [EnumMember(Value = "cx")]
            Cx = 53,

            /// <summary>
            /// Enum Ky for value: ky
            /// </summary>
            [EnumMember(Value = "ky")]
            Ky = 54,

            /// <summary>
            /// Enum Cy for value: cy
            /// </summary>
            [EnumMember(Value = "cy")]
            Cy = 55,

            /// <summary>
            /// Enum Cz for value: cz
            /// </summary>
            [EnumMember(Value = "cz")]
            Cz = 56,

            /// <summary>
            /// Enum De for value: de
            /// </summary>
            [EnumMember(Value = "de")]
            De = 57,

            /// <summary>
            /// Enum Dj for value: dj
            /// </summary>
            [EnumMember(Value = "dj")]
            Dj = 58,

            /// <summary>
            /// Enum Dm for value: dm
            /// </summary>
            [EnumMember(Value = "dm")]
            Dm = 59,

            /// <summary>
            /// Enum Dk for value: dk
            /// </summary>
            [EnumMember(Value = "dk")]
            Dk = 60,

            /// <summary>
            /// Enum Do for value: do
            /// </summary>
            [EnumMember(Value = "do")]
            Do = 61,

            /// <summary>
            /// Enum Dz for value: dz
            /// </summary>
            [EnumMember(Value = "dz")]
            Dz = 62,

            /// <summary>
            /// Enum Ec for value: ec
            /// </summary>
            [EnumMember(Value = "ec")]
            Ec = 63,

            /// <summary>
            /// Enum Eg for value: eg
            /// </summary>
            [EnumMember(Value = "eg")]
            Eg = 64,

            /// <summary>
            /// Enum Er for value: er
            /// </summary>
            [EnumMember(Value = "er")]
            Er = 65,

            /// <summary>
            /// Enum Eh for value: eh
            /// </summary>
            [EnumMember(Value = "eh")]
            Eh = 66,

            /// <summary>
            /// Enum Es for value: es
            /// </summary>
            [EnumMember(Value = "es")]
            Es = 67,

            /// <summary>
            /// Enum Ee for value: ee
            /// </summary>
            [EnumMember(Value = "ee")]
            Ee = 68,

            /// <summary>
            /// Enum Et for value: et
            /// </summary>
            [EnumMember(Value = "et")]
            Et = 69,

            /// <summary>
            /// Enum Fi for value: fi
            /// </summary>
            [EnumMember(Value = "fi")]
            Fi = 70,

            /// <summary>
            /// Enum Fj for value: fj
            /// </summary>
            [EnumMember(Value = "fj")]
            Fj = 71,

            /// <summary>
            /// Enum Fk for value: fk
            /// </summary>
            [EnumMember(Value = "fk")]
            Fk = 72,

            /// <summary>
            /// Enum Fr for value: fr
            /// </summary>
            [EnumMember(Value = "fr")]
            Fr = 73,

            /// <summary>
            /// Enum Fo for value: fo
            /// </summary>
            [EnumMember(Value = "fo")]
            Fo = 74,

            /// <summary>
            /// Enum Fm for value: fm
            /// </summary>
            [EnumMember(Value = "fm")]
            Fm = 75,

            /// <summary>
            /// Enum Ga for value: ga
            /// </summary>
            [EnumMember(Value = "ga")]
            Ga = 76,

            /// <summary>
            /// Enum Gb for value: gb
            /// </summary>
            [EnumMember(Value = "gb")]
            Gb = 77,

            /// <summary>
            /// Enum Ge for value: ge
            /// </summary>
            [EnumMember(Value = "ge")]
            Ge = 78,

            /// <summary>
            /// Enum Gh for value: gh
            /// </summary>
            [EnumMember(Value = "gh")]
            Gh = 79,

            /// <summary>
            /// Enum Gi for value: gi
            /// </summary>
            [EnumMember(Value = "gi")]
            Gi = 80,

            /// <summary>
            /// Enum Gn for value: gn
            /// </summary>
            [EnumMember(Value = "gn")]
            Gn = 81,

            /// <summary>
            /// Enum Gp for value: gp
            /// </summary>
            [EnumMember(Value = "gp")]
            Gp = 82,

            /// <summary>
            /// Enum Gm for value: gm
            /// </summary>
            [EnumMember(Value = "gm")]
            Gm = 83,

            /// <summary>
            /// Enum Gw for value: gw
            /// </summary>
            [EnumMember(Value = "gw")]
            Gw = 84,

            /// <summary>
            /// Enum Gq for value: gq
            /// </summary>
            [EnumMember(Value = "gq")]
            Gq = 85,

            /// <summary>
            /// Enum Gr for value: gr
            /// </summary>
            [EnumMember(Value = "gr")]
            Gr = 86,

            /// <summary>
            /// Enum Gd for value: gd
            /// </summary>
            [EnumMember(Value = "gd")]
            Gd = 87,

            /// <summary>
            /// Enum Gl for value: gl
            /// </summary>
            [EnumMember(Value = "gl")]
            Gl = 88,

            /// <summary>
            /// Enum Gt for value: gt
            /// </summary>
            [EnumMember(Value = "gt")]
            Gt = 89,

            /// <summary>
            /// Enum Gf for value: gf
            /// </summary>
            [EnumMember(Value = "gf")]
            Gf = 90,

            /// <summary>
            /// Enum Gu for value: gu
            /// </summary>
            [EnumMember(Value = "gu")]
            Gu = 91,

            /// <summary>
            /// Enum Gy for value: gy
            /// </summary>
            [EnumMember(Value = "gy")]
            Gy = 92,

            /// <summary>
            /// Enum Hk for value: hk
            /// </summary>
            [EnumMember(Value = "hk")]
            Hk = 93,

            /// <summary>
            /// Enum Hm for value: hm
            /// </summary>
            [EnumMember(Value = "hm")]
            Hm = 94,

            /// <summary>
            /// Enum Hn for value: hn
            /// </summary>
            [EnumMember(Value = "hn")]
            Hn = 95,

            /// <summary>
            /// Enum Hr for value: hr
            /// </summary>
            [EnumMember(Value = "hr")]
            Hr = 96,

            /// <summary>
            /// Enum Ht for value: ht
            /// </summary>
            [EnumMember(Value = "ht")]
            Ht = 97,

            /// <summary>
            /// Enum Hu for value: hu
            /// </summary>
            [EnumMember(Value = "hu")]
            Hu = 98,

            /// <summary>
            /// Enum Id for value: id
            /// </summary>
            [EnumMember(Value = "id")]
            Id = 99,

            /// <summary>
            /// Enum In for value: in
            /// </summary>
            [EnumMember(Value = "in")]
            In = 100,

            /// <summary>
            /// Enum Io for value: io
            /// </summary>
            [EnumMember(Value = "io")]
            Io = 101,

            /// <summary>
            /// Enum Ie for value: ie
            /// </summary>
            [EnumMember(Value = "ie")]
            Ie = 102,

            /// <summary>
            /// Enum Ir for value: ir
            /// </summary>
            [EnumMember(Value = "ir")]
            Ir = 103,

            /// <summary>
            /// Enum Iq for value: iq
            /// </summary>
            [EnumMember(Value = "iq")]
            Iq = 104,

            /// <summary>
            /// Enum Is for value: is
            /// </summary>
            [EnumMember(Value = "is")]
            Is = 105,

            /// <summary>
            /// Enum Il for value: il
            /// </summary>
            [EnumMember(Value = "il")]
            Il = 106,

            /// <summary>
            /// Enum It for value: it
            /// </summary>
            [EnumMember(Value = "it")]
            It = 107,

            /// <summary>
            /// Enum Jm for value: jm
            /// </summary>
            [EnumMember(Value = "jm")]
            Jm = 108,

            /// <summary>
            /// Enum Jo for value: jo
            /// </summary>
            [EnumMember(Value = "jo")]
            Jo = 109,

            /// <summary>
            /// Enum Jp for value: jp
            /// </summary>
            [EnumMember(Value = "jp")]
            Jp = 110,

            /// <summary>
            /// Enum Kz for value: kz
            /// </summary>
            [EnumMember(Value = "kz")]
            Kz = 111,

            /// <summary>
            /// Enum Ke for value: ke
            /// </summary>
            [EnumMember(Value = "ke")]
            Ke = 112,

            /// <summary>
            /// Enum Kg for value: kg
            /// </summary>
            [EnumMember(Value = "kg")]
            Kg = 113,

            /// <summary>
            /// Enum Kh for value: kh
            /// </summary>
            [EnumMember(Value = "kh")]
            Kh = 114,

            /// <summary>
            /// Enum Ki for value: ki
            /// </summary>
            [EnumMember(Value = "ki")]
            Ki = 115,

            /// <summary>
            /// Enum Kn for value: kn
            /// </summary>
            [EnumMember(Value = "kn")]
            Kn = 116,

            /// <summary>
            /// Enum Kr for value: kr
            /// </summary>
            [EnumMember(Value = "kr")]
            Kr = 117,

            /// <summary>
            /// Enum Kw for value: kw
            /// </summary>
            [EnumMember(Value = "kw")]
            Kw = 118,

            /// <summary>
            /// Enum La for value: la
            /// </summary>
            [EnumMember(Value = "la")]
            La = 119,

            /// <summary>
            /// Enum Lb for value: lb
            /// </summary>
            [EnumMember(Value = "lb")]
            Lb = 120,

            /// <summary>
            /// Enum Lr for value: lr
            /// </summary>
            [EnumMember(Value = "lr")]
            Lr = 121,

            /// <summary>
            /// Enum Ly for value: ly
            /// </summary>
            [EnumMember(Value = "ly")]
            Ly = 122,

            /// <summary>
            /// Enum Lc for value: lc
            /// </summary>
            [EnumMember(Value = "lc")]
            Lc = 123,

            /// <summary>
            /// Enum Li for value: li
            /// </summary>
            [EnumMember(Value = "li")]
            Li = 124,

            /// <summary>
            /// Enum Lk for value: lk
            /// </summary>
            [EnumMember(Value = "lk")]
            Lk = 125,

            /// <summary>
            /// Enum Ls for value: ls
            /// </summary>
            [EnumMember(Value = "ls")]
            Ls = 126,

            /// <summary>
            /// Enum Lt for value: lt
            /// </summary>
            [EnumMember(Value = "lt")]
            Lt = 127,

            /// <summary>
            /// Enum Lu for value: lu
            /// </summary>
            [EnumMember(Value = "lu")]
            Lu = 128,

            /// <summary>
            /// Enum Lv for value: lv
            /// </summary>
            [EnumMember(Value = "lv")]
            Lv = 129,

            /// <summary>
            /// Enum Mo for value: mo
            /// </summary>
            [EnumMember(Value = "mo")]
            Mo = 130,

            /// <summary>
            /// Enum Ma for value: ma
            /// </summary>
            [EnumMember(Value = "ma")]
            Ma = 131,

            /// <summary>
            /// Enum Mc for value: mc
            /// </summary>
            [EnumMember(Value = "mc")]
            Mc = 132,

            /// <summary>
            /// Enum Md for value: md
            /// </summary>
            [EnumMember(Value = "md")]
            Md = 133,

            /// <summary>
            /// Enum Mg for value: mg
            /// </summary>
            [EnumMember(Value = "mg")]
            Mg = 134,

            /// <summary>
            /// Enum Mv for value: mv
            /// </summary>
            [EnumMember(Value = "mv")]
            Mv = 135,

            /// <summary>
            /// Enum Mx for value: mx
            /// </summary>
            [EnumMember(Value = "mx")]
            Mx = 136,

            /// <summary>
            /// Enum Mh for value: mh
            /// </summary>
            [EnumMember(Value = "mh")]
            Mh = 137,

            /// <summary>
            /// Enum Mk for value: mk
            /// </summary>
            [EnumMember(Value = "mk")]
            Mk = 138,

            /// <summary>
            /// Enum Ml for value: ml
            /// </summary>
            [EnumMember(Value = "ml")]
            Ml = 139,

            /// <summary>
            /// Enum Mt for value: mt
            /// </summary>
            [EnumMember(Value = "mt")]
            Mt = 140,

            /// <summary>
            /// Enum Mm for value: mm
            /// </summary>
            [EnumMember(Value = "mm")]
            Mm = 141,

            /// <summary>
            /// Enum Mn for value: mn
            /// </summary>
            [EnumMember(Value = "mn")]
            Mn = 142,

            /// <summary>
            /// Enum Mp for value: mp
            /// </summary>
            [EnumMember(Value = "mp")]
            Mp = 143,

            /// <summary>
            /// Enum Mz for value: mz
            /// </summary>
            [EnumMember(Value = "mz")]
            Mz = 144,

            /// <summary>
            /// Enum Mr for value: mr
            /// </summary>
            [EnumMember(Value = "mr")]
            Mr = 145,

            /// <summary>
            /// Enum Ms for value: ms
            /// </summary>
            [EnumMember(Value = "ms")]
            Ms = 146,

            /// <summary>
            /// Enum Mq for value: mq
            /// </summary>
            [EnumMember(Value = "mq")]
            Mq = 147,

            /// <summary>
            /// Enum Mu for value: mu
            /// </summary>
            [EnumMember(Value = "mu")]
            Mu = 148,

            /// <summary>
            /// Enum Mw for value: mw
            /// </summary>
            [EnumMember(Value = "mw")]
            Mw = 149,

            /// <summary>
            /// Enum My for value: my
            /// </summary>
            [EnumMember(Value = "my")]
            My = 150,

            /// <summary>
            /// Enum Yt for value: yt
            /// </summary>
            [EnumMember(Value = "yt")]
            Yt = 151,

            /// <summary>
            /// Enum Na for value: na
            /// </summary>
            [EnumMember(Value = "na")]
            Na = 152,

            /// <summary>
            /// Enum Nc for value: nc
            /// </summary>
            [EnumMember(Value = "nc")]
            Nc = 153,

            /// <summary>
            /// Enum Ne for value: ne
            /// </summary>
            [EnumMember(Value = "ne")]
            Ne = 154,

            /// <summary>
            /// Enum Nf for value: nf
            /// </summary>
            [EnumMember(Value = "nf")]
            Nf = 155,

            /// <summary>
            /// Enum Ng for value: ng
            /// </summary>
            [EnumMember(Value = "ng")]
            Ng = 156,

            /// <summary>
            /// Enum Ni for value: ni
            /// </summary>
            [EnumMember(Value = "ni")]
            Ni = 157,

            /// <summary>
            /// Enum Nu for value: nu
            /// </summary>
            [EnumMember(Value = "nu")]
            Nu = 158,

            /// <summary>
            /// Enum Nl for value: nl
            /// </summary>
            [EnumMember(Value = "nl")]
            Nl = 159,

            /// <summary>
            /// Enum No for value: no
            /// </summary>
            [EnumMember(Value = "no")]
            No = 160,

            /// <summary>
            /// Enum Np for value: np
            /// </summary>
            [EnumMember(Value = "np")]
            Np = 161,

            /// <summary>
            /// Enum Nr for value: nr
            /// </summary>
            [EnumMember(Value = "nr")]
            Nr = 162,

            /// <summary>
            /// Enum Nz for value: nz
            /// </summary>
            [EnumMember(Value = "nz")]
            Nz = 163,

            /// <summary>
            /// Enum Om for value: om
            /// </summary>
            [EnumMember(Value = "om")]
            Om = 164,

            /// <summary>
            /// Enum Pk for value: pk
            /// </summary>
            [EnumMember(Value = "pk")]
            Pk = 165,

            /// <summary>
            /// Enum Pa for value: pa
            /// </summary>
            [EnumMember(Value = "pa")]
            Pa = 166,

            /// <summary>
            /// Enum Pn for value: pn
            /// </summary>
            [EnumMember(Value = "pn")]
            Pn = 167,

            /// <summary>
            /// Enum Pe for value: pe
            /// </summary>
            [EnumMember(Value = "pe")]
            Pe = 168,

            /// <summary>
            /// Enum Ph for value: ph
            /// </summary>
            [EnumMember(Value = "ph")]
            Ph = 169,

            /// <summary>
            /// Enum Pw for value: pw
            /// </summary>
            [EnumMember(Value = "pw")]
            Pw = 170,

            /// <summary>
            /// Enum Pg for value: pg
            /// </summary>
            [EnumMember(Value = "pg")]
            Pg = 171,

            /// <summary>
            /// Enum Pl for value: pl
            /// </summary>
            [EnumMember(Value = "pl")]
            Pl = 172,

            /// <summary>
            /// Enum Pr for value: pr
            /// </summary>
            [EnumMember(Value = "pr")]
            Pr = 173,

            /// <summary>
            /// Enum Kp for value: kp
            /// </summary>
            [EnumMember(Value = "kp")]
            Kp = 174,

            /// <summary>
            /// Enum Pt for value: pt
            /// </summary>
            [EnumMember(Value = "pt")]
            Pt = 175,

            /// <summary>
            /// Enum Py for value: py
            /// </summary>
            [EnumMember(Value = "py")]
            Py = 176,

            /// <summary>
            /// Enum Pf for value: pf
            /// </summary>
            [EnumMember(Value = "pf")]
            Pf = 177,

            /// <summary>
            /// Enum Qa for value: qa
            /// </summary>
            [EnumMember(Value = "qa")]
            Qa = 178,

            /// <summary>
            /// Enum Re for value: re
            /// </summary>
            [EnumMember(Value = "re")]
            Re = 179,

            /// <summary>
            /// Enum Ro for value: ro
            /// </summary>
            [EnumMember(Value = "ro")]
            Ro = 180,

            /// <summary>
            /// Enum Ru for value: ru
            /// </summary>
            [EnumMember(Value = "ru")]
            Ru = 181,

            /// <summary>
            /// Enum Rw for value: rw
            /// </summary>
            [EnumMember(Value = "rw")]
            Rw = 182,

            /// <summary>
            /// Enum Sa for value: sa
            /// </summary>
            [EnumMember(Value = "sa")]
            Sa = 183,

            /// <summary>
            /// Enum Sd for value: sd
            /// </summary>
            [EnumMember(Value = "sd")]
            Sd = 184,

            /// <summary>
            /// Enum Sn for value: sn
            /// </summary>
            [EnumMember(Value = "sn")]
            Sn = 185,

            /// <summary>
            /// Enum Sg for value: sg
            /// </summary>
            [EnumMember(Value = "sg")]
            Sg = 186,

            /// <summary>
            /// Enum Gs for value: gs
            /// </summary>
            [EnumMember(Value = "gs")]
            Gs = 187,

            /// <summary>
            /// Enum Sh for value: sh
            /// </summary>
            [EnumMember(Value = "sh")]
            Sh = 188,

            /// <summary>
            /// Enum Sj for value: sj
            /// </summary>
            [EnumMember(Value = "sj")]
            Sj = 189,

            /// <summary>
            /// Enum Sb for value: sb
            /// </summary>
            [EnumMember(Value = "sb")]
            Sb = 190,

            /// <summary>
            /// Enum Sl for value: sl
            /// </summary>
            [EnumMember(Value = "sl")]
            Sl = 191,

            /// <summary>
            /// Enum Sv for value: sv
            /// </summary>
            [EnumMember(Value = "sv")]
            Sv = 192,

            /// <summary>
            /// Enum Sm for value: sm
            /// </summary>
            [EnumMember(Value = "sm")]
            Sm = 193,

            /// <summary>
            /// Enum So for value: so
            /// </summary>
            [EnumMember(Value = "so")]
            So = 194,

            /// <summary>
            /// Enum Pm for value: pm
            /// </summary>
            [EnumMember(Value = "pm")]
            Pm = 195,

            /// <summary>
            /// Enum St for value: st
            /// </summary>
            [EnumMember(Value = "st")]
            St = 196,

            /// <summary>
            /// Enum Sr for value: sr
            /// </summary>
            [EnumMember(Value = "sr")]
            Sr = 197,

            /// <summary>
            /// Enum Sk for value: sk
            /// </summary>
            [EnumMember(Value = "sk")]
            Sk = 198,

            /// <summary>
            /// Enum Si for value: si
            /// </summary>
            [EnumMember(Value = "si")]
            Si = 199,

            /// <summary>
            /// Enum Se for value: se
            /// </summary>
            [EnumMember(Value = "se")]
            Se = 200,

            /// <summary>
            /// Enum Sz for value: sz
            /// </summary>
            [EnumMember(Value = "sz")]
            Sz = 201,

            /// <summary>
            /// Enum Sc for value: sc
            /// </summary>
            [EnumMember(Value = "sc")]
            Sc = 202,

            /// <summary>
            /// Enum Sy for value: sy
            /// </summary>
            [EnumMember(Value = "sy")]
            Sy = 203,

            /// <summary>
            /// Enum Tc for value: tc
            /// </summary>
            [EnumMember(Value = "tc")]
            Tc = 204,

            /// <summary>
            /// Enum Td for value: td
            /// </summary>
            [EnumMember(Value = "td")]
            Td = 205,

            /// <summary>
            /// Enum Tg for value: tg
            /// </summary>
            [EnumMember(Value = "tg")]
            Tg = 206,

            /// <summary>
            /// Enum Th for value: th
            /// </summary>
            [EnumMember(Value = "th")]
            Th = 207,

            /// <summary>
            /// Enum Tj for value: tj
            /// </summary>
            [EnumMember(Value = "tj")]
            Tj = 208,

            /// <summary>
            /// Enum Tk for value: tk
            /// </summary>
            [EnumMember(Value = "tk")]
            Tk = 209,

            /// <summary>
            /// Enum Tm for value: tm
            /// </summary>
            [EnumMember(Value = "tm")]
            Tm = 210,

            /// <summary>
            /// Enum Tp for value: tp
            /// </summary>
            [EnumMember(Value = "tp")]
            Tp = 211,

            /// <summary>
            /// Enum To for value: to
            /// </summary>
            [EnumMember(Value = "to")]
            To = 212,

            /// <summary>
            /// Enum Tt for value: tt
            /// </summary>
            [EnumMember(Value = "tt")]
            Tt = 213,

            /// <summary>
            /// Enum Tn for value: tn
            /// </summary>
            [EnumMember(Value = "tn")]
            Tn = 214,

            /// <summary>
            /// Enum Tr for value: tr
            /// </summary>
            [EnumMember(Value = "tr")]
            Tr = 215,

            /// <summary>
            /// Enum Tv for value: tv
            /// </summary>
            [EnumMember(Value = "tv")]
            Tv = 216,

            /// <summary>
            /// Enum Tw for value: tw
            /// </summary>
            [EnumMember(Value = "tw")]
            Tw = 217,

            /// <summary>
            /// Enum Tz for value: tz
            /// </summary>
            [EnumMember(Value = "tz")]
            Tz = 218,

            /// <summary>
            /// Enum Ug for value: ug
            /// </summary>
            [EnumMember(Value = "ug")]
            Ug = 219,

            /// <summary>
            /// Enum Ua for value: ua
            /// </summary>
            [EnumMember(Value = "ua")]
            Ua = 220,

            /// <summary>
            /// Enum Um for value: um
            /// </summary>
            [EnumMember(Value = "um")]
            Um = 221,

            /// <summary>
            /// Enum Uy for value: uy
            /// </summary>
            [EnumMember(Value = "uy")]
            Uy = 222,

            /// <summary>
            /// Enum Us for value: us
            /// </summary>
            [EnumMember(Value = "us")]
            Us = 223,

            /// <summary>
            /// Enum Uz for value: uz
            /// </summary>
            [EnumMember(Value = "uz")]
            Uz = 224,

            /// <summary>
            /// Enum Va for value: va
            /// </summary>
            [EnumMember(Value = "va")]
            Va = 225,

            /// <summary>
            /// Enum Vc for value: vc
            /// </summary>
            [EnumMember(Value = "vc")]
            Vc = 226,

            /// <summary>
            /// Enum Ve for value: ve
            /// </summary>
            [EnumMember(Value = "ve")]
            Ve = 227,

            /// <summary>
            /// Enum Vg for value: vg
            /// </summary>
            [EnumMember(Value = "vg")]
            Vg = 228,

            /// <summary>
            /// Enum Vi for value: vi
            /// </summary>
            [EnumMember(Value = "vi")]
            Vi = 229,

            /// <summary>
            /// Enum Vn for value: vn
            /// </summary>
            [EnumMember(Value = "vn")]
            Vn = 230,

            /// <summary>
            /// Enum Vu for value: vu
            /// </summary>
            [EnumMember(Value = "vu")]
            Vu = 231,

            /// <summary>
            /// Enum Wf for value: wf
            /// </summary>
            [EnumMember(Value = "wf")]
            Wf = 232,

            /// <summary>
            /// Enum Ws for value: ws
            /// </summary>
            [EnumMember(Value = "ws")]
            Ws = 233,

            /// <summary>
            /// Enum Ye for value: ye
            /// </summary>
            [EnumMember(Value = "ye")]
            Ye = 234,

            /// <summary>
            /// Enum Za for value: za
            /// </summary>
            [EnumMember(Value = "za")]
            Za = 235,

            /// <summary>
            /// Enum Zm for value: zm
            /// </summary>
            [EnumMember(Value = "zm")]
            Zm = 236,

            /// <summary>
            /// Enum Zw for value: zw
            /// </summary>
            [EnumMember(Value = "zw")]
            Zw = 237

        }

        /// <summary>
        /// The customer country code.
        /// </summary>
        /// <value>The customer country code.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public CountryEnum? Country { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Customer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer" /> class.
        /// </summary>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="birthDate">The customer birth date..</param>
        /// <param name="civility">The customer civility..</param>
        /// <param name="country">The customer country code..</param>
        /// <param name="customerIp">The customer IP.   Optional, if not set it will be retrieved during the first load of the payment session into the customer browser..</param>
        /// <param name="customerRef">The merchant&#39;s customer reference (external identifier).  This field is mandatory, especially if you want store payment method. If so, stored payment methods will be linked to this customer reference. (required).</param>
        /// <param name="deliveryAddress">deliveryAddress.</param>
        /// <param name="email">The customer email.  Useful for specifics payment methods like PayPal..</param>
        /// <param name="firstName">The customer first name..</param>
        /// <param name="lastName">The customer last name..</param>
        /// <param name="mobilePhone">The customer mobile phone number..</param>
        /// <param name="phone">The customer phone number..</param>
        public Customer(ShippingAddress billingAddress = default(ShippingAddress), DateTime? birthDate = default(DateTime?), CivilityEnum? civility = default(CivilityEnum?), CountryEnum? country = default(CountryEnum?), string customerIp = default(string), string customerRef = default(string), ShippingAddress deliveryAddress = default(ShippingAddress), string email = default(string), string firstName = default(string), string lastName = default(string), string mobilePhone = default(string), string phone = default(string))
        {
            // to ensure "customerRef" is required (not null)
            if (customerRef == null)
            {
                throw new InvalidDataException("customerRef is a required property for Customer and cannot be null");
            }
            else
            {
                this.CustomerRef = customerRef;
            }
            
            this.BillingAddress = billingAddress;
            this.BirthDate = birthDate;
            this.Civility = civility;
            this.Country = country;
            this.CustomerIp = customerIp;
            this.DeliveryAddress = deliveryAddress;
            this.Email = email;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.MobilePhone = mobilePhone;
            this.Phone = phone;
        }
        
        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name="billingAddress", EmitDefaultValue=false)]
        public ShippingAddress BillingAddress { get; set; }

        /// <summary>
        /// The customer birth date.
        /// </summary>
        /// <value>The customer birth date.</value>
        [DataMember(Name="birthDate", EmitDefaultValue=false)]
        public DateTime? BirthDate { get; set; }



        /// <summary>
        /// The customer IP.   Optional, if not set it will be retrieved during the first load of the payment session into the customer browser.
        /// </summary>
        /// <value>The customer IP.   Optional, if not set it will be retrieved during the first load of the payment session into the customer browser.</value>
        [DataMember(Name="customerIp", EmitDefaultValue=false)]
        public string CustomerIp { get; set; }

        /// <summary>
        /// The merchant&#39;s customer reference (external identifier).  This field is mandatory, especially if you want store payment method. If so, stored payment methods will be linked to this customer reference.
        /// </summary>
        /// <value>The merchant&#39;s customer reference (external identifier).  This field is mandatory, especially if you want store payment method. If so, stored payment methods will be linked to this customer reference.</value>
        [DataMember(Name="customerRef", EmitDefaultValue=false)]
        public string CustomerRef { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryAddress
        /// </summary>
        [DataMember(Name="deliveryAddress", EmitDefaultValue=false)]
        public ShippingAddress DeliveryAddress { get; set; }

        /// <summary>
        /// The customer email.  Useful for specifics payment methods like PayPal.
        /// </summary>
        /// <value>The customer email.  Useful for specifics payment methods like PayPal.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The customer first name.
        /// </summary>
        /// <value>The customer first name.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The customer last name.
        /// </summary>
        /// <value>The customer last name.</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// The customer mobile phone number.
        /// </summary>
        /// <value>The customer mobile phone number.</value>
        [DataMember(Name="mobilePhone", EmitDefaultValue=false)]
        public string MobilePhone { get; set; }

        /// <summary>
        /// The customer phone number.
        /// </summary>
        /// <value>The customer phone number.</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Customer {\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  Civility: ").Append(Civility).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CustomerIp: ").Append(CustomerIp).Append("\n");
            sb.Append("  CustomerRef: ").Append(CustomerRef).Append("\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Customer);
        }

        /// <summary>
        /// Returns true if Customer instances are equal
        /// </summary>
        /// <param name="input">Instance of Customer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Customer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.Civility == input.Civility ||
                    (this.Civility != null &&
                    this.Civility.Equals(input.Civility))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.CustomerIp == input.CustomerIp ||
                    (this.CustomerIp != null &&
                    this.CustomerIp.Equals(input.CustomerIp))
                ) && 
                (
                    this.CustomerRef == input.CustomerRef ||
                    (this.CustomerRef != null &&
                    this.CustomerRef.Equals(input.CustomerRef))
                ) && 
                (
                    this.DeliveryAddress == input.DeliveryAddress ||
                    (this.DeliveryAddress != null &&
                    this.DeliveryAddress.Equals(input.DeliveryAddress))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.MobilePhone == input.MobilePhone ||
                    (this.MobilePhone != null &&
                    this.MobilePhone.Equals(input.MobilePhone))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillingAddress != null)
                    hashCode = hashCode * 59 + this.BillingAddress.GetHashCode();
                if (this.BirthDate != null)
                    hashCode = hashCode * 59 + this.BirthDate.GetHashCode();
                if (this.Civility != null)
                    hashCode = hashCode * 59 + this.Civility.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.CustomerIp != null)
                    hashCode = hashCode * 59 + this.CustomerIp.GetHashCode();
                if (this.CustomerRef != null)
                    hashCode = hashCode * 59 + this.CustomerRef.GetHashCode();
                if (this.DeliveryAddress != null)
                    hashCode = hashCode * 59 + this.DeliveryAddress.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.MobilePhone != null)
                    hashCode = hashCode * 59 + this.MobilePhone.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                return hashCode;
            }
        }
    }

}
