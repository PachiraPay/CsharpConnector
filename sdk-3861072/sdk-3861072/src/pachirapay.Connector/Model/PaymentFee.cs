/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = pachirapay.Connector.Client.OpenAPIDateConverter;

namespace pachirapay.Connector.Model
{
    /// <summary>
    /// All payment fee data
    /// </summary>
    [DataContract]
    public partial class PaymentFee :  IEquatable<PaymentFee>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentFee" /> class.
        /// </summary>
        /// <param name="minAmount">The minimum amount allowed.</param>
        /// <param name="maxAmount">The maximum amount allowed.</param>
        /// <param name="rate">The rate.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="startDate">The start date.</param>
        /// <param name="endDate">The end date.</param>
        /// <param name="reportDelayMin">The minimum report delay.</param>
        /// <param name="reportDelayMax">The maximum report delay.</param>
        public PaymentFee(long? minAmount = default(long?), long? maxAmount = default(long?), int? rate = default(int?), long? amount = default(long?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? reportDelayMin = default(int?), int? reportDelayMax = default(int?))
        {
            this.MinAmount = minAmount;
            this.MaxAmount = maxAmount;
            this.Rate = rate;
            this.Amount = amount;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.ReportDelayMin = reportDelayMin;
            this.ReportDelayMax = reportDelayMax;
        }
        
        /// <summary>
        /// The minimum amount allowed
        /// </summary>
        /// <value>The minimum amount allowed</value>
        [DataMember(Name="minAmount", EmitDefaultValue=false)]
        public long? MinAmount { get; set; }

        /// <summary>
        /// The maximum amount allowed
        /// </summary>
        /// <value>The maximum amount allowed</value>
        [DataMember(Name="maxAmount", EmitDefaultValue=false)]
        public long? MaxAmount { get; set; }

        /// <summary>
        /// The rate
        /// </summary>
        /// <value>The rate</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public int? Rate { get; set; }

        /// <summary>
        /// The amount
        /// </summary>
        /// <value>The amount</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public long? Amount { get; set; }

        /// <summary>
        /// The start date
        /// </summary>
        /// <value>The start date</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// The end date
        /// </summary>
        /// <value>The end date</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The minimum report delay
        /// </summary>
        /// <value>The minimum report delay</value>
        [DataMember(Name="reportDelayMin", EmitDefaultValue=false)]
        public int? ReportDelayMin { get; set; }

        /// <summary>
        /// The maximum report delay
        /// </summary>
        /// <value>The maximum report delay</value>
        [DataMember(Name="reportDelayMax", EmitDefaultValue=false)]
        public int? ReportDelayMax { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentFee {\n");
            sb.Append("  MinAmount: ").Append(MinAmount).Append("\n");
            sb.Append("  MaxAmount: ").Append(MaxAmount).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ReportDelayMin: ").Append(ReportDelayMin).Append("\n");
            sb.Append("  ReportDelayMax: ").Append(ReportDelayMax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentFee);
        }

        /// <summary>
        /// Returns true if PaymentFee instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentFee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentFee input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MinAmount == input.MinAmount ||
                    (this.MinAmount != null &&
                    this.MinAmount.Equals(input.MinAmount))
                ) && 
                (
                    this.MaxAmount == input.MaxAmount ||
                    (this.MaxAmount != null &&
                    this.MaxAmount.Equals(input.MaxAmount))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.ReportDelayMin == input.ReportDelayMin ||
                    (this.ReportDelayMin != null &&
                    this.ReportDelayMin.Equals(input.ReportDelayMin))
                ) && 
                (
                    this.ReportDelayMax == input.ReportDelayMax ||
                    (this.ReportDelayMax != null &&
                    this.ReportDelayMax.Equals(input.ReportDelayMax))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MinAmount != null)
                    hashCode = hashCode * 59 + this.MinAmount.GetHashCode();
                if (this.MaxAmount != null)
                    hashCode = hashCode * 59 + this.MaxAmount.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.ReportDelayMin != null)
                    hashCode = hashCode * 59 + this.ReportDelayMin.GetHashCode();
                if (this.ReportDelayMax != null)
                    hashCode = hashCode * 59 + this.ReportDelayMax.GetHashCode();
                return hashCode;
            }
        }
    }

}
