/* 
 * Payment Gateway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = pachirapay.Connector.Client.OpenAPIDateConverter;

namespace pachirapay.Connector.Model
{
    /// <summary>
    /// The card payment response
    /// </summary>
    [DataContract]
    public partial class Card3DsValidateAuthenticationResponse :  IEquatable<Card3DsValidateAuthenticationResponse>
    {
        /// <summary>
        /// The authentication status
        /// </summary>
        /// <value>The authentication status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthenticationStatusEnum
        {
            /// <summary>
            /// Enum Undefined for value: undefined
            /// </summary>
            [EnumMember(Value = "undefined")]
            Undefined = 1,

            /// <summary>
            /// Enum Authenticated for value: authenticated
            /// </summary>
            [EnumMember(Value = "authenticated")]
            Authenticated = 2,

            /// <summary>
            /// Enum NotAuthenticated for value: notAuthenticated
            /// </summary>
            [EnumMember(Value = "notAuthenticated")]
            NotAuthenticated = 3

        }

        /// <summary>
        /// The authentication status
        /// </summary>
        /// <value>The authentication status</value>
        [DataMember(Name="authenticationStatus", EmitDefaultValue=false)]
        public AuthenticationStatusEnum? AuthenticationStatus { get; set; }
        /// <summary>
        /// The liability shift status
        /// </summary>
        /// <value>The liability shift status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LiabilityShiftStatusEnum
        {
            /// <summary>
            /// Enum Undefined for value: undefined
            /// </summary>
            [EnumMember(Value = "undefined")]
            Undefined = 1,

            /// <summary>
            /// Enum Shift for value: shift
            /// </summary>
            [EnumMember(Value = "shift")]
            Shift = 2,

            /// <summary>
            /// Enum NoShift for value: noShift
            /// </summary>
            [EnumMember(Value = "noShift")]
            NoShift = 3

        }

        /// <summary>
        /// The liability shift status
        /// </summary>
        /// <value>The liability shift status</value>
        [DataMember(Name="liabilityShiftStatus", EmitDefaultValue=false)]
        public LiabilityShiftStatusEnum? LiabilityShiftStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Card3DsValidateAuthenticationResponse" /> class.
        /// </summary>
        /// <param name="authenticationStatus">The authentication status.</param>
        /// <param name="liabilityShiftStatus">The liability shift status.</param>
        /// <param name="authenticationData">All authentication data, as a dictionary of multiple key/value pairs..</param>
        /// <param name="responseMessage">The global response message.</param>
        public Card3DsValidateAuthenticationResponse(AuthenticationStatusEnum? authenticationStatus = default(AuthenticationStatusEnum?), LiabilityShiftStatusEnum? liabilityShiftStatus = default(LiabilityShiftStatusEnum?), Dictionary<string, string> authenticationData = default(Dictionary<string, string>), string responseMessage = default(string))
        {
            this.AuthenticationStatus = authenticationStatus;
            this.LiabilityShiftStatus = liabilityShiftStatus;
            this.AuthenticationData = authenticationData;
            this.ResponseMessage = responseMessage;
        }
        


        /// <summary>
        /// All authentication data, as a dictionary of multiple key/value pairs.
        /// </summary>
        /// <value>All authentication data, as a dictionary of multiple key/value pairs.</value>
        [DataMember(Name="authenticationData", EmitDefaultValue=false)]
        public Dictionary<string, string> AuthenticationData { get; set; }

        /// <summary>
        /// The global response message
        /// </summary>
        /// <value>The global response message</value>
        [DataMember(Name="responseMessage", EmitDefaultValue=false)]
        public string ResponseMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Card3DsValidateAuthenticationResponse {\n");
            sb.Append("  AuthenticationStatus: ").Append(AuthenticationStatus).Append("\n");
            sb.Append("  LiabilityShiftStatus: ").Append(LiabilityShiftStatus).Append("\n");
            sb.Append("  AuthenticationData: ").Append(AuthenticationData).Append("\n");
            sb.Append("  ResponseMessage: ").Append(ResponseMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Card3DsValidateAuthenticationResponse);
        }

        /// <summary>
        /// Returns true if Card3DsValidateAuthenticationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of Card3DsValidateAuthenticationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Card3DsValidateAuthenticationResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthenticationStatus == input.AuthenticationStatus ||
                    (this.AuthenticationStatus != null &&
                    this.AuthenticationStatus.Equals(input.AuthenticationStatus))
                ) && 
                (
                    this.LiabilityShiftStatus == input.LiabilityShiftStatus ||
                    (this.LiabilityShiftStatus != null &&
                    this.LiabilityShiftStatus.Equals(input.LiabilityShiftStatus))
                ) && 
                (
                    this.AuthenticationData == input.AuthenticationData ||
                    this.AuthenticationData != null &&
                    input.AuthenticationData != null &&
                    this.AuthenticationData.SequenceEqual(input.AuthenticationData)
                ) && 
                (
                    this.ResponseMessage == input.ResponseMessage ||
                    (this.ResponseMessage != null &&
                    this.ResponseMessage.Equals(input.ResponseMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthenticationStatus != null)
                    hashCode = hashCode * 59 + this.AuthenticationStatus.GetHashCode();
                if (this.LiabilityShiftStatus != null)
                    hashCode = hashCode * 59 + this.LiabilityShiftStatus.GetHashCode();
                if (this.AuthenticationData != null)
                    hashCode = hashCode * 59 + this.AuthenticationData.GetHashCode();
                if (this.ResponseMessage != null)
                    hashCode = hashCode * 59 + this.ResponseMessage.GetHashCode();
                return hashCode;
            }
        }
    }

}
